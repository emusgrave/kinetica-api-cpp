/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

/**
 * Retrieves records from a given table, optionally filtered by an
 * expression and/or sorted by a column. This operation can be performed on
 * tables
 * and views. Records can be returned encoded as binary, json, or geojson.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.  Note that when paging through a table, if the table
 * (or the underlying table in case of a view) is updated (records are
 * inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the
 * updates applied.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsResponse<boost::any> GPUdb::getRecords( const GetRecordsRequest& request_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an
 * expression and/or sorted by a column. This operation can be performed on
 * tables
 * and views. Records can be returned encoded as binary, json, or geojson.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.  Note that when paging through a table, if the table
 * (or the underlying table in case of a view) is updated (records are
 * inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the
 * updates applied.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsResponse<boost::any>& GPUdb::getRecords( const GetRecordsRequest& request_,
                                                   GetRecordsResponse<boost::any>& response_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an
 * expression and/or sorted by a column. This operation can be performed on
 * tables
 * and views. Records can be returned encoded as binary, json, or geojson.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.  Note that when paging through a table, if the table
 * (or the underlying table in case of a view) is updated (records are
 * inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the
 * updates applied.
 * 
 * @param tableName  Name of the table or view from which the records will be
 *                   fetched, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be
 *               returned.  The number of records returned will never exceed
 *               the server's own limit, defined by the
 *               <a href="../../../config/#config-main-general"
 *               target="_top">max_get_records_size</a> parameter in the server
 *               configuration.
 *               Use @a hasMoreRecords to see if more records exist in the
 *               result to be fetched, and
 *               @a offset & @a limit to request subsequent pages of results.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsResponse<boost::any> GPUdb::getRecords( const std::string& tableName,
                                                  const int64_t offset,
                                                  const int64_t limit,
                                                  const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves records from a given table, optionally filtered by an
 * expression and/or sorted by a column. This operation can be performed on
 * tables
 * and views. Records can be returned encoded as binary, json, or geojson.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.  Note that when paging through a table, if the table
 * (or the underlying table in case of a view) is updated (records are
 * inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the
 * updates applied.
 * 
 * @param tableName  Name of the table or view from which the records will be
 *                   fetched, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be
 *               returned.  The number of records returned will never exceed
 *               the server's own limit, defined by the
 *               <a href="../../../config/#config-main-general"
 *               target="_top">max_get_records_size</a> parameter in the server
 *               configuration.
 *               Use @a hasMoreRecords to see if more records exist in the
 *               result to be fetched, and
 *               @a offset & @a limit to request subsequent pages of results.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsResponse<boost::any>& GPUdb::getRecords( const std::string& tableName,
                                                   const int64_t offset,
                                                   const int64_t limit,
                                                   const std::map<std::string, std::string>& options,
                                                   GetRecordsResponse<boost::any>& response_ ) const;

/**
 * Retrieves the complete series/track records from the given
 * @a worldTableName based on the partial track information contained in
 * the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * In contrast to {@link #getRecords(const GetRecordsRequest&) const} this
 * returns records grouped by
 * series/track. So if @a offset is 0 and @a limit is 5 this operation
 * would return the first 5 series/tracks in @a tableName. Each series/track
 * will be returned sorted by their TIMESTAMP column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsBySeriesResponse<boost::any> GPUdb::getRecordsBySeries( const GetRecordsBySeriesRequest& request_ ) const;

/**
 * Retrieves the complete series/track records from the given
 * @a worldTableName based on the partial track information contained in
 * the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const GetRecordsRequest&,GetRecordsResponse<boost::any>&) const}
 * this returns records grouped by
 * series/track. So if @a offset is 0 and @a limit is 5 this operation
 * would return the first 5 series/tracks in @a tableName. Each series/track
 * will be returned sorted by their TIMESTAMP column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsBySeriesResponse<boost::any>& GPUdb::getRecordsBySeries( const GetRecordsBySeriesRequest& request_,
                                                                   GetRecordsBySeriesResponse<boost::any>& response_ ) const;

/**
 * Retrieves the complete series/track records from the given
 * @a worldTableName based on the partial track information contained in
 * the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&) const}
 * this returns records grouped by
 * series/track. So if @a offset is 0 and @a limit is 5 this operation
 * would return the first 5 series/tracks in @a tableName. Each series/track
 * will be returned sorted by their TIMESTAMP column.
 * 
 * @param tableName  Name of the table or view for which series/tracks will be
 *                   fetched, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Typically
 *                        this is used when retrieving series/tracks from a
 *                        view (which contains partial series/tracks) but the
 *                        user wants to retrieve the entire original
 *                        series/tracks. Can be blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsBySeriesResponse<boost::any> GPUdb::getRecordsBySeries( const std::string& tableName,
                                                                  const std::string& worldTableName,
                                                                  const int32_t offset,
                                                                  const int32_t limit,
                                                                  const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves the complete series/track records from the given
 * @a worldTableName based on the partial track information contained in
 * the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&,GetRecordsResponse<boost::any>&) const}
 * this returns records grouped by
 * series/track. So if @a offset is 0 and @a limit is 5 this operation
 * would return the first 5 series/tracks in @a tableName. Each series/track
 * will be returned sorted by their TIMESTAMP column.
 * 
 * @param tableName  Name of the table or view for which series/tracks will be
 *                   fetched, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName, in
 *                        [schema_name.]table_name format, using standard <a
 *                        href="../../../concepts/tables/#table-name-resolution"
 *                        target="_top">name resolution rules</a>.  Typically
 *                        this is used when retrieving series/tracks from a
 *                        view (which contains partial series/tracks) but the
 *                        user wants to retrieve the entire original
 *                        series/tracks. Can be blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsBySeriesResponse<boost::any>& GPUdb::getRecordsBySeries( const std::string& tableName,
                                                                   const std::string& worldTableName,
                                                                   const int32_t offset,
                                                                   const int32_t limit,
                                                                   const std::map<std::string, std::string>& options,
                                                                   GetRecordsBySeriesResponse<boost::any>& response_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally
 * return the record IDs which can be used in certain queries such as
 * {@link #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from
 * join views using this operation.
 * (DEPRECATED)
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsFromCollectionResponse<boost::any> GPUdb::getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally
 * return the record IDs which can be used in certain queries such as
 * {@link
 * #deleteRecords(const DeleteRecordsRequest&,DeleteRecordsResponse&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from
 * join views using this operation.
 * (DEPRECATED)
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsFromCollectionResponse<boost::any>& GPUdb::getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_,
                                                                               GetRecordsFromCollectionResponse<boost::any>& response_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally
 * return the record IDs which can be used in certain queries such as
 * {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from
 * join views using this operation.
 * (DEPRECATED)
 * 
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.  Must be an
 *                   existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be
 *               returned.  The number of records returned will never exceed
 *               the server's own limit, defined by the
 *               <a href="../../../config/#config-main-general"
 *               target="_top">max_get_records_size</a> parameter in the server
 *               configuration.
 *               Use @a offset & @a limit to request subsequent pages of
 *               results.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If @a
 *                 true then return the internal record ID along with each
 *                 returned record.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                         <li> gpudb::get_records_from_collection_expression:
 *                 Optional filter expression to apply to the table.  The
 *                 default value is ''.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<> 
GetRecordsFromCollectionResponse<boost::any> GPUdb::getRecordsFromCollection( const std::string& tableName,
                                                                              const int64_t offset,
                                                                              const int64_t limit,
                                                                              const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves records from a collection. The operation can optionally
 * return the record IDs which can be used in certain queries such as
 * {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&,DeleteRecordsResponse&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and
 * @a limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from
 * join views using this operation.
 * (DEPRECATED)
 * 
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved, in [schema_name.]table_name format, using
 *                   standard <a
 *                   href="../../../concepts/tables/#table-name-resolution"
 *                   target="_top">name resolution rules</a>.  Must be an
 *                   existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be
 *               returned.  The number of records returned will never exceed
 *               the server's own limit, defined by the
 *               <a href="../../../config/#config-main-general"
 *               target="_top">max_get_records_size</a> parameter in the server
 *               configuration.
 *               Use @a offset & @a limit to request subsequent pages of
 *               results.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If @a
 *                 true then return the internal record ID along with each
 *                 returned record.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                         <li> gpudb::get_records_from_collection_expression:
 *                 Optional filter expression to apply to the table.  The
 *                 default value is ''.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<> 
GetRecordsFromCollectionResponse<boost::any>& GPUdb::getRecordsFromCollection( const std::string& tableName,
                                                                               const int64_t offset,
                                                                               const int64_t limit,
                                                                               const std::map<std::string, std::string>& options,
                                                                               GetRecordsFromCollectionResponse<boost::any>& response_ ) const;
