/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_WAL_H__
#define __SHOW_WAL_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::showWal(const ShowWalRequest&) const
     * "GPUdb::showWal".
     *
     * Requests table wal properties.
     * Returns information about the requested table wal entries.
     */
    struct ShowWalRequest
    {
        /**
         * Constructs a ShowWalRequest object with default parameters.
         */
        ShowWalRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowWalRequest object with the specified parameters.
         *
         * @param[in] tableNames_  List of tables to query. An asterisk returns
         *                         all tables.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::show_wal_show_settings
         *                              "show_wal_show_settings": If @ref
         *                              gpudb::show_wal_true "true" include a
         *                              map of the wal settings for the
         *                              requested tables.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_wal_true
         *                                      "show_wal_true"
         *                                  <li>@ref gpudb::show_wal_false
         *                                      "show_wal_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_wal_true "show_wal_true".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowWalRequest(const std::vector<std::string>& tableNames_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            options( options_ )
        {
        }

        /**
         * List of tables to query. An asterisk returns all tables.
         */
        std::vector<std::string> tableNames;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_wal_show_settings "show_wal_show_settings":
         *         If @ref gpudb::show_wal_true "true" include a map of the wal
         *         settings for the requested tables.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_wal_true "show_wal_true"
         *             <li>@ref gpudb::show_wal_false "show_wal_false"
         *         </ul>
         *         The default value is @ref gpudb::show_wal_true
         *         "show_wal_true".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowWalRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowWalRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowWalRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showWal(const ShowWalRequest&) const "GPUdb::showWal".
     */
    struct ShowWalResponse
    {
        /**
         * Constructs a ShowWalResponse object with default parameters.
         */
        ShowWalResponse() :
            tableNames(std::vector<std::string>()),
            sizes(std::vector<std::vector<int64_t> >()),
            capacities(std::vector<int64_t>()),
            uncommitted(std::vector<std::vector<int64_t> >()),
            settings(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * List of returned tables.
         */
        std::vector<std::string> tableNames;

        /**
         * List of current wal usage.
         */
        std::vector<std::vector<int64_t> > sizes;

        /**
         * List of wal capacities.
         */
        std::vector<int64_t> capacities;

        /**
         * List of number of uncommitted entries.
         */
        std::vector<std::vector<int64_t> > uncommitted;

        /**
         * List of table wal settings.
         */
        std::vector<std::map<std::string, std::string> > settings;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowWalResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowWalResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.sizes);
            ::avro::encode(e, v.capacities);
            ::avro::encode(e, v.uncommitted);
            ::avro::encode(e, v.settings);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowWalResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.sizes);
                            break;

                        case 2:
                            ::avro::decode(d, v.capacities);
                            break;

                        case 3:
                            ::avro::decode(d, v.uncommitted);
                            break;

                        case 4:
                            ::avro::decode(d, v.settings);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.sizes);
                ::avro::decode(d, v.capacities);
                ::avro::decode(d, v.uncommitted);
                ::avro::decode(d, v.settings);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_WAL_H__
