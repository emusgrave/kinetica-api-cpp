/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_SHUTDOWN_H__
#define __ADMIN_SHUTDOWN_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminShutdown(const AdminShutdownRequest&) const
     * "GPUdb::adminShutdown".
     *
     * Exits the database server application.
     */
    struct AdminShutdownRequest
    {
        /**
         * Constructs an AdminShutdownRequest object with default parameters.
         */
        AdminShutdownRequest() :
            exitType(std::string()),
            authorization(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminShutdownRequest object with the specified
         * parameters.
         *
         * @param[in] exitType_  Reserved for future use. User can pass an
         *                       empty string.
         * @param[in] authorization_  No longer used. User can pass an empty
         *                            string.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        AdminShutdownRequest(const std::string& exitType_, const std::string& authorization_, const std::map<std::string, std::string>& options_):
            exitType( exitType_ ),
            authorization( authorization_ ),
            options( options_ )
        {
        }

        /**
         * Reserved for future use. User can pass an empty string.
         */
        std::string exitType;

        /**
         * No longer used. User can pass an empty string.
         */
        std::string authorization;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminShutdownRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminShutdownRequest& v)
        {
            ::avro::encode(e, v.exitType);
            ::avro::encode(e, v.authorization);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminShutdownRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.exitType);
                            break;

                        case 1:
                            ::avro::decode(d, v.authorization);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.exitType);
                ::avro::decode(d, v.authorization);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminShutdown(const AdminShutdownRequest&) const
     * "GPUdb::adminShutdown".
     */
    struct AdminShutdownResponse
    {
        /**
         * Constructs an AdminShutdownResponse object with default parameters.
         */
        AdminShutdownResponse() :
            exitStatus(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * 'OK' upon (right before) successful exit.
         */
        std::string exitStatus;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminShutdownResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminShutdownResponse& v)
        {
            ::avro::encode(e, v.exitStatus);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminShutdownResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.exitStatus);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.exitStatus);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_SHUTDOWN_H__
