/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SQL_PROC_H__
#define __SHOW_SQL_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showSqlProc(const ShowSqlProcRequest&) const
     * "GPUdb::showSqlProc".
     *
     * Shows information about SQL procedures, including the full definition of
     * each requested procedure.
     */
    struct ShowSqlProcRequest
    {
        /**
         * Constructs a ShowSqlProcRequest object with default parameters.
         */
        ShowSqlProcRequest() :
            procedureName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSqlProcRequest object with the specified
         * parameters.
         *
         * @param[in] procedureName_  Name of the procedure for which to
         *                            retrieve the information. If blank, then
         *                            information about all procedures is
         *                            returned. The default value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_sql_proc_no_error_if_not_exists
         *                              "show_sql_proc_no_error_if_not_exists":
         *                              If @ref gpudb::show_sql_proc_true
         *                              "true", no error will be returned if
         *                              the requested procedure does not exist.
         *                              If @ref gpudb::show_sql_proc_false
         *                              "false", an error will be returned if
         *                              the requested procedure does not exist.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_sql_proc_true
         *                                      "show_sql_proc_true"
         *                                  <li>@ref gpudb::show_sql_proc_false
         *                                      "show_sql_proc_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_sql_proc_false
         *                              "show_sql_proc_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowSqlProcRequest(const std::string& procedureName_, const std::map<std::string, std::string>& options_):
            procedureName( procedureName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the procedure for which to retrieve the information. If
         * blank, then information about all procedures is returned. The
         * default value is ''.
         */
        std::string procedureName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_sql_proc_no_error_if_not_exists
         *         "show_sql_proc_no_error_if_not_exists": If @ref
         *         gpudb::show_sql_proc_true "true", no error will be returned
         *         if the requested procedure does not exist.  If @ref
         *         gpudb::show_sql_proc_false "false", an error will be
         *         returned if the requested procedure does not exist.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_sql_proc_true "show_sql_proc_true"
         *             <li>@ref gpudb::show_sql_proc_false
         *                 "show_sql_proc_false"
         *         </ul>
         *         The default value is @ref gpudb::show_sql_proc_false
         *         "show_sql_proc_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSqlProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSqlProcRequest& v)
        {
            ::avro::encode(e, v.procedureName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSqlProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procedureName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procedureName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showSqlProc(const ShowSqlProcRequest&) const
     * "GPUdb::showSqlProc".
     */
    struct ShowSqlProcResponse
    {
        /**
         * Constructs a ShowSqlProcResponse object with default parameters.
         */
        ShowSqlProcResponse() :
            procedureNames(std::vector<std::string>()),
            procedureDefinitions(std::vector<std::string>()),
            additionalInfo(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * A list of the names of the requested procedures.
         */
        std::vector<std::string> procedureNames;

        /**
         * A list of the definitions for the requested procedures.
         */
        std::vector<std::string> procedureDefinitions;

        /**
         * Additional information about the respective tables in the requested
         * procedures.
         * <ul>
         *     <li>@ref gpudb::show_sql_proc_execute_as
         *         "show_sql_proc_execute_as": The periodic execution
         *         impersonate user. The default value is ''.
         *     <li>@ref gpudb::show_sql_proc_execute_interval
         *         "show_sql_proc_execute_interval": The periodic execution
         *         interval in seconds. The default value is ''.
         *     <li>@ref gpudb::show_sql_proc_execute_start_time
         *         "show_sql_proc_execute_start_time": The initial date/time
         *         that periodic execution began. The default value is ''.
         *     <li>@ref gpudb::show_sql_proc_execute_stop_time
         *         "show_sql_proc_execute_stop_time": Time at which the
         *         periodic execution stops. The default value is ''.
         * </ul>
         */
        std::vector<std::map<std::string, std::string> > additionalInfo;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSqlProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSqlProcResponse& v)
        {
            ::avro::encode(e, v.procedureNames);
            ::avro::encode(e, v.procedureDefinitions);
            ::avro::encode(e, v.additionalInfo);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowSqlProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procedureNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.procedureDefinitions);
                            break;

                        case 2:
                            ::avro::decode(d, v.additionalInfo);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procedureNames);
                ::avro::decode(d, v.procedureDefinitions);
                ::avro::decode(d, v.additionalInfo);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_SQL_PROC_H__
