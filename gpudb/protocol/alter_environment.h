/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_ENVIRONMENT_H__
#define __ALTER_ENVIRONMENT_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterEnvironment(const AlterEnvironmentRequest&) const
     * "GPUdb::alterEnvironment".
     *
     * Alters an existing environment which can be referenced by a <a
     * href="../../../concepts/udf/" target="_top">user-defined function</a>
     * (UDF).
     */
    struct AlterEnvironmentRequest
    {
        /**
         * Constructs an AlterEnvironmentRequest object with default
         * parameters.
         */
        AlterEnvironmentRequest() :
            environmentName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterEnvironmentRequest object with the specified
         * parameters.
         *
         * @param[in] environmentName_  Name of the environment to be altered.
         * @param[in] action_  Modification operation to be applied.
         *                     Supported values:
         *                     <ul>
         *                         <li>@ref
         *                             gpudb::alter_environment_install_package
         *                             "alter_environment_install_package":
         *                             Install a python package from PyPI, an
         *                             external data source or KiFS
         *                         <li>@ref
         *                             gpudb::alter_environment_install_requirements
         *                             "alter_environment_install_requirements":
         *                             Install packages from a requirements
         *                             file
         *                         <li>@ref
         *                             gpudb::alter_environment_uninstall_package
         *                             "alter_environment_uninstall_package":
         *                             Uninstall a python package.
         *                         <li>@ref
         *                             gpudb::alter_environment_uninstall_requirements
         *                             "alter_environment_uninstall_requirements":
         *                             Uninstall packages from a requirements
         *                             file
         *                         <li>@ref gpudb::alter_environment_reset
         *                             "alter_environment_reset": Uninstalls
         *                             all packages in the environment and
         *                             resets it to the original state at time
         *                             of creation
         *                         <li>@ref gpudb::alter_environment_rebuild
         *                             "alter_environment_rebuild": Recreates
         *                             the environment and re-installs all
         *                             packages, upgrades the packages if
         *                             necessary based on dependencies
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action_.  For example, if @a action_ is @ref
         *                    gpudb::alter_environment_install_package
         *                    "install_package", this would be the python
         *                    package name.  If @a action_ is @ref
         *                    gpudb::alter_environment_install_requirements
         *                    "install_requirements", this would be the path of
         *                    a requirements file from which to install
         *                    packages.  If an external data source is
         *                    specified in @ref
         *                    gpudb::alter_environment_datasource_name
         *                    "datasource_name", this can be the path to a
         *                    wheel file or source archive. Alternatively, if
         *                    installing from a file (wheel or source archive),
         *                    the value may be a reference to a file in <a
         *                    href="../../../tools/kifs/"
         *                    target="_top">KiFS</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::alter_environment_datasource_name
         *                              "alter_environment_datasource_name":
         *                              Name of an existing external data
         *                              source from which packages specified in
         *                              @a value_ can be loaded
         *                      </ul>
         *                      The default value is an empty map.
         */
        AlterEnvironmentRequest(const std::string& environmentName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            environmentName( environmentName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        /**
         * Name of the environment to be altered.
         */
        std::string environmentName;

        /**
         * Modification operation to be applied.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::alter_environment_install_package
         *         "alter_environment_install_package": Install a python
         *         package from PyPI, an external data source or KiFS
         *     <li>@ref gpudb::alter_environment_install_requirements
         *         "alter_environment_install_requirements": Install packages
         *         from a requirements file
         *     <li>@ref gpudb::alter_environment_uninstall_package
         *         "alter_environment_uninstall_package": Uninstall a python
         *         package.
         *     <li>@ref gpudb::alter_environment_uninstall_requirements
         *         "alter_environment_uninstall_requirements": Uninstall
         *         packages from a requirements file
         *     <li>@ref gpudb::alter_environment_reset
         *         "alter_environment_reset": Uninstalls all packages in the
         *         environment and resets it to the original state at time of
         *         creation
         *     <li>@ref gpudb::alter_environment_rebuild
         *         "alter_environment_rebuild": Recreates the environment and
         *         re-installs all packages, upgrades the packages if necessary
         *         based on dependencies
         * </ul>
         */
        std::string action;

        /**
         * The value of the modification, depending on @ref action.  For
         * example, if @ref action is @ref
         * gpudb::alter_environment_install_package "install_package", this
         * would be the python package name.
         *
         * If @ref action is @ref gpudb::alter_environment_install_requirements
         * "install_requirements", this would be the path of a requirements
         * file from which to install packages.
         *
         * If an external data source is specified in @ref
         * gpudb::alter_environment_datasource_name "datasource_name", this can
         * be the path to a wheel file or source archive. Alternatively, if
         * installing from a file (wheel or source archive), the value may be a
         * reference to a file in <a href="../../../tools/kifs/"
         * target="_top">KiFS</a>.
         */
        std::string value;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::alter_environment_datasource_name
         *         "alter_environment_datasource_name": Name of an existing
         *         external data source from which packages specified in @ref
         *         value can be loaded
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterEnvironmentRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterEnvironmentRequest& v)
        {
            ::avro::encode(e, v.environmentName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterEnvironmentRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterEnvironment(const AlterEnvironmentRequest&) const
     * "GPUdb::alterEnvironment".
     */
    struct AlterEnvironmentResponse
    {
        /**
         * Constructs an AlterEnvironmentResponse object with default
         * parameters.
         */
        AlterEnvironmentResponse() :
            environmentName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::AlterEnvironmentRequest::environmentName
         * "environmentName".
         */
        std::string environmentName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterEnvironmentResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterEnvironmentResponse& v)
        {
            ::avro::encode(e, v.environmentName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterEnvironmentResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_ENVIRONMENT_H__
