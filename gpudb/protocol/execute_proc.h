/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EXECUTE_PROC_H__
#define __EXECUTE_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::executeProc(const ExecuteProcRequest&) const
     * "GPUdb::executeProc".
     *
     * Executes a proc. This endpoint is asynchronous and does not wait for the
     * proc to complete before returning.
     *
     * If the proc being executed is distributed, @ref inputTableNames & @ref
     * inputColumnNames may be passed to the proc to use for reading data, and
     * @ref outputTableNames may be passed to the proc to use for writing data.
     *
     * If the proc being executed is non-distributed, these table parameters
     * will be ignored.
     */
    struct ExecuteProcRequest
    {
        /**
         * Constructs an ExecuteProcRequest object with default parameters.
         */
        ExecuteProcRequest() :
            procName(std::string()),
            params(std::map<std::string, std::string>()),
            binParams(std::map<std::string, std::vector<uint8_t> >()),
            inputTableNames(std::vector<std::string>()),
            inputColumnNames(std::map<std::string, std::vector<std::string> >()),
            outputTableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an ExecuteProcRequest object with the specified
         * parameters.
         *
         * @param[in] procName_  Name of the proc to execute. Must be the name
         *                       of a currently existing proc.
         * @param[in] params_  A map containing named parameters to pass to the
         *                     proc. Each key/value pair specifies the name of
         *                     a parameter and its value. The default value is
         *                     an empty map.
         * @param[in] binParams_  A map containing named binary parameters to
         *                        pass to the proc. Each key/value pair
         *                        specifies the name of a parameter and its
         *                        value. The default value is an empty map.
         * @param[in] inputTableNames_  Names of the tables containing data to
         *                              be passed to the proc. Each name
         *                              specified must be the name of a
         *                              currently existing table, in
         *                              [schema_name.]table_name format, using
         *                              standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution
         *                              rules</a>. If no table names are
         *                              specified, no data will be passed to
         *                              the proc.  This parameter is ignored if
         *                              the proc has a non-distributed
         *                              execution mode. The default value is an
         *                              empty vector.
         * @param[in] inputColumnNames_  Map of table names from @a
         *                               inputTableNames_ to lists of names of
         *                               columns from those tables that will be
         *                               passed to the proc. Each column name
         *                               specified must be the name of an
         *                               existing column in the corresponding
         *                               table. If a table name from @a
         *                               inputTableNames_ is not included, all
         *                               columns from that table will be passed
         *                               to the proc.  This parameter is
         *                               ignored if the proc has a
         *                               non-distributed execution mode. The
         *                               default value is an empty map.
         * @param[in] outputTableNames_  Names of the tables to which output
         *                               data from the proc will be written,
         *                               each in [schema_name.]table_name
         *                               format, using standard <a
         *                               href="../../../concepts/tables/#table-name-resolution"
         *                               target="_top">name resolution
         *                               rules</a> and meeting <a
         *                               href="../../../concepts/tables/#table-naming-criteria"
         *                               target="_top">table naming
         *                               criteria</a>. If a specified table
         *                               does not exist, it will automatically
         *                               be created with the same schema as the
         *                               corresponding table (by order) from @a
         *                               inputTableNames_, excluding any
         *                               primary and shard keys. If a specified
         *                               table is a non-persistent result
         *                               table, it must not have primary or
         *                               shard keys. If no table names are
         *                               specified, no output data can be
         *                               returned from the proc. This parameter
         *                               is ignored if the proc has a
         *                               non-distributed execution mode. The
         *                               default value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::execute_proc_cache_input
         *                              "execute_proc_cache_input": A
         *                              comma-delimited list of table names
         *                              from @a inputTableNames_ from which
         *                              input data will be cached for use in
         *                              subsequent calls to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc" with the @ref
         *                              gpudb::execute_proc_use_cached_input
         *                              "use_cached_input" option. Cached input
         *                              data will be retained until the proc
         *                              status is cleared with the @ref
         *                              GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *                              "clear_complete" option of @ref
         *                              GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *                              "GPUdb::showProcStatus" and all proc
         *                              instances using the cached data have
         *                              completed. The default value is ''.
         *                          <li>@ref
         *                              gpudb::execute_proc_use_cached_input
         *                              "execute_proc_use_cached_input": A
         *                              comma-delimited list of run IDs (as
         *                              returned from prior calls to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc") of running or
         *                              completed proc instances from which
         *                              input data cached using the @ref
         *                              gpudb::execute_proc_cache_input
         *                              "cache_input" option will be used.
         *                              Cached input data will not be used for
         *                              any tables specified in @a
         *                              inputTableNames_, but data from all
         *                              other tables cached for the specified
         *                              run IDs will be passed to the proc. If
         *                              the same table was cached for multiple
         *                              specified run IDs, the cached data from
         *                              the first run ID specified in the list
         *                              that includes that table will be used.
         *                              The default value is ''.
         *                          <li>@ref gpudb::execute_proc_run_tag
         *                              "execute_proc_run_tag": A string that,
         *                              if not empty, can be used in subsequent
         *                              calls to @ref
         *                              GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *                              "GPUdb::showProcStatus" or @ref
         *                              GPUdb::killProc(const KillProcRequest&) const
         *                              "GPUdb::killProc" to identify the proc
         *                              instance. The default value is ''.
         *                          <li>@ref
         *                              gpudb::execute_proc_max_output_lines
         *                              "execute_proc_max_output_lines": The
         *                              maximum number of lines of output from
         *                              stdout and stderr to return via @ref
         *                              GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *                              "GPUdb::showProcStatus". If the number
         *                              of lines output exceeds the maximum,
         *                              earlier lines are discarded. The
         *                              default value is '100'.
         *                          <li>@ref
         *                              gpudb::execute_proc_execute_at_startup
         *                              "execute_proc_execute_at_startup": If
         *                              @ref gpudb::execute_proc_true "true",
         *                              an instance of the proc will run when
         *                              the database is started instead of
         *                              running immediately. The @ref
         *                              gpudb::ExecuteProcResponse::runId
         *                              "runId" can be retrieved using @ref
         *                              GPUdb::showProc(const ShowProcRequest&) const
         *                              "GPUdb::showProc" and used in @ref
         *                              GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *                              "GPUdb::showProcStatus".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::execute_proc_true
         *                                      "execute_proc_true"
         *                                  <li>@ref gpudb::execute_proc_false
         *                                      "execute_proc_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::execute_proc_false
         *                              "execute_proc_false".
         *                          <li>@ref
         *                              gpudb::execute_proc_execute_at_startup_as
         *                              "execute_proc_execute_at_startup_as":
         *                              Sets the alternate user name to execute
         *                              this proc instance as when @ref
         *                              gpudb::execute_proc_execute_at_startup
         *                              "execute_at_startup" is @ref
         *                              gpudb::execute_proc_true "true". The
         *                              default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ExecuteProcRequest(const std::string& procName_, const std::map<std::string, std::string>& params_, const std::map<std::string, std::vector<uint8_t> >& binParams_, const std::vector<std::string>& inputTableNames_, const std::map<std::string, std::vector<std::string> >& inputColumnNames_, const std::vector<std::string>& outputTableNames_, const std::map<std::string, std::string>& options_):
            procName( procName_ ),
            params( params_ ),
            binParams( binParams_ ),
            inputTableNames( inputTableNames_ ),
            inputColumnNames( inputColumnNames_ ),
            outputTableNames( outputTableNames_ ),
            options( options_ )
        {
        }

        /**
         * Name of the proc to execute. Must be the name of a currently
         * existing proc.
         */
        std::string procName;

        /**
         * A map containing named parameters to pass to the proc. Each
         * key/value pair specifies the name of a parameter and its value. The
         * default value is an empty map.
         */
        std::map<std::string, std::string> params;

        /**
         * A map containing named binary parameters to pass to the proc. Each
         * key/value pair specifies the name of a parameter and its value. The
         * default value is an empty map.
         */
        std::map<std::string, std::vector<uint8_t> > binParams;

        /**
         * Names of the tables containing data to be passed to the proc. Each
         * name specified must be the name of a currently existing table, in [
         * schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>. If no table names are
         * specified, no data will be passed to the proc.  This parameter is
         * ignored if the proc has a non-distributed execution mode. The
         * default value is an empty vector.
         */
        std::vector<std::string> inputTableNames;

        /**
         * Map of table names from @ref inputTableNames to lists of names of
         * columns from those tables that will be passed to the proc. Each
         * column name specified must be the name of an existing column in the
         * corresponding table. If a table name from @ref inputTableNames is
         * not included, all columns from that table will be passed to the
         * proc.  This parameter is ignored if the proc has a non-distributed
         * execution mode. The default value is an empty map.
         */
        std::map<std::string, std::vector<std::string> > inputColumnNames;

        /**
         * Names of the tables to which output data from the proc will be
         * written, each in [ schema_name.\ ]table_name format, using standard
         * <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>. If a specified table does
         * not exist, it will automatically be created with the same schema as
         * the corresponding table (by order) from @ref inputTableNames,
         * excluding any primary and shard keys. If a specified table is a
         * non-persistent result table, it must not have primary or shard keys.
         * If no table names are specified, no output data can be returned from
         * the proc. This parameter is ignored if the proc has a
         * non-distributed execution mode. The default value is an empty
         * vector.
         */
        std::vector<std::string> outputTableNames;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::execute_proc_cache_input
         *         "execute_proc_cache_input": A comma-delimited list of table
         *         names from @ref inputTableNames from which input data will
         *         be cached for use in subsequent calls to @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc" with the @ref
         *         gpudb::execute_proc_use_cached_input "use_cached_input"
         *         option. Cached input data will be retained until the proc
         *         status is cleared with the @ref
         *         GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *         "clear_complete" option of @ref
         *         GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *         "GPUdb::showProcStatus" and all proc instances using the
         *         cached data have completed. The default value is ''.
         *     <li>@ref gpudb::execute_proc_use_cached_input
         *         "execute_proc_use_cached_input": A comma-delimited list of
         *         run IDs (as returned from prior calls to @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc") of running or completed proc instances
         *         from which input data cached using the @ref
         *         gpudb::execute_proc_cache_input "cache_input" option will be
         *         used. Cached input data will not be used for any tables
         *         specified in @ref inputTableNames, but data from all other
         *         tables cached for the specified run IDs will be passed to
         *         the proc. If the same table was cached for multiple
         *         specified run IDs, the cached data from the first run ID
         *         specified in the list that includes that table will be used.
         *         The default value is ''.
         *     <li>@ref gpudb::execute_proc_run_tag "execute_proc_run_tag": A
         *         string that, if not empty, can be used in subsequent calls
         *         to @ref
         *         GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *         "GPUdb::showProcStatus" or @ref
         *         GPUdb::killProc(const KillProcRequest&) const
         *         "GPUdb::killProc" to identify the proc instance. The default
         *         value is ''.
         *     <li>@ref gpudb::execute_proc_max_output_lines
         *         "execute_proc_max_output_lines": The maximum number of lines
         *         of output from stdout and stderr to return via @ref
         *         GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *         "GPUdb::showProcStatus". If the number of lines output
         *         exceeds the maximum, earlier lines are discarded. The
         *         default value is '100'.
         *     <li>@ref gpudb::execute_proc_execute_at_startup
         *         "execute_proc_execute_at_startup": If @ref
         *         gpudb::execute_proc_true "true", an instance of the proc
         *         will run when the database is started instead of running
         *         immediately. The @ref gpudb::ExecuteProcResponse::runId
         *         "runId" can be retrieved using @ref
         *         GPUdb::showProc(const ShowProcRequest&) const
         *         "GPUdb::showProc" and used in @ref
         *         GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         *         "GPUdb::showProcStatus".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::execute_proc_true "execute_proc_true"
         *             <li>@ref gpudb::execute_proc_false "execute_proc_false"
         *         </ul>
         *         The default value is @ref gpudb::execute_proc_false
         *         "execute_proc_false".
         *     <li>@ref gpudb::execute_proc_execute_at_startup_as
         *         "execute_proc_execute_at_startup_as": Sets the alternate
         *         user name to execute this proc instance as when @ref
         *         gpudb::execute_proc_execute_at_startup "execute_at_startup"
         *         is @ref gpudb::execute_proc_true "true". The default value
         *         is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.binParams);
            ::avro::encode(e, v.inputTableNames);
            ::avro::encode(e, v.inputColumnNames);
            ::avro::encode(e, v.outputTableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.params);
                            break;

                        case 2:
                            ::avro::decode(d, v.binParams);
                            break;

                        case 3:
                            ::avro::decode(d, v.inputTableNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.inputColumnNames);
                            break;

                        case 5:
                            ::avro::decode(d, v.outputTableNames);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.binParams);
                ::avro::decode(d, v.inputTableNames);
                ::avro::decode(d, v.inputColumnNames);
                ::avro::decode(d, v.outputTableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::executeProc(const ExecuteProcRequest&) const
     * "GPUdb::executeProc".
     */
    struct ExecuteProcResponse
    {
        /**
         * Constructs an ExecuteProcResponse object with default parameters.
         */
        ExecuteProcResponse() :
            runId(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The run ID of the running proc instance. This may be passed to @ref
         * GPUdb::showProcStatus(const ShowProcStatusRequest&) const
         * "GPUdb::showProcStatus" to obtain status information, or @ref
         * GPUdb::killProc(const KillProcRequest&) const "GPUdb::killProc" to
         * kill the proc instance.
         */
        std::string runId;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcResponse& v)
        {
            ::avro::encode(e, v.runId);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runId);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runId);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __EXECUTE_PROC_H__
