/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DROP_CREDENTIAL_H__
#define __DROP_CREDENTIAL_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::dropCredential(const DropCredentialRequest&) const
     * "GPUdb::dropCredential".
     *
     * Drop an existing <a href="../../../concepts/credentials/"
     * target="_top">credential</a>.
     */
    struct DropCredentialRequest
    {
        /**
         * Constructs a DropCredentialRequest object with default parameters.
         */
        DropCredentialRequest() :
            credentialName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DropCredentialRequest object with the specified
         * parameters.
         *
         * @param[in] credentialName_  Name of the credential to be dropped.
         *                             Must be an existing credential.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        DropCredentialRequest(const std::string& credentialName_, const std::map<std::string, std::string>& options_):
            credentialName( credentialName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the credential to be dropped. Must be an existing
         * credential.
         */
        std::string credentialName;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropCredentialRequest>
    {
        static void encode(Encoder& e, const gpudb::DropCredentialRequest& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DropCredentialRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::dropCredential(const DropCredentialRequest&) const
     * "GPUdb::dropCredential".
     */
    struct DropCredentialResponse
    {
        /**
         * Constructs a DropCredentialResponse object with default parameters.
         */
        DropCredentialResponse() :
            credentialName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::DropCredentialRequest::credentialName
         * "credentialName".
         */
        std::string credentialName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropCredentialResponse>
    {
        static void encode(Encoder& e, const gpudb::DropCredentialResponse& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DropCredentialResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __DROP_CREDENTIAL_H__
