/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_PROJECTION_H__
#define __CREATE_PROJECTION_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createProjection(const CreateProjectionRequest&) const}.
     * <p>
     * Creates a new <a href="../../../concepts/projections/"
     * target="_top">projection</a> of
     * an existing table. A projection represents a subset of the columns
     * (potentially
     * including derived columns) of a table.
     * <p>
     * For projection details and examples, see
     * <a href="../../../concepts/projections/" target="_top">Projections</a>.
     * For limitations, see
     * <a href="../../../concepts/projections/#limitations-and-cautions"
     * target="_top">Projection Limitations and Cautions</a>.
     * <p>
     * <a href="../../../concepts/window/" target="_top">Window functions</a>,
     * which can perform
     * operations like moving averages, are available through this endpoint as
     * well as
     * {@link
     * #getRecordsByColumnRaw(const GetRecordsByColumnRequest&) const}.
     * <p>
     * A projection can be created with a different
     * <a href="../../../concepts/tables/#shard-keys" target="_top">shard
     * key</a> than the source table.
     * By specifying @a shard_key, the projection will be sharded
     * according to the specified columns, regardless of how the source table
     * is
     * sharded.  The source table can even be unsharded or replicated.
     * <p>
     * If @a tableName is empty, selection is performed against a single-row
     * virtual table.  This can be useful in executing temporal
     * (<a href="../../../concepts/expressions/#date-time-functions"
     * target="_top">NOW()</a>), identity
     * (<a href="../../../concepts/expressions/#user-security-functions"
     * target="_top">USER()</a>), or
     * constant-based functions
     * (<a href="../../../concepts/expressions/#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     */
    struct CreateProjectionRequest
    {

        /**
         * Constructs a CreateProjectionRequest object with default parameter
         * values.
         */
        CreateProjectionRequest() :
            tableName(std::string()),
            projectionName(std::string()),
            columnNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateProjectionRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the existing table on which the
         *                        projection is to be applied, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.  An
         *                        empty table name creates a projection from a
         *                        single-row virtual table, where columns
         *                        specified should be constants or constant
         *                        expressions.
         * @param[in] projectionName_  Name of the projection to be created, in
         *                             [schema_name.]table_name format, using
         *                             standard <a
         *                             href="../../../concepts/tables/#table-name-resolution"
         *                             target="_top">name resolution rules</a>
         *                             and meeting <a
         *                             href="../../../concepts/tables/#table-naming-criteria"
         *                             target="_top">table naming criteria</a>.
         * @param[in] columnNames_  List of columns from @a tableName to be
         *                          included in the projection. Can include
         *                          derived columns. Can be specified as
         *                          aliased via the syntax 'column_name as
         *                          alias'.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_projection_create_temp_table: If
         *                      @a true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a projectionName. If @a persist is @a
         *                      false (or unspecified), then this is always
         *                      allowed even if the caller does not have
         *                      permission to create tables. The generated name
         *                      is returned in @a qualified_projection_name.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_false.
         *                              <li>
         *                      gpudb::create_projection_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema for the projection as part of @a
         *                      projectionName and use /create/schema to create
         *                      the schema if non-existent]  Name of a schema
         *                      for the projection. If the schema is
         *                      non-existent, it will be automatically created.
         *                      The default value is ''.
         *                              <li>
         *                      gpudb::create_projection_expression: An
         *                      optional filter <a
         *                      href="../../../concepts/expressions/"
         *                      target="_top">expression</a> to be applied to
         *                      the source table prior to the projection.  The
         *                      default value is ''.
         *                              <li>
         *                      gpudb::create_projection_is_replicated: If @a
         *                      true then the projection will be replicated
         *                      even if the source table is not.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_false.
         *                              <li> gpudb::create_projection_offset:
         *                      The number of initial results to skip (this can
         *                      be useful for paging through the results).  The
         *                      default value is '0'.
         *                              <li> gpudb::create_projection_limit:
         *                      The number of records to keep.  The default
         *                      value is '-9999'.
         *                              <li> gpudb::create_projection_order_by:
         *                      Comma-separated list of the columns to be
         *                      sorted by; e.g. 'timestamp asc, x desc'.  The
         *                      columns specified must be present in @a
         *                      columnNames.  If any alias is given for any
         *                      column name, the alias must be used, rather
         *                      than the original column name.  The default
         *                      value is ''.
         *                              <li>
         *                      gpudb::create_projection_chunk_size: Indicates
         *                      the number of records per chunk to be used for
         *                      this projection.
         *                              <li>
         *                      gpudb::create_projection_create_indexes:
         *                      Comma-separated list of columns on which to
         *                      create indexes on the projection.  The columns
         *                      specified must be present in @a columnNames.
         *                      If any alias is given for any column name, the
         *                      alias must be used, rather than the original
         *                      column name.
         *                              <li> gpudb::create_projection_ttl: Sets
         *                      the <a href="../../../concepts/ttl/"
         *                      target="_top">TTL</a> of the projection
         *                      specified in @a projectionName.
         *                              <li>
         *                      gpudb::create_projection_shard_key:
         *                      Comma-separated list of the columns to be
         *                      sharded on; e.g. 'column1, column2'.  The
         *                      columns specified must be present in @a
         *                      columnNames.  If any alias is given for any
         *                      column name, the alias must be used, rather
         *                      than the original column name.  The default
         *                      value is ''.
         *                              <li> gpudb::create_projection_persist:
         *                      If @a true, then the projection specified in @a
         *                      projectionName will be persisted and will not
         *                      expire unless a @a ttl is specified.   If @a
         *                      false, then the projection will be an in-memory
         *                      table and will expire unless a @a ttl is
         *                      specified otherwise.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_false.
         *                              <li>
         *                      gpudb::create_projection_preserve_dict_encoding:
         *                      If @a true, then columns that were dict encoded
         *                      in the source table will be dict encoded in the
         *                      projection.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_true.
         *                              <li>
         *                      gpudb::create_projection_retain_partitions:
         *                      Determines whether the created projection will
         *                      retain the partitioning scheme from the source
         *                      table.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_false.
         *                              <li>
         *                      gpudb::create_projection_partition_type: <a
         *                      href="../../../concepts/tables/#partitioning"
         *                      target="_top">Partitioning</a> scheme to use.
         *                      <ul>
         *                              <li> gpudb::create_projection_RANGE:
         *                      Use <a
         *                      href="../../../concepts/tables/#partitioning-by-range"
         *                      target="_top">range partitioning</a>.
         *                              <li> gpudb::create_projection_INTERVAL:
         *                      Use <a
         *                      href="../../../concepts/tables/#partitioning-by-interval"
         *                      target="_top">interval partitioning</a>.
         *                              <li> gpudb::create_projection_LIST: Use
         *                      <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitioning</a>.
         *                              <li> gpudb::create_projection_HASH: Use
         *                      <a
         *                      href="../../../concepts/tables/#partitioning-by-hash"
         *                      target="_top">hash partitioning</a>.
         *                              <li> gpudb::create_projection_SERIES:
         *                      Use <a
         *                      href="../../../concepts/tables/#partitioning-by-series"
         *                      target="_top">series partitioning</a>.
         *                      </ul>
         *                              <li>
         *                      gpudb::create_projection_partition_keys:
         *                      Comma-separated list of partition keys, which
         *                      are the columns or column expressions by which
         *                      records will be assigned to partitions defined
         *                      by @a partition_definitions.
         *                              <li>
         *                      gpudb::create_projection_partition_definitions:
         *                      Comma-separated list of partition definitions,
         *                      whose format depends on the choice of @a
         *                      partition_type.  See <a
         *                      href="../../../concepts/tables/#partitioning-by-range"
         *                      target="_top">range partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-interval"
         *                      target="_top">interval partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-hash"
         *                      target="_top">hash partitioning</a>, or <a
         *                      href="../../../concepts/tables/#partitioning-by-series"
         *                      target="_top">series partitioning</a> for
         *                      example formats.
         *                              <li>
         *                      gpudb::create_projection_is_automatic_partition:
         *                      If @a true, a new partition will be created for
         *                      values which don't fall into an existing
         *                      partition.  Currently only supported for <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitions</a>.
         *                      <ul>
         *                              <li> gpudb::create_projection_true
         *                              <li> gpudb::create_projection_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_projection_false.
         *                              <li> gpudb::create_projection_view_id:
         *                      ID of view of which this projection is a
         *                      member.  The default value is ''.
         *                      </ul>
         * 
         */
        CreateProjectionRequest(const std::string& tableName_, const std::string& projectionName_, const std::vector<std::string>& columnNames_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            projectionName( projectionName_ ),
            columnNames( columnNames_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string projectionName;
        std::vector<std::string> columnNames;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProjectionRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateProjectionRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.projectionName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateProjectionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.projectionName);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.projectionName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createProjection(const CreateProjectionRequest&) const}.
     * <p>
     * Creates a new <a href="../../../concepts/projections/"
     * target="_top">projection</a> of
     * an existing table. A projection represents a subset of the columns
     * (potentially
     * including derived columns) of a table.
     * <p>
     * For projection details and examples, see
     * <a href="../../../concepts/projections/" target="_top">Projections</a>.
     * For limitations, see
     * <a href="../../../concepts/projections/#limitations-and-cautions"
     * target="_top">Projection Limitations and Cautions</a>.
     * <p>
     * <a href="../../../concepts/window/" target="_top">Window functions</a>,
     * which can perform
     * operations like moving averages, are available through this endpoint as
     * well as
     * {@link
     * #getRecordsByColumnRaw(const GetRecordsByColumnRequest&) const}.
     * <p>
     * A projection can be created with a different
     * <a href="../../../concepts/tables/#shard-keys" target="_top">shard
     * key</a> than the source table.
     * By specifying @a shard_key, the projection will be sharded
     * according to the specified columns, regardless of how the source table
     * is
     * sharded.  The source table can even be unsharded or replicated.
     * <p>
     * If @a tableName is empty, selection is performed against a single-row
     * virtual table.  This can be useful in executing temporal
     * (<a href="../../../concepts/expressions/#date-time-functions"
     * target="_top">NOW()</a>), identity
     * (<a href="../../../concepts/expressions/#user-security-functions"
     * target="_top">USER()</a>), or
     * constant-based functions
     * (<a href="../../../concepts/expressions/#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     */
    struct CreateProjectionResponse
    {

        /**
         * Constructs a CreateProjectionResponse object with default parameter
         * values.
         */
        CreateProjectionResponse() :
            projectionName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string projectionName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProjectionResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateProjectionResponse& v)
        {
            ::avro::encode(e, v.projectionName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateProjectionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.projectionName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.projectionName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
