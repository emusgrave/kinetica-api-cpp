/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_RESOURCE_GROUPS_H__
#define __SHOW_RESOURCE_GROUPS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showResourceGroups(const ShowResourceGroupsRequest&) const
     * "GPUdb::showResourceGroups".
     *
     * Requests resource group properties.
     * Returns detailed information about the requested resource groups.
     */
    struct ShowResourceGroupsRequest
    {
        /**
         * Constructs a ShowResourceGroupsRequest object with default
         * parameters.
         */
        ShowResourceGroupsRequest() :
            names(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowResourceGroupsRequest object with the specified
         * parameters.
         *
         * @param[in] names_  List of names of groups to be shown. A single
         *                    entry with an empty string returns all groups.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_resource_groups_show_default_values
         *                              "show_resource_groups_show_default_values":
         *                              If @ref
         *                              gpudb::show_resource_groups_true "true"
         *                              include values of fields that are based
         *                              on the default resource group.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_true
         *                                      "show_resource_groups_true"
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_false
         *                                      "show_resource_groups_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_resource_groups_true
         *                              "show_resource_groups_true".
         *                          <li>@ref
         *                              gpudb::show_resource_groups_show_default_group
         *                              "show_resource_groups_show_default_group":
         *                              If @ref
         *                              gpudb::show_resource_groups_true "true"
         *                              include the default and system resource
         *                              groups in the response. This value
         *                              defaults to false if an explicit list
         *                              of group names is provided, and true
         *                              otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_true
         *                                      "show_resource_groups_true"
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_false
         *                                      "show_resource_groups_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_resource_groups_true
         *                              "show_resource_groups_true".
         *                          <li>@ref
         *                              gpudb::show_resource_groups_show_tier_usage
         *                              "show_resource_groups_show_tier_usage":
         *                              If @ref
         *                              gpudb::show_resource_groups_true "true"
         *                              include the resource group usage on the
         *                              worker ranks in the response.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_true
         *                                      "show_resource_groups_true"
         *                                  <li>@ref
         *                                      gpudb::show_resource_groups_false
         *                                      "show_resource_groups_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_resource_groups_false
         *                              "show_resource_groups_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowResourceGroupsRequest(const std::vector<std::string>& names_, const std::map<std::string, std::string>& options_):
            names( names_ ),
            options( options_ )
        {
        }

        /**
         * List of names of groups to be shown. A single entry with an empty
         * string returns all groups.
         */
        std::vector<std::string> names;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_resource_groups_show_default_values
         *         "show_resource_groups_show_default_values": If @ref
         *         gpudb::show_resource_groups_true "true" include values of
         *         fields that are based on the default resource group.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_resource_groups_true
         *                 "show_resource_groups_true"
         *             <li>@ref gpudb::show_resource_groups_false
         *                 "show_resource_groups_false"
         *         </ul>
         *         The default value is @ref gpudb::show_resource_groups_true
         *         "show_resource_groups_true".
         *     <li>@ref gpudb::show_resource_groups_show_default_group
         *         "show_resource_groups_show_default_group": If @ref
         *         gpudb::show_resource_groups_true "true" include the default
         *         and system resource groups in the response. This value
         *         defaults to false if an explicit list of group names is
         *         provided, and true otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_resource_groups_true
         *                 "show_resource_groups_true"
         *             <li>@ref gpudb::show_resource_groups_false
         *                 "show_resource_groups_false"
         *         </ul>
         *         The default value is @ref gpudb::show_resource_groups_true
         *         "show_resource_groups_true".
         *     <li>@ref gpudb::show_resource_groups_show_tier_usage
         *         "show_resource_groups_show_tier_usage": If @ref
         *         gpudb::show_resource_groups_true "true" include the resource
         *         group usage on the worker ranks in the response.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_resource_groups_true
         *                 "show_resource_groups_true"
         *             <li>@ref gpudb::show_resource_groups_false
         *                 "show_resource_groups_false"
         *         </ul>
         *         The default value is @ref gpudb::show_resource_groups_false
         *         "show_resource_groups_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowResourceGroupsRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowResourceGroupsRequest& v)
        {
            ::avro::encode(e, v.names);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowResourceGroupsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.names);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.names);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showResourceGroups(const ShowResourceGroupsRequest&) const
     * "GPUdb::showResourceGroups".
     */
    struct ShowResourceGroupsResponse
    {
        /**
         * Constructs a ShowResourceGroupsResponse object with default
         * parameters.
         */
        ShowResourceGroupsResponse() :
            groups(std::vector<std::map<std::string, std::string> >()),
            rankUsage(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Map of resource group information.
         */
        std::vector<std::map<std::string, std::string> > groups;

        /**
         * Tier usage across ranks. Layout is:
         * response.rank_usage[rank_number][resource_group_name] = group_usage
         * (as stringified json)
         */
        std::map<std::string, std::string> rankUsage;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowResourceGroupsResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowResourceGroupsResponse& v)
        {
            ::avro::encode(e, v.groups);
            ::avro::encode(e, v.rankUsage);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowResourceGroupsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.groups);
                            break;

                        case 1:
                            ::avro::decode(d, v.rankUsage);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.groups);
                ::avro::decode(d, v.rankUsage);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_RESOURCE_GROUPS_H__
