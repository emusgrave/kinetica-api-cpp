/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_CREDENTIAL_H__
#define __CREATE_CREDENTIAL_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createCredential(const CreateCredentialRequest&) const}.
     * <p>
     * Create a new <a href="../../../concepts/credentials/"
     * target="_top">credential</a>.
     */
    struct CreateCredentialRequest
    {

        /**
         * Constructs a CreateCredentialRequest object with default parameter
         * values.
         */
        CreateCredentialRequest() :
            credentialName(std::string()),
            type(std::string()),
            identity(std::string()),
            secret(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateCredentialRequest object with the specified
         * parameters.
         * 
         * @param[in] credentialName_  Name of the credential to be created.
         *                             Must contain only letters, digits, and
         *                             underscores, and cannot begin with a
         *                             digit. Must not match an existing
         *                             credential name.
         * @param[in] type_  Type of the credential to be created.
         *                   <ul>
         *                           <li>
         *                   gpudb::create_credential_aws_access_key
         *                           <li> gpudb::create_credential_aws_iam_role
         *                           <li> gpudb::create_credential_azure_ad
         *                           <li> gpudb::create_credential_azure_oauth
         *                           <li> gpudb::create_credential_azure_sas
         *                           <li>
         *                   gpudb::create_credential_azure_storage_key
         *                           <li> gpudb::create_credential_docker
         *                           <li>
         *                   gpudb::create_credential_gcs_service_account_id
         *                           <li>
         *                   gpudb::create_credential_gcs_service_account_keys
         *                           <li> gpudb::create_credential_hdfs
         *                           <li> gpudb::create_credential_jdbc
         *                           <li> gpudb::create_credential_kafka
         *                           <li> gpudb::create_credential_confluent
         *                   </ul>
         * @param[in] identity_  User of the credential to be created.
         * @param[in] secret_  Password of the credential to be created.
         * @param[in] options_  Optional parameters.
         * 
         */
        CreateCredentialRequest(const std::string& credentialName_, const std::string& type_, const std::string& identity_, const std::string& secret_, const std::map<std::string, std::string>& options_):
            credentialName( credentialName_ ),
            type( type_ ),
            identity( identity_ ),
            secret( secret_ ),
            options( options_ )
        {
        }

        std::string credentialName;
        std::string type;
        std::string identity;
        std::string secret;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateCredentialRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateCredentialRequest& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.type);
            ::avro::encode(e, v.identity);
            ::avro::encode(e, v.secret);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateCredentialRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.type);
                            break;

                        case 2:
                            ::avro::decode(d, v.identity);
                            break;

                        case 3:
                            ::avro::decode(d, v.secret);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.type);
                ::avro::decode(d, v.identity);
                ::avro::decode(d, v.secret);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createCredential(const CreateCredentialRequest&) const}.
     * <p>
     * Create a new <a href="../../../concepts/credentials/"
     * target="_top">credential</a>.
     */
    struct CreateCredentialResponse
    {

        /**
         * Constructs a CreateCredentialResponse object with default parameter
         * values.
         */
        CreateCredentialResponse() :
            credentialName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string credentialName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateCredentialResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateCredentialResponse& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateCredentialResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
