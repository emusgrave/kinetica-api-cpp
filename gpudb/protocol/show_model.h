/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_MODEL_H__
#define __SHOW_MODEL_H__

namespace gpudb
{
    /** @private */
    struct ShowModelRequest
    {
        ShowModelRequest() :
            modelNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        ShowModelRequest(const std::vector<std::string>& modelNames_, const std::map<std::string, std::string>& options_):
            modelNames( modelNames_ ),
            options( options_ )
        {
        }

        std::vector<std::string> modelNames;
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowModelRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowModelRequest& v)
        {
            ::avro::encode(e, v.modelNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowModelRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.modelNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.modelNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /** @private */
    struct ShowModelResponse
    {
        ShowModelResponse() :
            modelNames(std::vector<std::string>()),
            entityIds(std::vector<int32_t>()),
            inputSchemas(std::vector<std::string>()),
            outputSchemas(std::vector<std::string>()),
            registryList(std::vector<std::string>()),
            containerList(std::vector<std::string>()),
            runFunctionList(std::vector<std::string>()),
            deployments(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> modelNames;
        std::vector<int32_t> entityIds;
        std::vector<std::string> inputSchemas;
        std::vector<std::string> outputSchemas;
        std::vector<std::string> registryList;
        std::vector<std::string> containerList;
        std::vector<std::string> runFunctionList;
        std::vector<std::string> deployments;
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowModelResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowModelResponse& v)
        {
            ::avro::encode(e, v.modelNames);
            ::avro::encode(e, v.entityIds);
            ::avro::encode(e, v.inputSchemas);
            ::avro::encode(e, v.outputSchemas);
            ::avro::encode(e, v.registryList);
            ::avro::encode(e, v.containerList);
            ::avro::encode(e, v.runFunctionList);
            ::avro::encode(e, v.deployments);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowModelResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.modelNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.entityIds);
                            break;

                        case 2:
                            ::avro::decode(d, v.inputSchemas);
                            break;

                        case 3:
                            ::avro::decode(d, v.outputSchemas);
                            break;

                        case 4:
                            ::avro::decode(d, v.registryList);
                            break;

                        case 5:
                            ::avro::decode(d, v.containerList);
                            break;

                        case 6:
                            ::avro::decode(d, v.runFunctionList);
                            break;

                        case 7:
                            ::avro::decode(d, v.deployments);
                            break;

                        case 8:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.modelNames);
                ::avro::decode(d, v.entityIds);
                ::avro::decode(d, v.inputSchemas);
                ::avro::decode(d, v.outputSchemas);
                ::avro::decode(d, v.registryList);
                ::avro::decode(d, v.containerList);
                ::avro::decode(d, v.runFunctionList);
                ::avro::decode(d, v.deployments);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_MODEL_H__
