/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __FILTER_BY_SERIES_H__
#define __FILTER_BY_SERIES_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::filterBySeries(const FilterBySeriesRequest&) const
     * "GPUdb::filterBySeries".
     *
     * Filters objects matching all points of the given track (works only on
     * track type data).  It allows users to specify a particular track to find
     * all other points in the table that fall within specified ranges (spatial
     * and temporal) of all points of the given track. Additionally, the user
     * can specify another track to see if the two intersect (or go close to
     * each other within the specified ranges). The user also has the
     * flexibility of using different metrics for the spatial distance
     * calculation: Euclidean (flat geometry) or Great Circle (spherical
     * geometry to approximate the Earth's surface distances). The filtered
     * points are stored in a newly created result set. The return value of the
     * function is the number of points in the resultant set (view).
     *
     * This operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available.
     */
    struct FilterBySeriesRequest
    {
        /**
         * Constructs a FilterBySeriesRequest object with default parameters.
         */
        FilterBySeriesRequest() :
            tableName(std::string()),
            viewName(std::string()),
            trackId(std::string()),
            targetTrackIds(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a FilterBySeriesRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table on which the filter by
         *                        track operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>. Must
         *                        be a currently existing table with a <a
         *                        href="../../../geospatial/geo_objects/"
         *                        target="_top">track</a> present.
         * @param[in] viewName_  If provided, then this will be the name of the
         *                       view containing the results, in
         *                       [schema_name.]view_name format, using standard
         *                       <a
         *                       href="../../../concepts/tables/#table-name-resolution"
         *                       target="_top">name resolution rules</a> and
         *                       meeting <a
         *                       href="../../../concepts/tables/#table-naming-criteria"
         *                       target="_top">table naming criteria</a>.  Must
         *                       not be an already existing table or view. The
         *                       default value is ''.
         * @param[in] trackId_  The ID of the track which will act as the
         *                      filtering points. Must be an existing track
         *                      within the given table.
         * @param[in] targetTrackIds_  Up to one track ID to intersect with the
         *                             "filter" track. If any provided, it must
         *                             be an valid track ID within the given
         *                             set.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::filter_by_series_create_temp_table
         *                              "filter_by_series_create_temp_table":
         *                              If @ref gpudb::filter_by_series_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @a
         *                              viewName_. This is always allowed even
         *                              if the caller does not have permission
         *                              to create tables. The generated name is
         *                              returned in @ref
         *                              gpudb::filter_by_series_qualified_view_name
         *                              "qualified_view_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::filter_by_series_true
         *                                      "filter_by_series_true"
         *                                  <li>@ref
         *                                      gpudb::filter_by_series_false
         *                                      "filter_by_series_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::filter_by_series_false
         *                              "filter_by_series_false".
         *                          <li>@ref
         *                              gpudb::filter_by_series_collection_name
         *                              "filter_by_series_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the view as part
         *                              of @a viewName_ and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema for the newly created view. If
         *                              the schema is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref
         *                              gpudb::filter_by_series_spatial_radius
         *                              "filter_by_series_spatial_radius": A
         *                              positive number passed as a string
         *                              representing the radius of the search
         *                              area centered around each track point's
         *                              geospatial coordinates. The value is
         *                              interpreted in meters. Required
         *                              parameter. The minimum allowed value is
         *                              '0'.
         *                          <li>@ref
         *                              gpudb::filter_by_series_time_radius
         *                              "filter_by_series_time_radius": A
         *                              positive number passed as a string
         *                              representing the maximum allowable time
         *                              difference between the timestamps of a
         *                              filtered object and the given track's
         *                              points. The value is interpreted in
         *                              seconds. Required parameter. The
         *                              minimum allowed value is '0'.
         *                          <li>@ref
         *                              gpudb::filter_by_series_spatial_distance_metric
         *                              "filter_by_series_spatial_distance_metric":
         *                              A string representing the coordinate
         *                              system to use for the spatial search
         *                              criteria. Acceptable values are
         *                              'euclidean' and 'great_circle'.
         *                              Optional parameter; default is
         *                              'euclidean'.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::filter_by_series_euclidean
         *                                      "filter_by_series_euclidean"
         *                                  <li>@ref
         *                                      gpudb::filter_by_series_great_circle
         *                                      "filter_by_series_great_circle"
         *                              </ul>
         *                      </ul>
         *                      The default value is an empty map.
         */
        FilterBySeriesRequest(const std::string& tableName_, const std::string& viewName_, const std::string& trackId_, const std::vector<std::string>& targetTrackIds_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            viewName( viewName_ ),
            trackId( trackId_ ),
            targetTrackIds( targetTrackIds_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table on which the filter by track operation will be
         * performed, in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>. Must be a currently
         * existing table with a <a href="../../../geospatial/geo_objects/"
         * target="_top">track</a> present.
         */
        std::string tableName;

        /**
         * If provided, then this will be the name of the view containing the
         * results, in [ schema_name.\ ]view_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  Must not be an already
         * existing table or view. The default value is ''.
         */
        std::string viewName;

        /**
         * The ID of the track which will act as the filtering points. Must be
         * an existing track within the given table.
         */
        std::string trackId;

        /**
         * Up to one track ID to intersect with the "filter" track. If any
         * provided, it must be an valid track ID within the given set.
         */
        std::vector<std::string> targetTrackIds;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::filter_by_series_create_temp_table
         *         "filter_by_series_create_temp_table": If @ref
         *         gpudb::filter_by_series_true "true", a unique temporary
         *         table name will be generated in the sys_temp schema and used
         *         in place of @ref viewName. This is always allowed even if
         *         the caller does not have permission to create tables. The
         *         generated name is returned in @ref
         *         gpudb::filter_by_series_qualified_view_name
         *         "qualified_view_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::filter_by_series_true
         *                 "filter_by_series_true"
         *             <li>@ref gpudb::filter_by_series_false
         *                 "filter_by_series_false"
         *         </ul>
         *         The default value is @ref gpudb::filter_by_series_false
         *         "filter_by_series_false".
         *     <li>@ref gpudb::filter_by_series_collection_name
         *         "filter_by_series_collection_name": [DEPRECATED--please
         *         specify the containing schema for the view as part of @ref
         *         viewName and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema for the newly created view. If the schema
         *         is non-existent, it will be automatically created.
         *     <li>@ref gpudb::filter_by_series_spatial_radius
         *         "filter_by_series_spatial_radius": A positive number passed
         *         as a string representing the radius of the search area
         *         centered around each track point's geospatial coordinates.
         *         The value is interpreted in meters. Required parameter. The
         *         minimum allowed value is '0'.
         *     <li>@ref gpudb::filter_by_series_time_radius
         *         "filter_by_series_time_radius": A positive number passed as
         *         a string representing the maximum allowable time difference
         *         between the timestamps of a filtered object and the given
         *         track's points. The value is interpreted in seconds.
         *         Required parameter. The minimum allowed value is '0'.
         *     <li>@ref gpudb::filter_by_series_spatial_distance_metric
         *         "filter_by_series_spatial_distance_metric": A string
         *         representing the coordinate system to use for the spatial
         *         search criteria. Acceptable values are 'euclidean' and
         *         'great_circle'. Optional parameter; default is 'euclidean'.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::filter_by_series_euclidean
         *                 "filter_by_series_euclidean"
         *             <li>@ref gpudb::filter_by_series_great_circle
         *                 "filter_by_series_great_circle"
         *         </ul>
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterBySeriesRequest>
    {
        static void encode(Encoder& e, const gpudb::FilterBySeriesRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.trackId);
            ::avro::encode(e, v.targetTrackIds);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::FilterBySeriesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 2:
                            ::avro::decode(d, v.trackId);
                            break;

                        case 3:
                            ::avro::decode(d, v.targetTrackIds);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.trackId);
                ::avro::decode(d, v.targetTrackIds);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::filterBySeries(const FilterBySeriesRequest&) const
     * "GPUdb::filterBySeries".
     */
    struct FilterBySeriesResponse
    {
        /**
         * Constructs a FilterBySeriesResponse object with default parameters.
         */
        FilterBySeriesResponse() :
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The number of records passing the series filter.
         */
        int64_t count;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::filter_by_series_qualified_view_name
         *         "filter_by_series_qualified_view_name": The fully qualified
         *         name of the view (i.e. including the schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterBySeriesResponse>
    {
        static void encode(Encoder& e, const gpudb::FilterBySeriesResponse& v)
        {
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::FilterBySeriesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __FILTER_BY_SERIES_H__
