/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EVALUATE_MODEL_H__
#define __EVALUATE_MODEL_H__

namespace gpudb
{
    /** @private */
    struct EvaluateModelRequest
    {
        EvaluateModelRequest() :
            modelName(std::string()),
            replicas(int32_t()),
            deploymentMode(std::string()),
            sourceTable(std::string()),
            destinationTable(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        EvaluateModelRequest(const std::string& modelName_, const int32_t replicas_, const std::string& deploymentMode_, const std::string& sourceTable_, const std::string& destinationTable_, const std::map<std::string, std::string>& options_):
            modelName( modelName_ ),
            replicas( replicas_ ),
            deploymentMode( deploymentMode_ ),
            sourceTable( sourceTable_ ),
            destinationTable( destinationTable_ ),
            options( options_ )
        {
        }

        std::string modelName;
        int32_t replicas;
        std::string deploymentMode;
        std::string sourceTable;
        std::string destinationTable;
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::EvaluateModelRequest>
    {
        static void encode(Encoder& e, const gpudb::EvaluateModelRequest& v)
        {
            ::avro::encode(e, v.modelName);
            ::avro::encode(e, v.replicas);
            ::avro::encode(e, v.deploymentMode);
            ::avro::encode(e, v.sourceTable);
            ::avro::encode(e, v.destinationTable);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::EvaluateModelRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.modelName);
                            break;

                        case 1:
                            ::avro::decode(d, v.replicas);
                            break;

                        case 2:
                            ::avro::decode(d, v.deploymentMode);
                            break;

                        case 3:
                            ::avro::decode(d, v.sourceTable);
                            break;

                        case 4:
                            ::avro::decode(d, v.destinationTable);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.modelName);
                ::avro::decode(d, v.replicas);
                ::avro::decode(d, v.deploymentMode);
                ::avro::decode(d, v.sourceTable);
                ::avro::decode(d, v.destinationTable);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /** @private */
    struct EvaluateModelResponse
    {
        EvaluateModelResponse() :
            modelName(std::string()),
            destinationTable(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string modelName;
        std::string destinationTable;
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::EvaluateModelResponse>
    {
        static void encode(Encoder& e, const gpudb::EvaluateModelResponse& v)
        {
            ::avro::encode(e, v.modelName);
            ::avro::encode(e, v.destinationTable);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::EvaluateModelResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.modelName);
                            break;

                        case 1:
                            ::avro::decode(d, v.destinationTable);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.modelName);
                ::avro::decode(d, v.destinationTable);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __EVALUATE_MODEL_H__
