/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __UPDATE_RECORDS_BY_SERIES_H__
#define __UPDATE_RECORDS_BY_SERIES_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::updateRecordsBySeries(const UpdateRecordsBySeriesRequest&) const
     * "GPUdb::updateRecordsBySeries".
     *
     * Updates the view specified by @ref tableName to include full series
     * (track) information from the @ref worldTableName for the series (tracks)
     * present in the @ref viewName.
     */
    struct UpdateRecordsBySeriesRequest
    {
        /**
         * Constructs an UpdateRecordsBySeriesRequest object with default
         * parameters.
         */
        UpdateRecordsBySeriesRequest() :
            tableName(std::string()),
            worldTableName(std::string()),
            viewName(std::string()),
            reserved(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an UpdateRecordsBySeriesRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the view on which the update
         *                        operation will be performed, in
         *                        [schema_name.]view_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing view.
         * @param[in] worldTableName_  Name of the table containing the
         *                             complete series (track) information, in
         *                             [schema_name.]table_name format, using
         *                             standard <a
         *                             href="../../../concepts/tables/#table-name-resolution"
         *                             target="_top">name resolution rules</a>.
         * @param[in] viewName_  Name of the view containing the series
         *                       (tracks) which have to be updated, in
         *                       [schema_name.]view_name format, using standard
         *                       <a
         *                       href="../../../concepts/tables/#table-name-resolution"
         *                       target="_top">name resolution rules</a>. The
         *                       default value is ''.
         * @param[in] reserved_  The default value is an empty vector.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        UpdateRecordsBySeriesRequest(const std::string& tableName_, const std::string& worldTableName_, const std::string& viewName_, const std::vector<std::string>& reserved_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            worldTableName( worldTableName_ ),
            viewName( viewName_ ),
            reserved( reserved_ ),
            options( options_ )
        {
        }

        /**
         * Name of the view on which the update operation will be performed, in
         * [ schema_name.\ ]view_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be an existing view.
         */
        std::string tableName;

        /**
         * Name of the table containing the complete series (track)
         * information, in [ schema_name.\ ]table_name format, using standard
         * <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string worldTableName;

        /**
         * Name of the view containing the series (tracks) which have to be
         * updated, in [ schema_name.\ ]view_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>. The default value is ''.
         */
        std::string viewName;

        /**
         * The default value is an empty vector.
         */
        std::vector<std::string> reserved;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::UpdateRecordsBySeriesRequest>
    {
        static void encode(Encoder& e, const gpudb::UpdateRecordsBySeriesRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.worldTableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.reserved);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::UpdateRecordsBySeriesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.worldTableName);
                            break;

                        case 2:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 3:
                            ::avro::decode(d, v.reserved);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.worldTableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.reserved);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::updateRecordsBySeries(const UpdateRecordsBySeriesRequest&) const
     * "GPUdb::updateRecordsBySeries".
     */
    struct UpdateRecordsBySeriesResponse
    {
        /**
         * Constructs an UpdateRecordsBySeriesResponse object with default
         * parameters.
         */
        UpdateRecordsBySeriesResponse() :
            count(int32_t()),
            info(std::map<std::string, std::string>())
        {
        }

        int32_t count;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::UpdateRecordsBySeriesResponse>
    {
        static void encode(Encoder& e, const gpudb::UpdateRecordsBySeriesResponse& v)
        {
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::UpdateRecordsBySeriesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __UPDATE_RECORDS_BY_SERIES_H__
