/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __RESERVE_RESOURCE_H__
#define __RESERVE_RESOURCE_H__

namespace gpudb
{
    /** @private */
    struct ReserveResourceRequest
    {
        ReserveResourceRequest() :
            component(std::string()),
            name(std::string()),
            action(std::string()),
            bytesRequested(int64_t()),
            ownerId(int64_t()),
            options(std::map<std::string, std::string>())
        {
        }

        ReserveResourceRequest(const std::string& component_, const std::string& name_, const std::string& action_, const int64_t bytesRequested_, const int64_t ownerId_, const std::map<std::string, std::string>& options_):
            component( component_ ),
            name( name_ ),
            action( action_ ),
            bytesRequested( bytesRequested_ ),
            ownerId( ownerId_ ),
            options( options_ )
        {
        }

        std::string component;
        std::string name;
        std::string action;
        int64_t bytesRequested;
        int64_t ownerId;
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ReserveResourceRequest>
    {
        static void encode(Encoder& e, const gpudb::ReserveResourceRequest& v)
        {
            ::avro::encode(e, v.component);
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.bytesRequested);
            ::avro::encode(e, v.ownerId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ReserveResourceRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.component);
                            break;

                        case 1:
                            ::avro::decode(d, v.name);
                            break;

                        case 2:
                            ::avro::decode(d, v.action);
                            break;

                        case 3:
                            ::avro::decode(d, v.bytesRequested);
                            break;

                        case 4:
                            ::avro::decode(d, v.ownerId);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.component);
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.bytesRequested);
                ::avro::decode(d, v.ownerId);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /** @private */
    struct ReserveResourceResponse
    {
        ReserveResourceResponse() :
            component(std::string()),
            name(std::string()),
            reservation(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string component;
        std::string name;
        int64_t reservation;
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ReserveResourceResponse>
    {
        static void encode(Encoder& e, const gpudb::ReserveResourceResponse& v)
        {
            ::avro::encode(e, v.component);
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.reservation);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ReserveResourceResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.component);
                            break;

                        case 1:
                            ::avro::decode(d, v.name);
                            break;

                        case 2:
                            ::avro::decode(d, v.reservation);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.component);
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.reservation);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __RESERVE_RESOURCE_H__
