/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_MIN_MAX_GEOMETRY_H__
#define __AGGREGATE_MIN_MAX_GEOMETRY_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::aggregateMinMaxGeometry(const AggregateMinMaxGeometryRequest&) const
     * "GPUdb::aggregateMinMaxGeometry".
     *
     * Calculates and returns the minimum and maximum x- and y-coordinates of a
     * particular geospatial geometry column in a table.
     */
    struct AggregateMinMaxGeometryRequest
    {
        /**
         * Constructs an AggregateMinMaxGeometryRequest object with default
         * parameters.
         */
        AggregateMinMaxGeometryRequest() :
            tableName(std::string()),
            columnName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateMinMaxGeometryRequest object with the
         * specified parameters.
         *
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing table, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnName_  Name of a geospatial geometry column on
         *                         which the min-max will be calculated.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        AggregateMinMaxGeometryRequest(const std::string& tableName_, const std::string& columnName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table on which the operation will be performed. Must be
         * an existing table, in [ schema_name.\ ]table_name format, using
         * standard <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * Name of a geospatial geometry column on which the min-max will be
         * calculated.
         */
        std::string columnName;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateMinMaxGeometryRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateMinMaxGeometryRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateMinMaxGeometryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateMinMaxGeometry(const AggregateMinMaxGeometryRequest&) const
     * "GPUdb::aggregateMinMaxGeometry".
     */
    struct AggregateMinMaxGeometryResponse
    {
        /**
         * Constructs an AggregateMinMaxGeometryResponse object with default
         * parameters.
         */
        AggregateMinMaxGeometryResponse() :
            minX(double()),
            maxX(double()),
            minY(double()),
            maxY(double()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Minimum x-coordinate value of the @ref
         * gpudb::AggregateMinMaxGeometryRequest::columnName "columnName".
         */
        double minX;

        /**
         * Maximum x-coordinate value of the @ref
         * gpudb::AggregateMinMaxGeometryRequest::columnName "columnName".
         */
        double maxX;

        /**
         * Minimum y-coordinate value of the @ref
         * gpudb::AggregateMinMaxGeometryRequest::columnName "columnName".
         */
        double minY;

        /**
         * Maximum y-coordinate value of the @ref
         * gpudb::AggregateMinMaxGeometryRequest::columnName "columnName".
         */
        double maxY;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateMinMaxGeometryResponse>
    {
        static void encode(Encoder& e, const gpudb::AggregateMinMaxGeometryResponse& v)
        {
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AggregateMinMaxGeometryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.minX);
                            break;

                        case 1:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 2:
                            ::avro::decode(d, v.minY);
                            break;

                        case 3:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __AGGREGATE_MIN_MAX_GEOMETRY_H__
