/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_CREDENTIAL_H__
#define __ALTER_CREDENTIAL_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterCredential(const AlterCredentialRequest&) const}.
     * <p>
     * Alter the properties of an existing <a
     * href="../../../concepts/credentials/" target="_top">credential</a>.
     */
    struct AlterCredentialRequest
    {

        /**
         * Constructs an AlterCredentialRequest object with default parameter
         * values.
         */
        AlterCredentialRequest() :
            credentialName(std::string()),
            credentialUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterCredentialRequest object with the specified
         * parameters.
         * 
         * @param[in] credentialName_  Name of the credential to be altered.
         *                             Must be an existing credential.
         * @param[in] credentialUpdatesMap_  Map containing the properties of
         *                                   the credential to be updated.
         *                                   Error if empty.
         *                                   <ul>
         *                                           <li>
         *                                   gpudb::alter_credential_type: New
         *                                   type for the credential.
         *                                   <ul>
         *                                           <li>
         *                                   gpudb::alter_credential_aws_access_key
         *                                           <li>
         *                                   gpudb::alter_credential_aws_iam_role
         *                                           <li>
         *                                   gpudb::alter_credential_azure_ad
         *                                           <li>
         *                                   gpudb::alter_credential_azure_oauth
         *                                           <li>
         *                                   gpudb::alter_credential_azure_sas
         *                                           <li>
         *                                   gpudb::alter_credential_azure_storage_key
         *                                           <li>
         *                                   gpudb::alter_credential_docker
         *                                           <li>
         *                                   gpudb::alter_credential_hdfs
         *                                           <li>
         *                                   gpudb::alter_credential_kafka
         *                                           <li>
         *                                   gpudb::alter_credential_gcs_service_account_id
         *                                           <li>
         *                                   gpudb::alter_credential_gcs_service_account_keys
         *                                   </ul>
         *                                           <li>
         *                                   gpudb::alter_credential_identity:
         *                                   New user for the credential
         *                                           <li>
         *                                   gpudb::alter_credential_secret:
         *                                   New password for the credential
         *                                           <li>
         *                                   gpudb::alter_credential_schema_name:
         *                                   Updates the schema name.  If @a
         *                                   schema_name
         *                                   doesn't exist, an error will be
         *                                   thrown. If @a schema_name is
         *                                   empty, then the user's
         *                                   default schema will be used.
         *                                   </ul>
         * @param[in] options_  Optional parameters.
         * 
         */
        AlterCredentialRequest(const std::string& credentialName_, const std::map<std::string, std::string>& credentialUpdatesMap_, const std::map<std::string, std::string>& options_):
            credentialName( credentialName_ ),
            credentialUpdatesMap( credentialUpdatesMap_ ),
            options( options_ )
        {
        }

        std::string credentialName;
        std::map<std::string, std::string> credentialUpdatesMap;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterCredentialRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterCredentialRequest& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.credentialUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterCredentialRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.credentialUpdatesMap);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.credentialUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterCredential(const AlterCredentialRequest&) const}.
     * <p>
     * Alter the properties of an existing <a
     * href="../../../concepts/credentials/" target="_top">credential</a>.
     */
    struct AlterCredentialResponse
    {

        /**
         * Constructs an AlterCredentialResponse object with default parameter
         * values.
         */
        AlterCredentialResponse() :
            credentialName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string credentialName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterCredentialResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterCredentialResponse& v)
        {
            ::avro::encode(e, v.credentialName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterCredentialResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.credentialName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.credentialName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
