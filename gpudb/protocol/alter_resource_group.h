/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_RESOURCE_GROUP_H__
#define __ALTER_RESOURCE_GROUP_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterResourceGroup(const AlterResourceGroupRequest&) const
     * "GPUdb::alterResourceGroup".
     *
     * Alters the properties of an exisiting resource group to facilitate
     * resource management.
     */
    struct AlterResourceGroupRequest
    {
        /**
         * Constructs an AlterResourceGroupRequest object with default
         * parameters.
         */
        AlterResourceGroupRequest() :
            name(std::string()),
            tierAttributes(std::map<std::string, std::map<std::string, std::string> >()),
            ranking(std::string()),
            adjoiningResourceGroup(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterResourceGroupRequest object with the specified
         * parameters.
         *
         * @param[in] name_  Name of the group to be altered. Must be an
         *                   existing resource group name or an empty string
         *                   when used inconjunction with the is_default_group
         *                   option.
         * @param[in] tierAttributes_  Optional map containing tier names and
         *                             their respective attribute group limits.
         *                             The only valid attribute limit that can
         *                             be set is max_memory (in bytes) for the
         *                             VRAM & RAM tiers.  For instance, to set
         *                             max VRAM capacity to 1GB and max RAM
         *                             capacity to 10GB, use:
         *                             {'VRAM':{'max_memory':'1000000000'},
         *                             'RAM':{'max_memory':'10000000000'}}.
         *                             <ul>
         *                                 <li>@ref
         *                                     gpudb::alter_resource_group_max_memory
         *                                     "alter_resource_group_max_memory":
         *                                     Maximum amount of memory usable
         *                                     in the given tier at one time
         *                                     for this group.
         *                             </ul>
         *                             The default value is an empty map.
         * @param[in] ranking_  If the resource group ranking is to be updated,
         *                      this indicates the relative ranking among
         *                      existing resource groups where this resource
         *                      group will be moved; leave blank if not
         *                      changing the ranking.  When using @ref
         *                      gpudb::alter_resource_group_before "before" or
         *                      @ref gpudb::alter_resource_group_after "after",
         *                      specify which resource group this one will be
         *                      inserted before or after in @a
         *                      adjoiningResourceGroup_.
         *                      Supported values:
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::alter_resource_group_empty_string
         *                              "alter_resource_group_empty_string"
         *                          <li>@ref gpudb::alter_resource_group_first
         *                              "alter_resource_group_first"
         *                          <li>@ref gpudb::alter_resource_group_last
         *                              "alter_resource_group_last"
         *                          <li>@ref gpudb::alter_resource_group_before
         *                              "alter_resource_group_before"
         *                          <li>@ref gpudb::alter_resource_group_after
         *                              "alter_resource_group_after"
         *                      </ul>
         *                      The default value is @ref
         *                      gpudb::alter_resource_group_empty_string
         *                      "alter_resource_group_empty_string".
         * @param[in] adjoiningResourceGroup_  If @a ranking_ is @ref
         *                                     gpudb::alter_resource_group_before
         *                                     "before" or @ref
         *                                     gpudb::alter_resource_group_after
         *                                     "after", this field indicates
         *                                     the resource group before or
         *                                     after which the current group
         *                                     will be placed; otherwise, leave
         *                                     blank. The default value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::alter_resource_group_max_cpu_concurrency
         *                              "alter_resource_group_max_cpu_concurrency":
         *                              Maximum number of simultaneous threads
         *                              that will be used to execute a request
         *                              for this group. The minimum allowed
         *                              value is '4'.
         *                          <li>@ref
         *                              gpudb::alter_resource_group_max_data
         *                              "alter_resource_group_max_data":
         *                              Maximum amount of cumulative ram usage
         *                              regardless of tier status for this
         *                              group. The minimum allowed value is
         *                              '-1'.
         *                          <li>@ref
         *                              gpudb::alter_resource_group_max_scheduling_priority
         *                              "alter_resource_group_max_scheduling_priority":
         *                              Maximum priority of a scheduled task
         *                              for this group. The minimum allowed
         *                              value is '1'. The maximum allowed value
         *                              is '100'.
         *                          <li>@ref
         *                              gpudb::alter_resource_group_max_tier_priority
         *                              "alter_resource_group_max_tier_priority":
         *                              Maximum priority of a tiered object for
         *                              this group. The minimum allowed value
         *                              is '1'. The maximum allowed value is
         *                              '10'.
         *                          <li>@ref
         *                              gpudb::alter_resource_group_is_default_group
         *                              "alter_resource_group_is_default_group":
         *                              If @ref
         *                              gpudb::alter_resource_group_true
         *                              "true", this request applies to the
         *                              global default resource group. It is an
         *                              error for this field to be @ref
         *                              gpudb::alter_resource_group_true "true"
         *                              when the @a name_ field is also
         *                              populated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::alter_resource_group_true
         *                                      "alter_resource_group_true"
         *                                  <li>@ref
         *                                      gpudb::alter_resource_group_false
         *                                      "alter_resource_group_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_resource_group_false
         *                              "alter_resource_group_false".
         *                          <li>@ref
         *                              gpudb::alter_resource_group_persist
         *                              "alter_resource_group_persist": If @ref
         *                              gpudb::alter_resource_group_true "true"
         *                              and a system-level change was
         *                              requested, the system configuration
         *                              will be written to disk upon successful
         *                              application of this request. This will
         *                              commit the changes from this request
         *                              and any additional in-memory
         *                              modifications.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::alter_resource_group_true
         *                                      "alter_resource_group_true"
         *                                  <li>@ref
         *                                      gpudb::alter_resource_group_false
         *                                      "alter_resource_group_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_resource_group_true
         *                              "alter_resource_group_true".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AlterResourceGroupRequest(const std::string& name_, const std::map<std::string, std::map<std::string, std::string> >& tierAttributes_, const std::string& ranking_, const std::string& adjoiningResourceGroup_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            tierAttributes( tierAttributes_ ),
            ranking( ranking_ ),
            adjoiningResourceGroup( adjoiningResourceGroup_ ),
            options( options_ )
        {
        }

        /**
         * Name of the group to be altered. Must be an existing resource group
         * name or an empty string when used inconjunction with the
         * is_default_group option.
         */
        std::string name;

        /**
         * Optional map containing tier names and their respective attribute
         * group limits.  The only valid attribute limit that can be set is
         * max_memory (in bytes) for the VRAM & RAM tiers.
         *
         * For instance, to set max VRAM capacity to 1GB and max RAM capacity
         * to 10GB, use:  {'VRAM':{'max_memory':'1000000000'},
         * 'RAM':{'max_memory':'10000000000'}}.
         * <ul>
         *     <li>@ref gpudb::alter_resource_group_max_memory
         *         "alter_resource_group_max_memory": Maximum amount of memory
         *         usable in the given tier at one time for this group.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::map<std::string, std::string> > tierAttributes;

        /**
         * If the resource group ranking is to be updated, this indicates the
         * relative ranking among existing resource groups where this resource
         * group will be moved; leave blank if not changing the ranking.  When
         * using @ref gpudb::alter_resource_group_before "before" or @ref
         * gpudb::alter_resource_group_after "after", specify which resource
         * group this one will be inserted before or after in @ref
         * adjoiningResourceGroup.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::alter_resource_group_empty_string
         *         "alter_resource_group_empty_string"
         *     <li>@ref gpudb::alter_resource_group_first
         *         "alter_resource_group_first"
         *     <li>@ref gpudb::alter_resource_group_last
         *         "alter_resource_group_last"
         *     <li>@ref gpudb::alter_resource_group_before
         *         "alter_resource_group_before"
         *     <li>@ref gpudb::alter_resource_group_after
         *         "alter_resource_group_after"
         * </ul>
         * The default value is @ref gpudb::alter_resource_group_empty_string
         * "alter_resource_group_empty_string".
         */
        std::string ranking;

        /**
         * If @ref ranking is @ref gpudb::alter_resource_group_before "before"
         * or @ref gpudb::alter_resource_group_after "after", this field
         * indicates the resource group before or after which the current group
         * will be placed; otherwise, leave blank. The default value is ''.
         */
        std::string adjoiningResourceGroup;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::alter_resource_group_max_cpu_concurrency
         *         "alter_resource_group_max_cpu_concurrency": Maximum number
         *         of simultaneous threads that will be used to execute a
         *         request for this group. The minimum allowed value is '4'.
         *     <li>@ref gpudb::alter_resource_group_max_data
         *         "alter_resource_group_max_data": Maximum amount of
         *         cumulative ram usage regardless of tier status for this
         *         group. The minimum allowed value is '-1'.
         *     <li>@ref gpudb::alter_resource_group_max_scheduling_priority
         *         "alter_resource_group_max_scheduling_priority": Maximum
         *         priority of a scheduled task for this group. The minimum
         *         allowed value is '1'. The maximum allowed value is '100'.
         *     <li>@ref gpudb::alter_resource_group_max_tier_priority
         *         "alter_resource_group_max_tier_priority": Maximum priority
         *         of a tiered object for this group. The minimum allowed value
         *         is '1'. The maximum allowed value is '10'.
         *     <li>@ref gpudb::alter_resource_group_is_default_group
         *         "alter_resource_group_is_default_group": If @ref
         *         gpudb::alter_resource_group_true "true", this request
         *         applies to the global default resource group. It is an error
         *         for this field to be @ref gpudb::alter_resource_group_true
         *         "true" when the @ref name field is also populated.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_resource_group_true
         *                 "alter_resource_group_true"
         *             <li>@ref gpudb::alter_resource_group_false
         *                 "alter_resource_group_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_resource_group_false
         *         "alter_resource_group_false".
         *     <li>@ref gpudb::alter_resource_group_persist
         *         "alter_resource_group_persist": If @ref
         *         gpudb::alter_resource_group_true "true" and a system-level
         *         change was requested, the system configuration will be
         *         written to disk upon successful application of this request.
         *         This will commit the changes from this request and any
         *         additional in-memory modifications.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_resource_group_true
         *                 "alter_resource_group_true"
         *             <li>@ref gpudb::alter_resource_group_false
         *                 "alter_resource_group_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_resource_group_true
         *         "alter_resource_group_true".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterResourceGroupRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterResourceGroupRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.tierAttributes);
            ::avro::encode(e, v.ranking);
            ::avro::encode(e, v.adjoiningResourceGroup);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterResourceGroupRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.tierAttributes);
                            break;

                        case 2:
                            ::avro::decode(d, v.ranking);
                            break;

                        case 3:
                            ::avro::decode(d, v.adjoiningResourceGroup);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.tierAttributes);
                ::avro::decode(d, v.ranking);
                ::avro::decode(d, v.adjoiningResourceGroup);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterResourceGroup(const AlterResourceGroupRequest&) const
     * "GPUdb::alterResourceGroup".
     */
    struct AlterResourceGroupResponse
    {
        /**
         * Constructs an AlterResourceGroupResponse object with default
         * parameters.
         */
        AlterResourceGroupResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::AlterResourceGroupRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterResourceGroupResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterResourceGroupResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterResourceGroupResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_RESOURCE_GROUP_H__
