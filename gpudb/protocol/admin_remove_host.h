/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REMOVE_HOST_H__
#define __ADMIN_REMOVE_HOST_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminRemoveHost(const AdminRemoveHostRequest&) const
     * "GPUdb::adminRemoveHost".
     *
     * Removes a host from an existing cluster. If the host to be removed has
     * any ranks running on it, the ranks must be removed using @ref
     * GPUdb::adminRemoveRanks(const AdminRemoveRanksRequest&) const
     * "GPUdb::adminRemoveRanks" or manually switched over to a new host using
     * @ref GPUdb::adminSwitchover(const AdminSwitchoverRequest&) const
     * "GPUdb::adminSwitchover" prior to host removal. If the host to be
     * removed has the graph server or SQL planner running on it, these must be
     * manually switched over to a new host using @ref
     * GPUdb::adminSwitchover(const AdminSwitchoverRequest&) const
     * "GPUdb::adminSwitchover".
     */
    struct AdminRemoveHostRequest
    {
        /**
         * Constructs an AdminRemoveHostRequest object with default parameters.
         */
        AdminRemoveHostRequest() :
            host(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRemoveHostRequest object with the specified
         * parameters.
         *
         * @param[in] host_  Identifies the host this applies to. Can be the
         *                   host address, or formatted as 'hostN' where N is
         *                   the host number as specified in gpudb.conf
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::admin_remove_host_dry_run
         *                              "admin_remove_host_dry_run": If set to
         *                              @ref gpudb::admin_remove_host_true
         *                              "true", only validation checks will be
         *                              performed. No host is removed.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_remove_host_true
         *                                      "admin_remove_host_true"
         *                                  <li>@ref
         *                                      gpudb::admin_remove_host_false
         *                                      "admin_remove_host_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_remove_host_false
         *                              "admin_remove_host_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AdminRemoveHostRequest(const std::string& host_, const std::map<std::string, std::string>& options_):
            host( host_ ),
            options( options_ )
        {
        }

        /**
         * Identifies the host this applies to. Can be the host address, or
         * formatted as 'hostN' where N is the host number as specified in
         * gpudb.conf
         */
        std::string host;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::admin_remove_host_dry_run
         *         "admin_remove_host_dry_run": If set to @ref
         *         gpudb::admin_remove_host_true "true", only validation checks
         *         will be performed. No host is removed.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_remove_host_true
         *                 "admin_remove_host_true"
         *             <li>@ref gpudb::admin_remove_host_false
         *                 "admin_remove_host_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_remove_host_false
         *         "admin_remove_host_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveHostRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveHostRequest& v)
        {
            ::avro::encode(e, v.host);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveHostRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.host);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.host);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminRemoveHost(const AdminRemoveHostRequest&) const
     * "GPUdb::adminRemoveHost".
     */
    struct AdminRemoveHostResponse
    {
        /**
         * Constructs an AdminRemoveHostResponse object with default
         * parameters.
         */
        AdminRemoveHostResponse() :
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveHostResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveHostResponse& v)
        {
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveHostResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_REMOVE_HOST_H__
