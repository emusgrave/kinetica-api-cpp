/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_WAL_H__
#define __ALTER_WAL_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterWal(const AlterWalRequest&) const "GPUdb::alterWal".
     *
     * Alters table wal settings.
     * Returns information about the requested table wal modifications.
     */
    struct AlterWalRequest
    {
        /**
         * Constructs an AlterWalRequest object with default parameters.
         */
        AlterWalRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterWalRequest object with the specified parameters.
         *
         * @param[in] tableNames_  List of tables to modify. An asterisk
         *                         changes the system settings.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::alter_wal_max_segment_size
         *                              "alter_wal_max_segment_size": Maximum
         *                              size of an individual segment file
         *                          <li>@ref gpudb::alter_wal_segment_count
         *                              "alter_wal_segment_count": Approximate
         *                              number of segment files to split the
         *                              wal across. Must be at least two.
         *                          <li>@ref gpudb::alter_wal_sync_policy
         *                              "alter_wal_sync_policy": Maximum size
         *                              of an individual segment file.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_wal_none
         *                                      "alter_wal_none": Disables the
         *                                      wal
         *                                  <li>@ref
         *                                      gpudb::alter_wal_background
         *                                      "alter_wal_background": Wal
         *                                      entries are periodically
         *                                      written instead of immediately
         *                                      after each operation
         *                                  <li>@ref gpudb::alter_wal_flush
         *                                      "alter_wal_flush": Protects
         *                                      entries in the event of a
         *                                      database crash
         *                                  <li>@ref gpudb::alter_wal_fsync
         *                                      "alter_wal_fsync": Protects
         *                                      entries in the event of an OS
         *                                      crash
         *                              </ul>
         *                          <li>@ref gpudb::alter_wal_flush_frequency
         *                              "alter_wal_flush_frequency": Specifies
         *                              how frequently wal entries are written
         *                              with background sync. This is a global
         *                              setting and can only be used with the
         *                              system {options.table_names} specifier
         *                              '*'.
         *                          <li>@ref gpudb::alter_wal_checksum
         *                              "alter_wal_checksum": If @ref
         *                              gpudb::alter_wal_true "true" each entry
         *                              will be checked against a protective
         *                              checksum.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_wal_true
         *                                      "alter_wal_true"
         *                                  <li>@ref gpudb::alter_wal_false
         *                                      "alter_wal_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_wal_true "alter_wal_true".
         *                          <li>@ref
         *                              gpudb::alter_wal_override_non_default
         *                              "alter_wal_override_non_default": If
         *                              @ref gpudb::alter_wal_true "true"
         *                              tables with unique wal settings will be
         *                              overridden when applying a system level
         *                              change.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_wal_true
         *                                      "alter_wal_true"
         *                                  <li>@ref gpudb::alter_wal_false
         *                                      "alter_wal_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_wal_false
         *                              "alter_wal_false".
         *                          <li>@ref
         *                              gpudb::alter_wal_restore_system_settings
         *                              "alter_wal_restore_system_settings": If
         *                              @ref gpudb::alter_wal_true "true"
         *                              tables with unique wal settings will be
         *                              reverted to the current global
         *                              settings. Cannot be used in conjunction
         *                              with any other option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_wal_true
         *                                      "alter_wal_true"
         *                                  <li>@ref gpudb::alter_wal_false
         *                                      "alter_wal_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_wal_false
         *                              "alter_wal_false".
         *                          <li>@ref gpudb::alter_wal_persist
         *                              "alter_wal_persist": If @ref
         *                              gpudb::alter_wal_true "true" and a
         *                              system-level change was requested, the
         *                              system configuration will be written to
         *                              disk upon successful application of
         *                              this request. This will commit the
         *                              changes from this request and any
         *                              additional in-memory modifications.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::alter_wal_true
         *                                      "alter_wal_true"
         *                                  <li>@ref gpudb::alter_wal_false
         *                                      "alter_wal_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::alter_wal_true "alter_wal_true".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AlterWalRequest(const std::vector<std::string>& tableNames_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            options( options_ )
        {
        }

        /**
         * List of tables to modify. An asterisk changes the system settings.
         */
        std::vector<std::string> tableNames;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::alter_wal_max_segment_size
         *         "alter_wal_max_segment_size": Maximum size of an individual
         *         segment file
         *     <li>@ref gpudb::alter_wal_segment_count
         *         "alter_wal_segment_count": Approximate number of segment
         *         files to split the wal across. Must be at least two.
         *     <li>@ref gpudb::alter_wal_sync_policy "alter_wal_sync_policy":
         *         Maximum size of an individual segment file.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_wal_none "alter_wal_none":
         *                 Disables the wal
         *             <li>@ref gpudb::alter_wal_background
         *                 "alter_wal_background": Wal entries are periodically
         *                 written instead of immediately after each operation
         *             <li>@ref gpudb::alter_wal_flush "alter_wal_flush":
         *                 Protects entries in the event of a database crash
         *             <li>@ref gpudb::alter_wal_fsync "alter_wal_fsync":
         *                 Protects entries in the event of an OS crash
         *         </ul>
         *     <li>@ref gpudb::alter_wal_flush_frequency
         *         "alter_wal_flush_frequency": Specifies how frequently wal
         *         entries are written with background sync. This is a global
         *         setting and can only be used with the system
         *         {options.table_names} specifier '*'.
         *     <li>@ref gpudb::alter_wal_checksum "alter_wal_checksum": If @ref
         *         gpudb::alter_wal_true "true" each entry will be checked
         *         against a protective checksum.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_wal_true "alter_wal_true"
         *             <li>@ref gpudb::alter_wal_false "alter_wal_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_wal_true
         *         "alter_wal_true".
         *     <li>@ref gpudb::alter_wal_override_non_default
         *         "alter_wal_override_non_default": If @ref
         *         gpudb::alter_wal_true "true" tables with unique wal settings
         *         will be overridden when applying a system level change.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_wal_true "alter_wal_true"
         *             <li>@ref gpudb::alter_wal_false "alter_wal_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_wal_false
         *         "alter_wal_false".
         *     <li>@ref gpudb::alter_wal_restore_system_settings
         *         "alter_wal_restore_system_settings": If @ref
         *         gpudb::alter_wal_true "true" tables with unique wal settings
         *         will be reverted to the current global settings. Cannot be
         *         used in conjunction with any other option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_wal_true "alter_wal_true"
         *             <li>@ref gpudb::alter_wal_false "alter_wal_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_wal_false
         *         "alter_wal_false".
         *     <li>@ref gpudb::alter_wal_persist "alter_wal_persist": If @ref
         *         gpudb::alter_wal_true "true" and a system-level change was
         *         requested, the system configuration will be written to disk
         *         upon successful application of this request. This will
         *         commit the changes from this request and any additional
         *         in-memory modifications.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::alter_wal_true "alter_wal_true"
         *             <li>@ref gpudb::alter_wal_false "alter_wal_false"
         *         </ul>
         *         The default value is @ref gpudb::alter_wal_true
         *         "alter_wal_true".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterWalRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterWalRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterWalRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterWal(const AlterWalRequest&) const "GPUdb::alterWal".
     */
    struct AlterWalResponse
    {
        /**
         * Constructs an AlterWalResponse object with default parameters.
         */
        AlterWalResponse() :
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterWalResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterWalResponse& v)
        {
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterWalResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_WAL_H__
