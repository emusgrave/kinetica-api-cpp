/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_PROC_H__
#define __SHOW_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showProc(const ShowProcRequest&) const "GPUdb::showProc".
     *
     * Shows information about a proc.
     */
    struct ShowProcRequest
    {
        /**
         * Constructs a ShowProcRequest object with default parameters.
         */
        ShowProcRequest() :
            procName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowProcRequest object with the specified parameters.
         *
         * @param[in] procName_  Name of the proc to show information about. If
         *                       specified, must be the name of a currently
         *                       existing proc. If not specified, information
         *                       about all procs will be returned. The default
         *                       value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::show_proc_include_files
         *                              "show_proc_include_files": If set to
         *                              @ref gpudb::show_proc_true "true", the
         *                              files that make up the proc will be
         *                              returned. If set to @ref
         *                              gpudb::show_proc_false "false", the
         *                              files will not be returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_proc_true
         *                                      "show_proc_true"
         *                                  <li>@ref gpudb::show_proc_false
         *                                      "show_proc_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_proc_false
         *                              "show_proc_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowProcRequest(const std::string& procName_, const std::map<std::string, std::string>& options_):
            procName( procName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the proc to show information about. If specified, must be
         * the name of a currently existing proc. If not specified, information
         * about all procs will be returned. The default value is ''.
         */
        std::string procName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_proc_include_files
         *         "show_proc_include_files": If set to @ref
         *         gpudb::show_proc_true "true", the files that make up the
         *         proc will be returned. If set to @ref gpudb::show_proc_false
         *         "false", the files will not be returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_proc_true "show_proc_true"
         *             <li>@ref gpudb::show_proc_false "show_proc_false"
         *         </ul>
         *         The default value is @ref gpudb::show_proc_false
         *         "show_proc_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showProc(const ShowProcRequest&) const "GPUdb::showProc".
     */
    struct ShowProcResponse
    {
        /**
         * Constructs a ShowProcResponse object with default parameters.
         */
        ShowProcResponse() :
            procNames(std::vector<std::string>()),
            executionModes(std::vector<std::string>()),
            files(std::vector<std::map<std::string, std::vector<uint8_t> > >()),
            commands(std::vector<std::string>()),
            args(std::vector<std::vector<std::string> >()),
            options(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The proc names.
         */
        std::vector<std::string> procNames;

        /**
         * The execution modes of the procs named in @ref procNames.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::show_proc_distributed "show_proc_distributed":
         *         Distributed
         *     <li>@ref gpudb::show_proc_nondistributed
         *         "show_proc_nondistributed": Nondistributed
         * </ul>
         */
        std::vector<std::string> executionModes;

        /**
         * Maps of the files that make up the procs named in @ref procNames.
         */
        std::vector<std::map<std::string, std::vector<uint8_t> > > files;

        /**
         * The commands (excluding arguments) that will be invoked when the
         * procs named in @ref procNames are executed.
         */
        std::vector<std::string> commands;

        /**
         * Arrays of command-line arguments that will be passed to the procs
         * named in @ref procNames when executed.
         */
        std::vector<std::vector<std::string> > args;

        /**
         * The optional parameters for the procs named in @ref procNames.
         */
        std::vector<std::map<std::string, std::string> > options;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowProcResponse& v)
        {
            ::avro::encode(e, v.procNames);
            ::avro::encode(e, v.executionModes);
            ::avro::encode(e, v.files);
            ::avro::encode(e, v.commands);
            ::avro::encode(e, v.args);
            ::avro::encode(e, v.options);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.executionModes);
                            break;

                        case 2:
                            ::avro::decode(d, v.files);
                            break;

                        case 3:
                            ::avro::decode(d, v.commands);
                            break;

                        case 4:
                            ::avro::decode(d, v.args);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procNames);
                ::avro::decode(d, v.executionModes);
                ::avro::decode(d, v.files);
                ::avro::decode(d, v.commands);
                ::avro::decode(d, v.args);
                ::avro::decode(d, v.options);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_PROC_H__
