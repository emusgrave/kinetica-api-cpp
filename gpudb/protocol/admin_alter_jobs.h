/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_ALTER_JOBS_H__
#define __ADMIN_ALTER_JOBS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminAlterJobs(const AdminAlterJobsRequest&) const}.
     * <p>
     * Perform the requested action on a list of one or more job(s). Based
     * on the type of job and the current state of execution, the action may
     * not be
     * successfully executed. The final result of the attempted actions for
     * each
     * specified job is returned in the status array of the response. See
     * <a href="../../../admin/job_manager/" target="_top">Job Manager</a> for
     * more information.
     */
    struct AdminAlterJobsRequest
    {

        /**
         * Constructs an AdminAlterJobsRequest object with default parameter
         * values.
         */
        AdminAlterJobsRequest() :
            jobIds(std::vector<int64_t>()),
            action(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminAlterJobsRequest object with the specified
         * parameters.
         * 
         * @param[in] jobIds_  Jobs to be modified.
         * @param[in] action_  Action to be performed on the jobs specified by
         *                     job_ids.
         *                     <ul>
         *                             <li> gpudb::admin_alter_jobs_cancel
         *                     </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_alter_jobs_job_tag:
         *                      Job tag returned in call to create the job
         *                      </ul>
         * 
         */
        AdminAlterJobsRequest(const std::vector<int64_t>& jobIds_, const std::string& action_, const std::map<std::string, std::string>& options_):
            jobIds( jobIds_ ),
            action( action_ ),
            options( options_ )
        {
        }

        std::vector<int64_t> jobIds;
        std::string action;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAlterJobsRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminAlterJobsRequest& v)
        {
            ::avro::encode(e, v.jobIds);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminAlterJobsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.jobIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.jobIds);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminAlterJobs(const AdminAlterJobsRequest&) const}.
     * <p>
     * Perform the requested action on a list of one or more job(s). Based
     * on the type of job and the current state of execution, the action may
     * not be
     * successfully executed. The final result of the attempted actions for
     * each
     * specified job is returned in the status array of the response. See
     * <a href="../../../admin/job_manager/" target="_top">Job Manager</a> for
     * more information.
     */
    struct AdminAlterJobsResponse
    {

        /**
         * Constructs an AdminAlterJobsResponse object with default parameter
         * values.
         */
        AdminAlterJobsResponse() :
            jobIds(std::vector<int64_t>()),
            action(std::string()),
            status(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<int64_t> jobIds;
        std::string action;
        std::vector<std::string> status;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAlterJobsResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminAlterJobsResponse& v)
        {
            ::avro::encode(e, v.jobIds);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.status);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminAlterJobsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.jobIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.status);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.jobIds);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.status);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
