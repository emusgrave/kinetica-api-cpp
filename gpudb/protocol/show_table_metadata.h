/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TABLE_METADATA_H__
#define __SHOW_TABLE_METADATA_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showTableMetadata(const ShowTableMetadataRequest&) const
     * "GPUdb::showTableMetadata".
     *
     * Retrieves the user provided metadata for the specified tables.
     */
    struct ShowTableMetadataRequest
    {
        /**
         * Constructs a ShowTableMetadataRequest object with default
         * parameters.
         */
        ShowTableMetadataRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTableMetadataRequest object with the specified
         * parameters.
         *
         * @param[in] tableNames_  Names of tables whose metadata will be
         *                         fetched, in [schema_name.]table_name format,
         *                         using standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         *                         All provided tables must exist, or an error
         *                         is returned.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        ShowTableMetadataRequest(const std::vector<std::string>& tableNames_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            options( options_ )
        {
        }

        /**
         * Names of tables whose metadata will be fetched, in [ schema_name.\
         * ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  All provided tables must
         * exist, or an error is returned.
         */
        std::vector<std::string> tableNames;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableMetadataRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTableMetadataRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTableMetadataRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showTableMetadata(const ShowTableMetadataRequest&) const
     * "GPUdb::showTableMetadata".
     */
    struct ShowTableMetadataResponse
    {
        /**
         * Constructs a ShowTableMetadataResponse object with default
         * parameters.
         */
        ShowTableMetadataResponse() :
            tableNames(std::vector<std::string>()),
            metadataMaps(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::ShowTableMetadataRequest::tableNames
         * "tableNames".
         */
        std::vector<std::string> tableNames;

        /**
         * A list of maps which contain the metadata of the tables in the order
         * the tables are listed in @ref
         * gpudb::ShowTableMetadataRequest::tableNames "tableNames". Each map
         * has (metadata attribute name, metadata attribute value) pairs.
         */
        std::vector<std::map<std::string, std::string> > metadataMaps;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableMetadataResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTableMetadataResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.metadataMaps);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowTableMetadataResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.metadataMaps);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.metadataMaps);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_TABLE_METADATA_H__
