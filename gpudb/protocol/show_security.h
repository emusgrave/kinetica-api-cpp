/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SECURITY_H__
#define __SHOW_SECURITY_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showSecurity(const ShowSecurityRequest&) const
     * "GPUdb::showSecurity".
     *
     * Shows security information relating to users and/or roles. If the caller
     * is not a system administrator, only information relating to the caller
     * and their roles is returned.
     */
    struct ShowSecurityRequest
    {
        /**
         * Constructs a ShowSecurityRequest object with default parameters.
         */
        ShowSecurityRequest() :
            names(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSecurityRequest object with the specified
         * parameters.
         *
         * @param[in] names_  A list of names of users and/or roles about which
         *                    security information is requested. If none are
         *                    provided, information about all users and roles
         *                    will be returned.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_security_show_current_user
         *                              "show_security_show_current_user": If
         *                              @ref gpudb::show_security_true "true",
         *                              returns only security information for
         *                              the current user.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_security_true
         *                                      "show_security_true"
         *                                  <li>@ref gpudb::show_security_false
         *                                      "show_security_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_security_false
         *                              "show_security_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowSecurityRequest(const std::vector<std::string>& names_, const std::map<std::string, std::string>& options_):
            names( names_ ),
            options( options_ )
        {
        }

        /**
         * A list of names of users and/or roles about which security
         * information is requested. If none are provided, information about
         * all users and roles will be returned.
         */
        std::vector<std::string> names;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_security_show_current_user
         *         "show_security_show_current_user": If @ref
         *         gpudb::show_security_true "true", returns only security
         *         information for the current user.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_security_true "show_security_true"
         *             <li>@ref gpudb::show_security_false
         *                 "show_security_false"
         *         </ul>
         *         The default value is @ref gpudb::show_security_false
         *         "show_security_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSecurityRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSecurityRequest& v)
        {
            ::avro::encode(e, v.names);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSecurityRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.names);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.names);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showSecurity(const ShowSecurityRequest&) const
     * "GPUdb::showSecurity".
     */
    struct ShowSecurityResponse
    {
        /**
         * Constructs a ShowSecurityResponse object with default parameters.
         */
        ShowSecurityResponse() :
            types(std::map<std::string, std::string>()),
            roles(std::map<std::string, std::vector<std::string> >()),
            permissions(std::map<std::string, std::vector<std::map<std::string, std::string> > >()),
            resourceGroups(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Map of user/role name to the type of that user/role.
         * Valid values are:
         * <ul>
         *     <li>@ref gpudb::show_security_internal_user
         *         "show_security_internal_user": A user whose credentials are
         *         managed by the database system.
         *     <li>@ref gpudb::show_security_external_user
         *         "show_security_external_user": A user whose credentials are
         *         managed by an external LDAP.
         *     <li>@ref gpudb::show_security_role "show_security_role": A role.
         * </ul>
         */
        std::map<std::string, std::string> types;

        /**
         * Map of user/role name to a list of names of roles of which that
         * user/role is a member.
         */
        std::map<std::string, std::vector<std::string> > roles;

        /**
         * Map of user/role name to a list of permissions directly granted to
         * that user/role.
         */
        std::map<std::string, std::vector<std::map<std::string, std::string> > > permissions;

        /**
         * Map of user name to resource group name.
         */
        std::map<std::string, std::string> resourceGroups;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSecurityResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSecurityResponse& v)
        {
            ::avro::encode(e, v.types);
            ::avro::encode(e, v.roles);
            ::avro::encode(e, v.permissions);
            ::avro::encode(e, v.resourceGroups);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowSecurityResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.types);
                            break;

                        case 1:
                            ::avro::decode(d, v.roles);
                            break;

                        case 2:
                            ::avro::decode(d, v.permissions);
                            break;

                        case 3:
                            ::avro::decode(d, v.resourceGroups);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.types);
                ::avro::decode(d, v.roles);
                ::avro::decode(d, v.permissions);
                ::avro::decode(d, v.resourceGroups);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_SECURITY_H__
