/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_UNIQUE_H__
#define __AGGREGATE_UNIQUE_H__

#include "../GenericRecord.hpp"

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::aggregateUnique(const AggregateUniqueRequest&) const
     * "GPUdb::aggregateUnique".
     *
     * Returns all the unique values from a particular column (specified by
     * @ref columnName) of a particular table or view (specified by @ref
     * tableName). If @ref columnName is a numeric column, the values will be
     * in @ref gpudb::RawAggregateUniqueResponse::binaryEncodedResponse
     * "binaryEncodedResponse". Otherwise if @ref columnName is a string
     * column, the values will be in @ref
     * gpudb::RawAggregateUniqueResponse::jsonEncodedResponse
     * "jsonEncodedResponse".  The results can be paged via @ref offset and
     * @ref limit parameters.
     *
     * Columns marked as <a href="../../../concepts/types/#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     *
     * To get the first 10 unique values sorted in descending order @ref
     * options would be:
     * @code
     *
     *     {"limit":"10","sort_order":"descending"}
     *
     * @endcode
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     *
     * If a @ref gpudb::aggregate_unique_result_table "result_table" name is
     * specified in the @ref options, the results are stored in a new table
     * with that name--no results are returned in the response.  Both the table
     * name and resulting column name must adhere to <a
     * href="../../../concepts/tables/#table" target="_top">standard naming
     * conventions</a>; any column expression will need to be aliased.  If the
     * source table's <a href="../../../concepts/tables/#shard-keys"
     * target="_top">shard key</a> is used as the @ref columnName, the result
     * table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available if the value of @ref columnName is an
     * unrestricted-length string.
     */
    struct AggregateUniqueRequest
    {
        /**
         * Constructs an AggregateUniqueRequest object with default parameters.
         */
        AggregateUniqueRequest() :
            tableName(std::string()),
            columnName(std::string()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateUniqueRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of an existing table or view on which
         *                        the operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnName_  Name of the column or an expression
         *                         containing one or more column names on which
         *                         the unique function would be applied.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawAggregateUniqueResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_unique_create_temp_table
         *                              "aggregate_unique_create_temp_table":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_unique_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_unique_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_unique_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_collection_name
         *                              "aggregate_unique_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table". If the schema provided
         *                              is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref gpudb::aggregate_unique_expression
         *                              "aggregate_unique_expression": Optional
         *                              filter expression to apply to the
         *                              table.
         *                          <li>@ref gpudb::aggregate_unique_sort_order
         *                              "aggregate_unique_sort_order": String
         *                              indicating how the returned values
         *                              should be sorted.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_ascending
         *                                      "aggregate_unique_ascending"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_descending
         *                                      "aggregate_unique_descending"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_ascending
         *                              "aggregate_unique_ascending".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table
         *                              "aggregate_unique_result_table": The
         *                              name of the table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>.  If present, no results
         *                              are returned in the response.  Not
         *                              available if @a columnName_ is an
         *                              unrestricted-length string.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_persist
         *                              "aggregate_unique_result_table_persist":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_unique_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_unique_false "false",
         *                              then the result table will be an
         *                              in-memory table and will expire unless
         *                              a @ref gpudb::aggregate_unique_ttl
         *                              "ttl" is specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_force_replicated
         *                              "aggregate_unique_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_generate_pk
         *                              "aggregate_unique_result_table_generate_pk":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true" then set a primary key for the
         *                              result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref gpudb::aggregate_unique_ttl
         *                              "aggregate_unique_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table".
         *                          <li>@ref gpudb::aggregate_unique_chunk_size
         *                              "aggregate_unique_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_chunk_column_max_memory
         *                              "aggregate_unique_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_chunk_max_memory
         *                              "aggregate_unique_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_unique_view_id
         *                              "aggregate_unique_view_id": ID of view
         *                              of which the result table will be a
         *                              member. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateUniqueRequest(const std::string& tableName_, const std::string& columnName_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs an AggregateUniqueRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of an existing table or view on which
         *                        the operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnName_  Name of the column or an expression
         *                         containing one or more column names on which
         *                         the unique function would be applied.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawAggregateUniqueResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] encoding_  Specifies the encoding for returned records.
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::aggregate_unique_binary
         *                               "aggregate_unique_binary": Indicates
         *                               that the returned records should be
         *                               binary encoded.
         *                           <li>@ref gpudb::aggregate_unique_json
         *                               "aggregate_unique_json": Indicates
         *                               that the returned records should be
         *                               json encoded.
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::aggregate_unique_binary
         *                       "aggregate_unique_binary".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_unique_create_temp_table
         *                              "aggregate_unique_create_temp_table":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_unique_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_unique_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_unique_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_collection_name
         *                              "aggregate_unique_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table". If the schema provided
         *                              is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref gpudb::aggregate_unique_expression
         *                              "aggregate_unique_expression": Optional
         *                              filter expression to apply to the
         *                              table.
         *                          <li>@ref gpudb::aggregate_unique_sort_order
         *                              "aggregate_unique_sort_order": String
         *                              indicating how the returned values
         *                              should be sorted.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_ascending
         *                                      "aggregate_unique_ascending"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_descending
         *                                      "aggregate_unique_descending"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_ascending
         *                              "aggregate_unique_ascending".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table
         *                              "aggregate_unique_result_table": The
         *                              name of the table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>.  If present, no results
         *                              are returned in the response.  Not
         *                              available if @a columnName_ is an
         *                              unrestricted-length string.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_persist
         *                              "aggregate_unique_result_table_persist":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_unique_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_unique_false "false",
         *                              then the result table will be an
         *                              in-memory table and will expire unless
         *                              a @ref gpudb::aggregate_unique_ttl
         *                              "ttl" is specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_force_replicated
         *                              "aggregate_unique_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unique_result_table_generate_pk
         *                              "aggregate_unique_result_table_generate_pk":
         *                              If @ref gpudb::aggregate_unique_true
         *                              "true" then set a primary key for the
         *                              result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_true
         *                                      "aggregate_unique_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unique_false
         *                                      "aggregate_unique_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unique_false
         *                              "aggregate_unique_false".
         *                          <li>@ref gpudb::aggregate_unique_ttl
         *                              "aggregate_unique_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table".
         *                          <li>@ref gpudb::aggregate_unique_chunk_size
         *                              "aggregate_unique_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_chunk_column_max_memory
         *                              "aggregate_unique_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unique_chunk_max_memory
         *                              "aggregate_unique_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unique_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_unique_view_id
         *                              "aggregate_unique_view_id": ID of view
         *                              of which the result table will be a
         *                              member. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateUniqueRequest(const std::string& tableName_, const std::string& columnName_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of an existing table or view on which the operation will be
         * performed, in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * Name of the column or an expression containing one or more column
         * names on which the unique function would be applied.
         */
        std::string columnName;

        /**
         * A positive integer indicating the number of initial results to skip
         * (this can be useful for paging through the results). The default
         * value is 0. The minimum allowed value is 0. The maximum allowed
         * value is MAX_INT.
         */
        int64_t offset;

        /**
         * A positive integer indicating the maximum number of results to be
         * returned, or END_OF_SET (-9999) to indicate that the maximum number
         * of results allowed by the server should be returned.  The number of
         * records returned will never exceed the server's own limit, defined
         * by the <a href="../../../config/#config-main-general"
         * target="_top">max_get_records_size</a> parameter in the server
         * configuration. Use @ref
         * gpudb::RawAggregateUniqueResponse::hasMoreRecords "hasMoreRecords"
         * to see if more records exist in the result to be fetched, and @ref
         * offset & @ref limit to request subsequent pages of results. The
         * default value is -9999.
         */
        int64_t limit;

        /**
         * Specifies the encoding for returned records.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::aggregate_unique_binary
         *         "aggregate_unique_binary": Indicates that the returned
         *         records should be binary encoded.
         *     <li>@ref gpudb::aggregate_unique_json "aggregate_unique_json":
         *         Indicates that the returned records should be json encoded.
         * </ul>
         * The default value is @ref gpudb::aggregate_unique_binary
         * "aggregate_unique_binary".
         */
        std::string encoding;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::aggregate_unique_create_temp_table
         *         "aggregate_unique_create_temp_table": If @ref
         *         gpudb::aggregate_unique_true "true", a unique temporary
         *         table name will be generated in the sys_temp schema and used
         *         in place of @ref gpudb::aggregate_unique_result_table
         *         "result_table". If @ref
         *         gpudb::aggregate_unique_result_table_persist
         *         "result_table_persist" is @ref gpudb::aggregate_unique_false
         *         "false" (or unspecified), then this is always allowed even
         *         if the caller does not have permission to create tables. The
         *         generated name is returned in @ref
         *         gpudb::aggregate_unique_qualified_result_table_name
         *         "qualified_result_table_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unique_true
         *                 "aggregate_unique_true"
         *             <li>@ref gpudb::aggregate_unique_false
         *                 "aggregate_unique_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unique_false
         *         "aggregate_unique_false".
         *     <li>@ref gpudb::aggregate_unique_collection_name
         *         "aggregate_unique_collection_name": [DEPRECATED--please
         *         specify the containing schema as part of @ref
         *         gpudb::aggregate_unique_result_table "result_table" and use
         *         @ref GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema which is to contain the table specified in
         *         @ref gpudb::aggregate_unique_result_table "result_table". If
         *         the schema provided is non-existent, it will be
         *         automatically created.
         *     <li>@ref gpudb::aggregate_unique_expression
         *         "aggregate_unique_expression": Optional filter expression to
         *         apply to the table.
         *     <li>@ref gpudb::aggregate_unique_sort_order
         *         "aggregate_unique_sort_order": String indicating how the
         *         returned values should be sorted.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unique_ascending
         *                 "aggregate_unique_ascending"
         *             <li>@ref gpudb::aggregate_unique_descending
         *                 "aggregate_unique_descending"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unique_ascending
         *         "aggregate_unique_ascending".
         *     <li>@ref gpudb::aggregate_unique_result_table
         *         "aggregate_unique_result_table": The name of the table used
         *         to store the results, in [schema_name.]table_name format,
         *         using standard <a
         *         href="../../../concepts/tables/#table-name-resolution"
         *         target="_top">name resolution rules</a> and meeting <a
         *         href="../../../concepts/tables/#table-naming-criteria"
         *         target="_top">table naming criteria</a>.  If present, no
         *         results are returned in the response.  Not available if @ref
         *         columnName is an unrestricted-length string.
         *     <li>@ref gpudb::aggregate_unique_result_table_persist
         *         "aggregate_unique_result_table_persist": If @ref
         *         gpudb::aggregate_unique_true "true", then the result table
         *         specified in @ref gpudb::aggregate_unique_result_table
         *         "result_table" will be persisted and will not expire unless
         *         a @ref gpudb::aggregate_unique_ttl "ttl" is specified.   If
         *         @ref gpudb::aggregate_unique_false "false", then the result
         *         table will be an in-memory table and will expire unless a
         *         @ref gpudb::aggregate_unique_ttl "ttl" is specified
         *         otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unique_true
         *                 "aggregate_unique_true"
         *             <li>@ref gpudb::aggregate_unique_false
         *                 "aggregate_unique_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unique_false
         *         "aggregate_unique_false".
         *     <li>@ref gpudb::aggregate_unique_result_table_force_replicated
         *         "aggregate_unique_result_table_force_replicated": Force the
         *         result table to be replicated (ignores any sharding). Must
         *         be used in combination with the @ref
         *         gpudb::aggregate_unique_result_table "result_table" option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unique_true
         *                 "aggregate_unique_true"
         *             <li>@ref gpudb::aggregate_unique_false
         *                 "aggregate_unique_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unique_false
         *         "aggregate_unique_false".
         *     <li>@ref gpudb::aggregate_unique_result_table_generate_pk
         *         "aggregate_unique_result_table_generate_pk": If @ref
         *         gpudb::aggregate_unique_true "true" then set a primary key
         *         for the result table. Must be used in combination with the
         *         @ref gpudb::aggregate_unique_result_table "result_table"
         *         option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unique_true
         *                 "aggregate_unique_true"
         *             <li>@ref gpudb::aggregate_unique_false
         *                 "aggregate_unique_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unique_false
         *         "aggregate_unique_false".
         *     <li>@ref gpudb::aggregate_unique_ttl "aggregate_unique_ttl":
         *         Sets the <a href="../../../concepts/ttl/"
         *         target="_top">TTL</a> of the table specified in @ref
         *         gpudb::aggregate_unique_result_table "result_table".
         *     <li>@ref gpudb::aggregate_unique_chunk_size
         *         "aggregate_unique_chunk_size": Indicates the number of
         *         records per chunk to be used for the result table. Must be
         *         used in combination with the @ref
         *         gpudb::aggregate_unique_result_table "result_table" option.
         *     <li>@ref gpudb::aggregate_unique_chunk_column_max_memory
         *         "aggregate_unique_chunk_column_max_memory": Indicates the
         *         target maximum data size for each column in a chunk to be
         *         used for the result table. Must be used in combination with
         *         the @ref gpudb::aggregate_unique_result_table "result_table"
         *         option.
         *     <li>@ref gpudb::aggregate_unique_chunk_max_memory
         *         "aggregate_unique_chunk_max_memory": Indicates the target
         *         maximum data size for all columns in a chunk to be used for
         *         the result table. Must be used in combination with the @ref
         *         gpudb::aggregate_unique_result_table "result_table" option.
         *     <li>@ref gpudb::aggregate_unique_view_id
         *         "aggregate_unique_view_id": ID of view of which the result
         *         table will be a member. The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateUniqueRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateUniqueRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateUniqueRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateUniqueRaw(const AggregateUniqueRequest&) const
     * "GPUdb::aggregateUniqueRaw".
     */
    struct RawAggregateUniqueResponse
    {
        /**
         * Constructs a RawAggregateUniqueResponse object with default
         * parameters.
         */
        RawAggregateUniqueResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The same table name as was passed in the parameter list.
         */
        std::string tableName;

        /**
         * Avro schema of @ref binaryEncodedResponse or @ref
         * jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<uint8_t> binaryEncodedResponse;

        /**
         * Avro JSON encoded response.
         */
        std::string jsonEncodedResponse;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_unique_qualified_result_table_name
         *         "aggregate_unique_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateUniqueResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateUniqueResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.hasMoreRecords);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawAggregateUniqueResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 2:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 4:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.hasMoreRecords);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateUnique(const AggregateUniqueRequest&) const
     * "GPUdb::aggregateUnique".
     */
    struct AggregateUniqueResponse
    {
        /**
         * Constructs an AggregateUniqueResponse object with default
         * parameters.
         */
        AggregateUniqueResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>()),
            dataTypePtr((gpudb::Type*)NULL)
        {
        }

        /**
         * The same table name as was passed in the parameter list.
         */
        std::string tableName;

        /**
         * Avro schema of @ref data or @a jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<gpudb::GenericRecord> data;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_unique_qualified_result_table_name
         *         "aggregate_unique_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;

        gpudb_type_ptr_t dataTypePtr;
    };
} // end namespace gpudb

#endif // __AGGREGATE_UNIQUE_H__
