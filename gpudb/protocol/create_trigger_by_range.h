/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TRIGGER_BY_RANGE_H__
#define __CREATE_TRIGGER_BY_RANGE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createTriggerByRange(const CreateTriggerByRangeRequest&) const
     * "GPUdb::createTriggerByRange".
     *
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via @ref
     * GPUdb::insertRecords(const InsertRecordsRequest<TRequest>&) const
     * "GPUdb::insertRecords" with the chosen column_name's value falling
     * within the specified range will trip the trigger. All such records will
     * be queued at the trigger port (by default '9001' but able to be
     * retrieved via @ref
     * GPUdb::showSystemStatus(const ShowSystemStatusRequest&) const
     * "GPUdb::showSystemStatus") for any listening client to collect. Active
     * triggers can be cancelled by using the @ref
     * GPUdb::clearTrigger(const ClearTriggerRequest&) const
     * "GPUdb::clearTrigger" endpoint or by clearing all relevant tables.
     *
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     */
    struct CreateTriggerByRangeRequest
    {
        /**
         * Constructs a CreateTriggerByRangeRequest object with default
         * parameters.
         */
        CreateTriggerByRangeRequest() :
            requestId(std::string()),
            tableNames(std::vector<std::string>()),
            columnName(std::string()),
            min(double()),
            max(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTriggerByRangeRequest object with the specified
         * parameters.
         *
         * @param[in] requestId_  User-created ID for the trigger. The ID can
         *                        be alphanumeric, contain symbols, and must
         *                        contain at least one character.
         * @param[in] tableNames_  Tables on which the trigger will be active,
         *                         each in [schema_name.]table_name format,
         *                         using standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         * @param[in] columnName_  Name of a numeric column_name on which the
         *                         trigger is activated.
         * @param[in] min_  The lower bound (inclusive) for the trigger range.
         * @param[in] max_  The upper bound (inclusive) for the trigger range.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        CreateTriggerByRangeRequest(const std::string& requestId_, const std::vector<std::string>& tableNames_, const std::string& columnName_, const double min_, const double max_, const std::map<std::string, std::string>& options_):
            requestId( requestId_ ),
            tableNames( tableNames_ ),
            columnName( columnName_ ),
            min( min_ ),
            max( max_ ),
            options( options_ )
        {
        }

        /**
         * User-created ID for the trigger. The ID can be alphanumeric, contain
         * symbols, and must contain at least one character.
         */
        std::string requestId;

        /**
         * Tables on which the trigger will be active, each in [ schema_name.\
         * ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::vector<std::string> tableNames;

        /**
         * Name of a numeric column_name on which the trigger is activated.
         */
        std::string columnName;

        /**
         * The lower bound (inclusive) for the trigger range.
         */
        double min;

        /**
         * The upper bound (inclusive) for the trigger range.
         */
        double max;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTriggerByRangeRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTriggerByRangeRequest& v)
        {
            ::avro::encode(e, v.requestId);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.min);
            ::avro::encode(e, v.max);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTriggerByRangeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.requestId);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.min);
                            break;

                        case 4:
                            ::avro::decode(d, v.max);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.requestId);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.min);
                ::avro::decode(d, v.max);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createTriggerByRange(const CreateTriggerByRangeRequest&) const
     * "GPUdb::createTriggerByRange".
     */
    struct CreateTriggerByRangeResponse
    {
        /**
         * Constructs a CreateTriggerByRangeResponse object with default
         * parameters.
         */
        CreateTriggerByRangeResponse() :
            triggerId(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateTriggerByRangeRequest::requestId
         * "requestId".
         */
        std::string triggerId;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTriggerByRangeResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTriggerByRangeResponse& v)
        {
            ::avro::encode(e, v.triggerId);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateTriggerByRangeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.triggerId);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.triggerId);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_TRIGGER_BY_RANGE_H__
