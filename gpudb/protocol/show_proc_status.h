/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_PROC_STATUS_H__
#define __SHOW_PROC_STATUS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showProcStatus(const ShowProcStatusRequest&) const}.
     * <p>
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link
     * #executeProc(const ExecuteProcRequest&) const}) and data segment ID
     * (each invocation of the proc command on a data segment is assigned a
     * data segment ID).
     */
    struct ShowProcStatusRequest
    {

        /**
         * Constructs a ShowProcStatusRequest object with default parameter
         * values.
         */
        ShowProcStatusRequest() :
            runId(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowProcStatusRequest object with the specified
         * parameters.
         * 
         * @param[in] runId_  The run ID of a specific proc instance for which
         *                    the status will be returned. If a proc with a
         *                    matching run ID is not found, the response will
         *                    be empty. If not specified, the statuses of all
         *                    executed proc instances will be returned.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::show_proc_status_clear_complete: If set
         *                      to @a true, if a proc instance has completed
         *                      (either successfully or unsuccessfully) then
         *                      its status will be cleared and no longer
         *                      returned in subsequent calls.
         *                      <ul>
         *                              <li> gpudb::show_proc_status_true
         *                              <li> gpudb::show_proc_status_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::show_proc_status_false.
         *                              <li> gpudb::show_proc_status_run_tag:
         *                      If @a runId is specified, return the status for
         *                      a proc instance that has a matching run ID and
         *                      a matching run tag that was provided to
         *                      /execute/proc. If @a runId is not specified,
         *                      return statuses for all proc instances where a
         *                      matching run tag was provided to /execute/proc.
         *                      The default value is ''.
         *                      </ul>
         * 
         */
        ShowProcStatusRequest(const std::string& runId_, const std::map<std::string, std::string>& options_):
            runId( runId_ ),
            options( options_ )
        {
        }

        std::string runId;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcStatusRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowProcStatusRequest& v)
        {
            ::avro::encode(e, v.runId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowProcStatusRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runId);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showProcStatus(const ShowProcStatusRequest&) const}.
     * <p>
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link
     * #executeProc(const ExecuteProcRequest&) const}) and data segment ID
     * (each invocation of the proc command on a data segment is assigned a
     * data segment ID).
     */
    struct ShowProcStatusResponse
    {

        /**
         * Constructs a ShowProcStatusResponse object with default parameter
         * values.
         */
        ShowProcStatusResponse() :
            procNames(std::map<std::string, std::string>()),
            params(std::map<std::string, std::map<std::string, std::string> >()),
            binParams(std::map<std::string, std::map<std::string, std::vector<uint8_t> > >()),
            inputTableNames(std::map<std::string, std::vector<std::string> >()),
            inputColumnNames(std::map<std::string, std::map<std::string, std::vector<std::string> > >()),
            outputTableNames(std::map<std::string, std::vector<std::string> >()),
            options(std::map<std::string, std::map<std::string, std::string> >()),
            overallStatuses(std::map<std::string, std::string>()),
            statuses(std::map<std::string, std::map<std::string, std::string> >()),
            messages(std::map<std::string, std::map<std::string, std::string> >()),
            results(std::map<std::string, std::map<std::string, std::map<std::string, std::string> > >()),
            binResults(std::map<std::string, std::map<std::string, std::map<std::string, std::vector<uint8_t> > > >()),
            output(std::map<std::string, std::map<std::string, std::map<std::string, std::vector<std::string> > > >()),
            timings(std::map<std::string, std::map<std::string, std::map<std::string, int64_t> > >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::map<std::string, std::string> procNames;
        std::map<std::string, std::map<std::string, std::string> > params;
        std::map<std::string, std::map<std::string, std::vector<uint8_t> > > binParams;
        std::map<std::string, std::vector<std::string> > inputTableNames;
        std::map<std::string, std::map<std::string, std::vector<std::string> > > inputColumnNames;
        std::map<std::string, std::vector<std::string> > outputTableNames;
        std::map<std::string, std::map<std::string, std::string> > options;
        std::map<std::string, std::string> overallStatuses;
        std::map<std::string, std::map<std::string, std::string> > statuses;
        std::map<std::string, std::map<std::string, std::string> > messages;
        std::map<std::string, std::map<std::string, std::map<std::string, std::string> > > results;
        std::map<std::string, std::map<std::string, std::map<std::string, std::vector<uint8_t> > > > binResults;
        std::map<std::string, std::map<std::string, std::map<std::string, std::vector<std::string> > > > output;
        std::map<std::string, std::map<std::string, std::map<std::string, int64_t> > > timings;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcStatusResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowProcStatusResponse& v)
        {
            ::avro::encode(e, v.procNames);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.binParams);
            ::avro::encode(e, v.inputTableNames);
            ::avro::encode(e, v.inputColumnNames);
            ::avro::encode(e, v.outputTableNames);
            ::avro::encode(e, v.options);
            ::avro::encode(e, v.overallStatuses);
            ::avro::encode(e, v.statuses);
            ::avro::encode(e, v.messages);
            ::avro::encode(e, v.results);
            ::avro::encode(e, v.binResults);
            ::avro::encode(e, v.output);
            ::avro::encode(e, v.timings);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowProcStatusResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.params);
                            break;

                        case 2:
                            ::avro::decode(d, v.binParams);
                            break;

                        case 3:
                            ::avro::decode(d, v.inputTableNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.inputColumnNames);
                            break;

                        case 5:
                            ::avro::decode(d, v.outputTableNames);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        case 7:
                            ::avro::decode(d, v.overallStatuses);
                            break;

                        case 8:
                            ::avro::decode(d, v.statuses);
                            break;

                        case 9:
                            ::avro::decode(d, v.messages);
                            break;

                        case 10:
                            ::avro::decode(d, v.results);
                            break;

                        case 11:
                            ::avro::decode(d, v.binResults);
                            break;

                        case 12:
                            ::avro::decode(d, v.output);
                            break;

                        case 13:
                            ::avro::decode(d, v.timings);
                            break;

                        case 14:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procNames);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.binParams);
                ::avro::decode(d, v.inputTableNames);
                ::avro::decode(d, v.inputColumnNames);
                ::avro::decode(d, v.outputTableNames);
                ::avro::decode(d, v.options);
                ::avro::decode(d, v.overallStatuses);
                ::avro::decode(d, v.statuses);
                ::avro::decode(d, v.messages);
                ::avro::decode(d, v.results);
                ::avro::decode(d, v.binResults);
                ::avro::decode(d, v.output);
                ::avro::decode(d, v.timings);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
