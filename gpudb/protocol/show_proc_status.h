/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_PROC_STATUS_H__
#define __SHOW_PROC_STATUS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showProcStatus(const ShowProcStatusRequest&) const
     * "GPUdb::showProcStatus".
     *
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from @ref
     * GPUdb::executeProc(const ExecuteProcRequest&) const
     * "GPUdb::executeProc") and data segment ID (each invocation of the proc
     * command on a data segment is assigned a data segment ID).
     */
    struct ShowProcStatusRequest
    {
        /**
         * Constructs a ShowProcStatusRequest object with default parameters.
         */
        ShowProcStatusRequest() :
            runId(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowProcStatusRequest object with the specified
         * parameters.
         *
         * @param[in] runId_  The run ID of a specific proc instance for which
         *                    the status will be returned. If a proc with a
         *                    matching run ID is not found, the response will
         *                    be empty. If not specified, the statuses of all
         *                    executed proc instances will be returned. The
         *                    default value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_proc_status_clear_complete
         *                              "show_proc_status_clear_complete": If
         *                              set to @ref
         *                              gpudb::show_proc_status_true "true", if
         *                              a proc instance has completed (either
         *                              successfully or unsuccessfully) then
         *                              its status will be cleared and no
         *                              longer returned in subsequent calls.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::show_proc_status_true
         *                                      "show_proc_status_true"
         *                                  <li>@ref
         *                                      gpudb::show_proc_status_false
         *                                      "show_proc_status_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_proc_status_false
         *                              "show_proc_status_false".
         *                          <li>@ref gpudb::show_proc_status_run_tag
         *                              "show_proc_status_run_tag": If @a
         *                              runId_ is specified, return the status
         *                              for a proc instance that has a matching
         *                              run ID and a matching run tag that was
         *                              provided to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc". If @a runId_ is
         *                              not specified, return statuses for all
         *                              proc instances where a matching run tag
         *                              was provided to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc". The default value
         *                              is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowProcStatusRequest(const std::string& runId_, const std::map<std::string, std::string>& options_):
            runId( runId_ ),
            options( options_ )
        {
        }

        /**
         * The run ID of a specific proc instance for which the status will be
         * returned. If a proc with a matching run ID is not found, the
         * response will be empty. If not specified, the statuses of all
         * executed proc instances will be returned. The default value is ''.
         */
        std::string runId;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_proc_status_clear_complete
         *         "show_proc_status_clear_complete": If set to @ref
         *         gpudb::show_proc_status_true "true", if a proc instance has
         *         completed (either successfully or unsuccessfully) then its
         *         status will be cleared and no longer returned in subsequent
         *         calls.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_proc_status_true
         *                 "show_proc_status_true"
         *             <li>@ref gpudb::show_proc_status_false
         *                 "show_proc_status_false"
         *         </ul>
         *         The default value is @ref gpudb::show_proc_status_false
         *         "show_proc_status_false".
         *     <li>@ref gpudb::show_proc_status_run_tag
         *         "show_proc_status_run_tag": If @ref runId is specified,
         *         return the status for a proc instance that has a matching
         *         run ID and a matching run tag that was provided to @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc". If @ref runId is not specified, return
         *         statuses for all proc instances where a matching run tag was
         *         provided to @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc". The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcStatusRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowProcStatusRequest& v)
        {
            ::avro::encode(e, v.runId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowProcStatusRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runId);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showProcStatus(const ShowProcStatusRequest&) const
     * "GPUdb::showProcStatus".
     */
    struct ShowProcStatusResponse
    {
        /**
         * Constructs a ShowProcStatusResponse object with default parameters.
         */
        ShowProcStatusResponse() :
            procNames(std::map<std::string, std::string>()),
            params(std::map<std::string, std::map<std::string, std::string> >()),
            binParams(std::map<std::string, std::map<std::string, std::vector<uint8_t> > >()),
            inputTableNames(std::map<std::string, std::vector<std::string> >()),
            inputColumnNames(std::map<std::string, std::map<std::string, std::vector<std::string> > >()),
            outputTableNames(std::map<std::string, std::vector<std::string> >()),
            options(std::map<std::string, std::map<std::string, std::string> >()),
            overallStatuses(std::map<std::string, std::string>()),
            statuses(std::map<std::string, std::map<std::string, std::string> >()),
            messages(std::map<std::string, std::map<std::string, std::string> >()),
            results(std::map<std::string, std::map<std::string, std::map<std::string, std::string> > >()),
            binResults(std::map<std::string, std::map<std::string, std::map<std::string, std::vector<uint8_t> > > >()),
            output(std::map<std::string, std::map<std::string, std::map<std::string, std::vector<std::string> > > >()),
            timings(std::map<std::string, std::map<std::string, std::map<std::string, int64_t> > >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The proc names corresponding to the returned run IDs.
         */
        std::map<std::string, std::string> procNames;

        /**
         * The string params passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs.
         */
        std::map<std::string, std::map<std::string, std::string> > params;

        /**
         * The binary params passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs.
         */
        std::map<std::string, std::map<std::string, std::vector<uint8_t> > > binParams;

        /**
         * The input table names passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs.
         */
        std::map<std::string, std::vector<std::string> > inputTableNames;

        /**
         * The input column names passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs, supplemented with the
         * column names for input tables not included in the input column name
         * map.
         */
        std::map<std::string, std::map<std::string, std::vector<std::string> > > inputColumnNames;

        /**
         * The output table names passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs.
         */
        std::map<std::string, std::vector<std::string> > outputTableNames;

        /**
         * The optional parameters passed to @ref
         * GPUdb::executeProc(const ExecuteProcRequest&) const
         * "GPUdb::executeProc" for the returned run IDs.
         */
        std::map<std::string, std::map<std::string, std::string> > options;

        /**
         * Overall statuses for the returned run IDs. Note that these are
         * rollups and individual statuses may differ between data segments for
         * the same run ID; see @ref statuses and @ref messages for statuses
         * from individual data segments.
         * Valid values are:
         * <ul>
         *     <li>@ref gpudb::show_proc_status_running
         *         "show_proc_status_running": The proc instance is currently
         *         running.
         *     <li>@ref gpudb::show_proc_status_complete
         *         "show_proc_status_complete": The proc instance completed
         *         with no errors.
         *     <li>@ref gpudb::show_proc_status_killed
         *         "show_proc_status_killed": The proc instance was killed
         *         before completion.
         *     <li>@ref gpudb::show_proc_status_error "show_proc_status_error":
         *         The proc instance failed with an error.
         *     <li>@ref gpudb::show_proc_status_none "show_proc_status_none":
         *         The proc instance does not have a status, i.e. it has not
         *         yet ran.
         * </ul>
         */
        std::map<std::string, std::string> overallStatuses;

        /**
         * Statuses for the returned run IDs, grouped by data segment ID.
         * Valid values are:
         * <ul>
         *     <li>@ref gpudb::show_proc_status_running
         *         "show_proc_status_running": The proc instance is currently
         *         running.
         *     <li>@ref gpudb::show_proc_status_complete
         *         "show_proc_status_complete": The proc instance completed
         *         with no errors.
         *     <li>@ref gpudb::show_proc_status_killed
         *         "show_proc_status_killed": The proc instance was killed
         *         before completion.
         *     <li>@ref gpudb::show_proc_status_error "show_proc_status_error":
         *         The proc instance failed with an error.
         *     <li>@ref gpudb::show_proc_status_none "show_proc_status_none":
         *         The proc instance does not have a status, i.e. it has not
         *         yet ran.
         * </ul>
         */
        std::map<std::string, std::map<std::string, std::string> > statuses;

        /**
         * Messages containing additional status information for the returned
         * run IDs, grouped by data segment ID.
         */
        std::map<std::string, std::map<std::string, std::string> > messages;

        /**
         * String results for the returned run IDs, grouped by data segment ID.
         */
        std::map<std::string, std::map<std::string, std::map<std::string, std::string> > > results;

        /**
         * Binary results for the returned run IDs, grouped by data segment ID.
         */
        std::map<std::string, std::map<std::string, std::map<std::string, std::vector<uint8_t> > > > binResults;

        /**
         * Output lines for the returned run IDs, grouped by data segment ID.
         * <ul>
         *     <li>@ref gpudb::show_proc_status_stdout
         *         "show_proc_status_stdout": Output lines from stdout.
         *     <li>@ref gpudb::show_proc_status_stderr
         *         "show_proc_status_stderr": Output lines from stderr.
         * </ul>
         */
        std::map<std::string, std::map<std::string, std::map<std::string, std::vector<std::string> > > > output;

        /**
         * Timing information for the returned run IDs, grouped by data segment
         * ID.
         */
        std::map<std::string, std::map<std::string, std::map<std::string, int64_t> > > timings;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowProcStatusResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowProcStatusResponse& v)
        {
            ::avro::encode(e, v.procNames);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.binParams);
            ::avro::encode(e, v.inputTableNames);
            ::avro::encode(e, v.inputColumnNames);
            ::avro::encode(e, v.outputTableNames);
            ::avro::encode(e, v.options);
            ::avro::encode(e, v.overallStatuses);
            ::avro::encode(e, v.statuses);
            ::avro::encode(e, v.messages);
            ::avro::encode(e, v.results);
            ::avro::encode(e, v.binResults);
            ::avro::encode(e, v.output);
            ::avro::encode(e, v.timings);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowProcStatusResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.params);
                            break;

                        case 2:
                            ::avro::decode(d, v.binParams);
                            break;

                        case 3:
                            ::avro::decode(d, v.inputTableNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.inputColumnNames);
                            break;

                        case 5:
                            ::avro::decode(d, v.outputTableNames);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        case 7:
                            ::avro::decode(d, v.overallStatuses);
                            break;

                        case 8:
                            ::avro::decode(d, v.statuses);
                            break;

                        case 9:
                            ::avro::decode(d, v.messages);
                            break;

                        case 10:
                            ::avro::decode(d, v.results);
                            break;

                        case 11:
                            ::avro::decode(d, v.binResults);
                            break;

                        case 12:
                            ::avro::decode(d, v.output);
                            break;

                        case 13:
                            ::avro::decode(d, v.timings);
                            break;

                        case 14:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procNames);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.binParams);
                ::avro::decode(d, v.inputTableNames);
                ::avro::decode(d, v.inputColumnNames);
                ::avro::decode(d, v.outputTableNames);
                ::avro::decode(d, v.options);
                ::avro::decode(d, v.overallStatuses);
                ::avro::decode(d, v.statuses);
                ::avro::decode(d, v.messages);
                ::avro::decode(d, v.results);
                ::avro::decode(d, v.binResults);
                ::avro::decode(d, v.output);
                ::avro::decode(d, v.timings);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_PROC_STATUS_H__
