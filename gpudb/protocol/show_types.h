/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TYPES_H__
#define __SHOW_TYPES_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showTypes(const ShowTypesRequest&) const "GPUdb::showTypes".
     *
     * Retrieves information for the specified data type ID or type label. For
     * all data types that match the input criteria, the database returns the
     * type ID, the type schema, the label (if available), and the type's
     * column properties.
     */
    struct ShowTypesRequest
    {
        /**
         * Constructs a ShowTypesRequest object with default parameters.
         */
        ShowTypesRequest() :
            typeId(std::string()),
            label(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTypesRequest object with the specified parameters.
         *
         * @param[in] typeId_  Type Id returned in response to a call to @ref
         *                     GPUdb::createType(const CreateTypeRequest&) const
         *                     "GPUdb::createType".
         * @param[in] label_  Option string that was supplied by user in a call
         *                    to @ref
         *                    GPUdb::createType(const CreateTypeRequest&) const
         *                    "GPUdb::createType".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::show_types_no_join_types
         *                              "show_types_no_join_types": When set to
         *                              'true', no join types will be included.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_types_true
         *                                      "show_types_true"
         *                                  <li>@ref gpudb::show_types_false
         *                                      "show_types_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_types_false
         *                              "show_types_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowTypesRequest(const std::string& typeId_, const std::string& label_, const std::map<std::string, std::string>& options_):
            typeId( typeId_ ),
            label( label_ ),
            options( options_ )
        {
        }

        /**
         * Type Id returned in response to a call to @ref
         * GPUdb::createType(const CreateTypeRequest&) const
         * "GPUdb::createType".
         */
        std::string typeId;

        /**
         * Option string that was supplied by user in a call to @ref
         * GPUdb::createType(const CreateTypeRequest&) const
         * "GPUdb::createType".
         */
        std::string label;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_types_no_join_types
         *         "show_types_no_join_types": When set to 'true', no join
         *         types will be included.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_types_true "show_types_true"
         *             <li>@ref gpudb::show_types_false "show_types_false"
         *         </ul>
         *         The default value is @ref gpudb::show_types_false
         *         "show_types_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTypesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTypesRequest& v)
        {
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTypesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 1:
                            ::avro::decode(d, v.label);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showTypes(const ShowTypesRequest&) const "GPUdb::showTypes".
     */
    struct ShowTypesResponse
    {
        /**
         * Constructs a ShowTypesResponse object with default parameters.
         */
        ShowTypesResponse() :
            typeIds(std::vector<std::string>()),
            typeSchemas(std::vector<std::string>()),
            labels(std::vector<std::string>()),
            properties(std::vector<std::map<std::string, std::vector<std::string> > >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> typeIds;
        std::vector<std::string> typeSchemas;
        std::vector<std::string> labels;
        std::vector<std::map<std::string, std::vector<std::string> > > properties;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTypesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTypesResponse& v)
        {
            ::avro::encode(e, v.typeIds);
            ::avro::encode(e, v.typeSchemas);
            ::avro::encode(e, v.labels);
            ::avro::encode(e, v.properties);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowTypesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeSchemas);
                            break;

                        case 2:
                            ::avro::decode(d, v.labels);
                            break;

                        case 3:
                            ::avro::decode(d, v.properties);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeIds);
                ::avro::decode(d, v.typeSchemas);
                ::avro::decode(d, v.labels);
                ::avro::decode(d, v.properties);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_TYPES_H__
