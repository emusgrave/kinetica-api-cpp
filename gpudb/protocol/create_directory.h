/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_DIRECTORY_H__
#define __CREATE_DIRECTORY_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createDirectory(const CreateDirectoryRequest&) const
     * "GPUdb::createDirectory".
     *
     * Creates a new directory in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. The new directory serves as a location in which
     * the user can upload files using @ref
     * GPUdb::uploadFiles(const UploadFilesRequest&) const
     * "GPUdb::uploadFiles".
     */
    struct CreateDirectoryRequest
    {
        /**
         * Constructs a CreateDirectoryRequest object with default parameters.
         */
        CreateDirectoryRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateDirectoryRequest object with the specified
         * parameters.
         *
         * @param[in] directoryName_  Name of the directory in KiFS to be
         *                            created.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_directory_create_home_directory
         *                              "create_directory_create_home_directory":
         *                              When set, a home directory is created
         *                              for the user name provided in the
         *                              value. The @a directoryName_ must be an
         *                              empty string in this case. The user
         *                              must exist.
         *                          <li>@ref gpudb::create_directory_data_limit
         *                              "create_directory_data_limit": The
         *                              maximum capacity, in bytes, to apply to
         *                              the created directory. Set to -1 to
         *                              indicate no upper limit. If empty, the
         *                              system default limit is applied.
         *                          <li>@ref
         *                              gpudb::create_directory_no_error_if_exists
         *                              "create_directory_no_error_if_exists":
         *                              If @ref gpudb::create_directory_true
         *                              "true", does not return an error if the
         *                              directory already exists.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_directory_true
         *                                      "create_directory_true"
         *                                  <li>@ref
         *                                      gpudb::create_directory_false
         *                                      "create_directory_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_directory_false
         *                              "create_directory_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateDirectoryRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the directory in KiFS to be created.
         */
        std::string directoryName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_directory_create_home_directory
         *         "create_directory_create_home_directory": When set, a home
         *         directory is created for the user name provided in the
         *         value. The @ref directoryName must be an empty string in
         *         this case. The user must exist.
         *     <li>@ref gpudb::create_directory_data_limit
         *         "create_directory_data_limit": The maximum capacity, in
         *         bytes, to apply to the created directory. Set to -1 to
         *         indicate no upper limit. If empty, the system default limit
         *         is applied.
         *     <li>@ref gpudb::create_directory_no_error_if_exists
         *         "create_directory_no_error_if_exists": If @ref
         *         gpudb::create_directory_true "true", does not return an
         *         error if the directory already exists.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_directory_true
         *                 "create_directory_true"
         *             <li>@ref gpudb::create_directory_false
         *                 "create_directory_false"
         *         </ul>
         *         The default value is @ref gpudb::create_directory_false
         *         "create_directory_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDirectoryRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateDirectoryRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateDirectoryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createDirectory(const CreateDirectoryRequest&) const
     * "GPUdb::createDirectory".
     */
    struct CreateDirectoryResponse
    {
        /**
         * Constructs a CreateDirectoryResponse object with default parameters.
         */
        CreateDirectoryResponse() :
            directoryName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateDirectoryRequest::directoryName
         * "directoryName".
         */
        std::string directoryName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDirectoryResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateDirectoryResponse& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateDirectoryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_DIRECTORY_H__
