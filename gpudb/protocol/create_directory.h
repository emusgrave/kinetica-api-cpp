/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_DIRECTORY_H__
#define __CREATE_DIRECTORY_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createDirectory(const CreateDirectoryRequest&) const}.
     * <p>
     * Creates a new directory in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. The new
     * directory serves as a location in which the user can upload files using
     * {@link #uploadFiles(const UploadFilesRequest&) const}.
     */
    struct CreateDirectoryRequest
    {

        /**
         * Constructs a CreateDirectoryRequest object with default parameter
         * values.
         */
        CreateDirectoryRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateDirectoryRequest object with the specified
         * parameters.
         * 
         * @param[in] directoryName_  Name of the directory in KiFS to be
         *                            created.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_directory_create_home_directory:
         *                      When set, a home directory is created for the
         *                      user name provided in the value. The @a
         *                      directoryName must be an empty string in this
         *                      case. The user must exist.
         *                              <li>
         *                      gpudb::create_directory_no_error_if_exists: If
         *                      @a true, does not return an error if the
         *                      directory already exists
         *                      <ul>
         *                              <li> gpudb::create_directory_true
         *                              <li> gpudb::create_directory_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_directory_false.
         *                      </ul>
         * 
         */
        CreateDirectoryRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDirectoryRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateDirectoryRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateDirectoryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createDirectory(const CreateDirectoryRequest&) const}.
     * <p>
     * Creates a new directory in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. The new
     * directory serves as a location in which the user can upload files using
     * {@link #uploadFiles(const UploadFilesRequest&) const}.
     */
    struct CreateDirectoryResponse
    {

        /**
         * Constructs a CreateDirectoryResponse object with default parameter
         * values.
         */
        CreateDirectoryResponse() :
            directoryName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateDirectoryResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateDirectoryResponse& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateDirectoryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
