/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TABLE_H__
#define __CREATE_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createTable(const CreateTableRequest&) const}.
     * <p>
     * Creates a new table. If a new table is being created,
     * the type of the table is given by @a typeId, which must be the ID of
     * a currently registered type (i.e. one created via {@link
     * #createType(const CreateTypeRequest&) const}).
     * <p>
     * A table may optionally be designated to use a
     * <a href="../../../concepts/tables/#replication"
     * target="_top">replicated</a> distribution scheme,
     * or be assigned: <a href="../../../concepts/tables/#foreign-keys"
     * target="_top">foreign keys</a> to
     * other tables, a <a href="../../../concepts/tables/#partitioning"
     * target="_top">partitioning</a>
     * scheme, and/or a <a href="../../../rm/concepts/#tier-strategies"
     * target="_top">tier strategy</a>.
     */
    struct CreateTableRequest
    {

        /**
         * Constructs a CreateTableRequest object with default parameter
         * values.
         */
        CreateTableRequest() :
            tableName(std::string()),
            typeId(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table to be created, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         *                        Error for requests with existing table of the
         *                        same name and type ID may be suppressed by
         *                        using the @a no_error_if_exists option.
         * @param[in] typeId_  ID of a currently registered type. All objects
         *                     added to the newly created table will be of this
         *                     type.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_table_no_error_if_exists: If @a
         *                      true, prevents an error from occurring if the
         *                      table already exists and is of the given type.
         *                      If a table with the same ID but a different
         *                      type exists, it is still an error.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li>
         *                      gpudb::create_table_create_temp_table: If @a
         *                      true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a tableName. If @a is_result_table is
         *                      @a true, then this is always allowed even if
         *                      the caller does not have permission to create
         *                      tables. The generated name is returned in @a
         *                      qualified_table_name.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li>
         *                      gpudb::create_table_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema as part of @a tableName and use
         *                      /create/schema to create the schema if
         *                      non-existent]  Name of a schema which is to
         *                      contain the newly created table. If the schema
         *                      is non-existent, it will be automatically
         *                      created.
         *                              <li> gpudb::create_table_is_collection:
         *                      [DEPRECATED--please use /create/schema to
         *                      create a schema instead]  Indicates whether to
         *                      create a schema instead of a table.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li>
         *                      gpudb::create_table_disallow_homogeneous_tables:
         *                      No longer supported; value will be ignored.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li> gpudb::create_table_is_replicated:
         *                      Affects the <a
         *                      href="../../../concepts/tables/#distribution"
         *                      target="_top">distribution scheme</a> for the
         *                      table's data.  If @a true and the given type
         *                      has no explicit <a
         *                      href="../../../concepts/tables/#shard-key"
         *                      target="_top">shard key</a> defined, the table
         *                      will be <a
         *                      href="../../../concepts/tables/#replication"
         *                      target="_top">replicated</a>.  If @a false, the
         *                      table will be <a
         *                      href="../../../concepts/tables/#sharding"
         *                      target="_top">sharded</a> according to the
         *                      shard key specified in the given @a typeId, or
         *                      <a
         *                      href="../../../concepts/tables/#random-sharding"
         *                      target="_top">randomly sharded</a>, if no shard
         *                      key is specified.  Note that a type containing
         *                      a shard key cannot be used to create a
         *                      replicated table.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li> gpudb::create_table_foreign_keys:
         *                      Semicolon-separated list of <a
         *                      href="../../../concepts/tables/#foreign-keys"
         *                      target="_top">foreign keys</a>, of the format
         *                      '(source_column_name [, ...]) references
         *                      target_table_name(primary_key_column_name [,
         *                      ...]) [as foreign_key_name]'.
         *                              <li>
         *                      gpudb::create_table_foreign_shard_key: Foreign
         *                      shard key of the format 'source_column
         *                      references shard_by_column from
         *                      target_table(primary_key_column)'.
         *                              <li>
         *                      gpudb::create_table_partition_type: <a
         *                      href="../../../concepts/tables/#partitioning"
         *                      target="_top">Partitioning</a> scheme to use.
         *                      <ul>
         *                              <li> gpudb::create_table_RANGE: Use <a
         *                      href="../../../concepts/tables/#partitioning-by-range"
         *                      target="_top">range partitioning</a>.
         *                              <li> gpudb::create_table_INTERVAL: Use
         *                      <a
         *                      href="../../../concepts/tables/#partitioning-by-interval"
         *                      target="_top">interval partitioning</a>.
         *                              <li> gpudb::create_table_LIST: Use <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitioning</a>.
         *                              <li> gpudb::create_table_HASH: Use <a
         *                      href="../../../concepts/tables/#partitioning-by-hash"
         *                      target="_top">hash partitioning</a>.
         *                              <li> gpudb::create_table_SERIES: Use <a
         *                      href="../../../concepts/tables/#partitioning-by-series"
         *                      target="_top">series partitioning</a>.
         *                      </ul>
         *                              <li>
         *                      gpudb::create_table_partition_keys:
         *                      Comma-separated list of partition keys, which
         *                      are the columns or column expressions by which
         *                      records will be assigned to partitions defined
         *                      by @a partition_definitions.
         *                              <li>
         *                      gpudb::create_table_partition_definitions:
         *                      Comma-separated list of partition definitions,
         *                      whose format depends on the choice of @a
         *                      partition_type.  See <a
         *                      href="../../../concepts/tables/#partitioning-by-range"
         *                      target="_top">range partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-interval"
         *                      target="_top">interval partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitioning</a>, <a
         *                      href="../../../concepts/tables/#partitioning-by-hash"
         *                      target="_top">hash partitioning</a>, or <a
         *                      href="../../../concepts/tables/#partitioning-by-series"
         *                      target="_top">series partitioning</a> for
         *                      example formats.
         *                              <li>
         *                      gpudb::create_table_is_automatic_partition: If
         *                      @a true, a new partition will be created for
         *                      values which don't fall into an existing
         *                      partition.  Currently only supported for <a
         *                      href="../../../concepts/tables/#partitioning-by-list"
         *                      target="_top">list partitions</a>.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li> gpudb::create_table_ttl: Sets the
         *                      <a href="../../../concepts/ttl/"
         *                      target="_top">TTL</a> of the table specified in
         *                      @a tableName.
         *                              <li> gpudb::create_table_chunk_size:
         *                      Indicates the number of records per chunk to be
         *                      used for this table.
         *                              <li>
         *                      gpudb::create_table_is_result_table: Indicates
         *                      whether the table is a <a
         *                      href="../../../concepts/tables_memory_only/"
         *                      target="_top">memory-only table</a>. A result
         *                      table cannot contain columns with store_only or
         *                      text_search <a
         *                      href="../../../concepts/types/#data-handling"
         *                      target="_top">data-handling</a> or that are <a
         *                      href="../../../concepts/types/#primitive-types"
         *                      target="_top">non-charN strings</a>, and it
         *                      will not be retained if the server is
         *                      restarted.
         *                      <ul>
         *                              <li> gpudb::create_table_true
         *                              <li> gpudb::create_table_false
         *                      </ul>
         *                      The default value is gpudb::create_table_false.
         *                              <li>
         *                      gpudb::create_table_strategy_definition: The <a
         *                      href="../../../rm/concepts/#tier-strategies"
         *                      target="_top">tier strategy</a> for the table
         *                      and its columns.
         *                      </ul>
         * 
         */
        CreateTableRequest(const std::string& tableName_, const std::string& typeId_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            typeId( typeId_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string typeId;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createTable(const CreateTableRequest&) const}.
     * <p>
     * Creates a new table. If a new table is being created,
     * the type of the table is given by @a typeId, which must be the ID of
     * a currently registered type (i.e. one created via {@link
     * #createType(const CreateTypeRequest&) const}).
     * <p>
     * A table may optionally be designated to use a
     * <a href="../../../concepts/tables/#replication"
     * target="_top">replicated</a> distribution scheme,
     * or be assigned: <a href="../../../concepts/tables/#foreign-keys"
     * target="_top">foreign keys</a> to
     * other tables, a <a href="../../../concepts/tables/#partitioning"
     * target="_top">partitioning</a>
     * scheme, and/or a <a href="../../../rm/concepts/#tier-strategies"
     * target="_top">tier strategy</a>.
     */
    struct CreateTableResponse
    {

        /**
         * Constructs a CreateTableResponse object with default parameter
         * values.
         */
        CreateTableResponse() :
            tableName(std::string()),
            typeId(std::string()),
            isCollection(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::string typeId;
        bool isCollection;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.isCollection);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.isCollection);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.isCollection);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
