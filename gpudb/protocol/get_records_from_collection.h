/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GET_RECORDS_FROM_COLLECTION_H__
#define __GET_RECORDS_FROM_COLLECTION_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::getRecordsFromCollection(const GetRecordsFromCollectionRequest&) const
     * "GPUdb::getRecordsFromCollection".
     *
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as @ref
     * GPUdb::deleteRecords(const DeleteRecordsRequest&) const
     * "GPUdb::deleteRecords".
     *
     * This operation supports paging through the data via the @ref offset and
     * @ref limit parameters.
     *
     * Note that when using the Java API, it is not possible to retrieve
     * records from join views using this operation.
     * (DEPRECATED)
     */
    struct GetRecordsFromCollectionRequest
    {
        /**
         * Constructs a GetRecordsFromCollectionRequest object with default
         * parameters.
         */
        GetRecordsFromCollectionRequest() :
            tableName(std::string()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GetRecordsFromCollectionRequest object with the
         * specified parameters.
         *
         * @param[in] tableName_  Name of the collection or table from which
         *                        records are to be retrieved, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing collection or table.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] options_  <ul>
         *                          <li>@ref
         *                              gpudb::get_records_from_collection_return_record_ids
         *                              "get_records_from_collection_return_record_ids":
         *                              If @ref
         *                              gpudb::get_records_from_collection_true
         *                              "true" then return the internal record
         *                              ID along with each returned record.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::get_records_from_collection_true
         *                                      "get_records_from_collection_true"
         *                                  <li>@ref
         *                                      gpudb::get_records_from_collection_false
         *                                      "get_records_from_collection_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_from_collection_false
         *                              "get_records_from_collection_false".
         *                          <li>@ref
         *                              gpudb::get_records_from_collection_expression
         *                              "get_records_from_collection_expression":
         *                              Optional filter expression to apply to
         *                              the table. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        GetRecordsFromCollectionRequest(const std::string& tableName_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs a GetRecordsFromCollectionRequest object with the
         * specified parameters.
         *
         * @param[in] tableName_  Name of the collection or table from which
         *                        records are to be retrieved, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing collection or table.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] encoding_  Specifies the encoding for returned records;
         *                       either @ref
         *                       gpudb::get_records_from_collection_binary
         *                       "binary" or @ref
         *                       gpudb::get_records_from_collection_json
         *                       "json".
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref
         *                               gpudb::get_records_from_collection_binary
         *                               "get_records_from_collection_binary"
         *                           <li>@ref
         *                               gpudb::get_records_from_collection_json
         *                               "get_records_from_collection_json"
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::get_records_from_collection_binary
         *                       "get_records_from_collection_binary".
         * @param[in] options_  <ul>
         *                          <li>@ref
         *                              gpudb::get_records_from_collection_return_record_ids
         *                              "get_records_from_collection_return_record_ids":
         *                              If @ref
         *                              gpudb::get_records_from_collection_true
         *                              "true" then return the internal record
         *                              ID along with each returned record.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::get_records_from_collection_true
         *                                      "get_records_from_collection_true"
         *                                  <li>@ref
         *                                      gpudb::get_records_from_collection_false
         *                                      "get_records_from_collection_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_from_collection_false
         *                              "get_records_from_collection_false".
         *                          <li>@ref
         *                              gpudb::get_records_from_collection_expression
         *                              "get_records_from_collection_expression":
         *                              Optional filter expression to apply to
         *                              the table. The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        GetRecordsFromCollectionRequest(const std::string& tableName_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of the collection or table from which records are to be
         * retrieved, in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be an existing
         * collection or table.
         */
        std::string tableName;

        /**
         * A positive integer indicating the number of initial results to skip
         * (this can be useful for paging through the results). The default
         * value is 0. The minimum allowed value is 0. The maximum allowed
         * value is MAX_INT.
         */
        int64_t offset;

        /**
         * A positive integer indicating the maximum number of results to be
         * returned, or END_OF_SET (-9999) to indicate that the maximum number
         * of results allowed by the server should be returned.  The number of
         * records returned will never exceed the server's own limit, defined
         * by the <a href="../../../config/#config-main-general"
         * target="_top">max_get_records_size</a> parameter in the server
         * configuration. Use @ref offset & @ref limit to request subsequent
         * pages of results. The default value is -9999.
         */
        int64_t limit;

        /**
         * Specifies the encoding for returned records; either @ref
         * gpudb::get_records_from_collection_binary "binary" or @ref
         * gpudb::get_records_from_collection_json "json".
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::get_records_from_collection_binary
         *         "get_records_from_collection_binary"
         *     <li>@ref gpudb::get_records_from_collection_json
         *         "get_records_from_collection_json"
         * </ul>
         * The default value is @ref gpudb::get_records_from_collection_binary
         * "get_records_from_collection_binary".
         */
        std::string encoding;

        /**
         * <ul>
         *     <li>@ref gpudb::get_records_from_collection_return_record_ids
         *         "get_records_from_collection_return_record_ids": If @ref
         *         gpudb::get_records_from_collection_true "true" then return
         *         the internal record ID along with each returned record.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::get_records_from_collection_true
         *                 "get_records_from_collection_true"
         *             <li>@ref gpudb::get_records_from_collection_false
         *                 "get_records_from_collection_false"
         *         </ul>
         *         The default value is @ref
         *         gpudb::get_records_from_collection_false
         *         "get_records_from_collection_false".
         *     <li>@ref gpudb::get_records_from_collection_expression
         *         "get_records_from_collection_expression": Optional filter
         *         expression to apply to the table. The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::GetRecordsFromCollectionRequest>
    {
        static void encode(Encoder& e, const gpudb::GetRecordsFromCollectionRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GetRecordsFromCollectionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.offset);
                            break;

                        case 2:
                            ::avro::decode(d, v.limit);
                            break;

                        case 3:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::getRecordsFromCollectionRaw(const GetRecordsFromCollectionRequest&) const
     * "GPUdb::getRecordsFromCollectionRaw".
     */
    struct RawGetRecordsFromCollectionResponse
    {
        /**
         * Constructs a RawGetRecordsFromCollectionResponse object with default
         * parameters.
         */
        RawGetRecordsFromCollectionResponse() :
            tableName(std::string()),
            typeNames(std::vector<std::string>()),
            recordsBinary(std::vector<std::vector<uint8_t> >()),
            recordsJson(std::vector<std::string>()),
            recordIds(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::GetRecordsFromCollectionRequest::tableName
         * "tableName".
         */
        std::string tableName;

        /**
         * The type IDs of the corresponding records in @ref recordsBinary or
         * @ref recordsJson. This is useful when @ref
         * gpudb::GetRecordsFromCollectionRequest::tableName "tableName" is a
         * heterogeneous collection (collections containing tables of different
         * types).
         */
        std::vector<std::string> typeNames;

        /**
         * If the encoding parameter of the request was 'binary' then this list
         * contains the binary encoded records retrieved from the
         * table/collection. Otherwise, empty list.
         */
        std::vector<std::vector<uint8_t> > recordsBinary;

        /**
         * If the encoding parameter of the request was 'json', then this list
         * contains the JSON encoded records retrieved from the
         * table/collection. Otherwise, empty list.
         */
        std::vector<std::string> recordsJson;

        /**
         * If the 'return_record_ids' option of the request was 'true', then
         * this list contains the internal ID for each object. Otherwise it
         * will be empty.
         */
        std::vector<std::string> recordIds;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref
         *         gpudb::get_records_from_collection_total_number_of_records
         *         "get_records_from_collection_total_number_of_records": Total
         *         number of records.
         *     <li>@ref gpudb::get_records_from_collection_has_more_records
         *         "get_records_from_collection_has_more_records": Too many
         *         records. Returned a partial set.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::get_records_from_collection_true
         *                 "get_records_from_collection_true"
         *             <li>@ref gpudb::get_records_from_collection_false
         *                 "get_records_from_collection_false"
         *         </ul>
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawGetRecordsFromCollectionResponse>
    {
        static void encode(Encoder& e, const gpudb::RawGetRecordsFromCollectionResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeNames);
            ::avro::encode(e, v.recordsBinary);
            ::avro::encode(e, v.recordsJson);
            ::avro::encode(e, v.recordIds);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawGetRecordsFromCollectionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.recordsBinary);
                            break;

                        case 3:
                            ::avro::decode(d, v.recordsJson);
                            break;

                        case 4:
                            ::avro::decode(d, v.recordIds);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeNames);
                ::avro::decode(d, v.recordsBinary);
                ::avro::decode(d, v.recordsJson);
                ::avro::decode(d, v.recordIds);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::getRecordsFromCollection(const GetRecordsFromCollectionRequest&) const
     * "GPUdb::getRecordsFromCollection".
     *
     * @tparam T  The type of object being processed.
     *
     */
    template<typename T> struct GetRecordsFromCollectionResponse
    {
        /**
         * Constructs a GetRecordsFromCollectionResponse object with default
         * parameters.
         */
        GetRecordsFromCollectionResponse() :
            tableName(std::string()),
            typeNames(std::vector<std::string>()),
            data(std::vector<T>()),
            recordIds(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::GetRecordsFromCollectionRequest::tableName
         * "tableName".
         */
        std::string tableName;

        /**
         * The type IDs of the corresponding records in @ref data or @a
         * recordsJson. This is useful when @ref
         * gpudb::GetRecordsFromCollectionRequest::tableName "tableName" is a
         * heterogeneous collection (collections containing tables of different
         * types).
         */
        std::vector<std::string> typeNames;

        /**
         * If the encoding parameter of the request was 'binary' then this list
         * contains the binary encoded records retrieved from the
         * table/collection. Otherwise, empty list.
         */
        std::vector<T> data;

        /**
         * If the 'return_record_ids' option of the request was 'true', then
         * this list contains the internal ID for each object. Otherwise it
         * will be empty.
         */
        std::vector<std::string> recordIds;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref
         *         gpudb::get_records_from_collection_total_number_of_records
         *         "get_records_from_collection_total_number_of_records": Total
         *         number of records.
         *     <li>@ref gpudb::get_records_from_collection_has_more_records
         *         "get_records_from_collection_has_more_records": Too many
         *         records. Returned a partial set.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::get_records_from_collection_true
         *                 "get_records_from_collection_true"
         *             <li>@ref gpudb::get_records_from_collection_false
         *                 "get_records_from_collection_false"
         *         </ul>
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

#endif // __GET_RECORDS_FROM_COLLECTION_H__
