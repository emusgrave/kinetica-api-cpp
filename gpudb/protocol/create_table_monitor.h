/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TABLE_MONITOR_H__
#define __CREATE_TABLE_MONITOR_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createTableMonitor(const CreateTableMonitorRequest&) const
     * "GPUdb::createTableMonitor".
     *
     * Creates a monitor that watches for a single table modification event
     * type (insert, update, or delete) on a particular table (identified by
     * @ref tableName) and forwards event notifications to subscribers via ZMQ.
     * After this call completes, subscribe to the returned @ref
     * gpudb::CreateTableMonitorResponse::topicId "topicId" on the ZMQ table
     * monitor port (default 9002). Each time an operation of the given type on
     * the table completes, a multipart message is published for that topic;
     * the first part contains only the topic ID, and each subsequent part
     * contains one binary-encoded Avro object that corresponds to the event
     * and can be decoded using @ref
     * gpudb::CreateTableMonitorResponse::typeSchema "typeSchema". The monitor
     * will continue to run (regardless of whether or not there are any
     * subscribers) until deactivated with @ref
     * GPUdb::clearTableMonitor(const ClearTableMonitorRequest&) const
     * "GPUdb::clearTableMonitor".
     *
     * For more information on table monitors, see <a
     * href="../../../concepts/table_monitors/" target="_top">Table
     * Monitors</a>.
     */
    struct CreateTableMonitorRequest
    {
        /**
         * Constructs a CreateTableMonitorRequest object with default
         * parameters.
         */
        CreateTableMonitorRequest() :
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTableMonitorRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table to monitor, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::create_table_monitor_event
         *                              "create_table_monitor_event": Type of
         *                              modification event on the target table
         *                              to be monitored by this table monitor.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_monitor_insert
         *                                      "create_table_monitor_insert":
         *                                      Get notifications of new record
         *                                      insertions. The new row images
         *                                      are forwarded to the
         *                                      subscribers.
         *                                  <li>@ref
         *                                      gpudb::create_table_monitor_update
         *                                      "create_table_monitor_update":
         *                                      Get notifications of update
         *                                      operations. The modified row
         *                                      count information is forwarded
         *                                      to the subscribers.
         *                                  <li>@ref
         *                                      gpudb::create_table_monitor_delete
         *                                      "create_table_monitor_delete":
         *                                      Get notifications of delete
         *                                      operations. The deleted row
         *                                      count information is forwarded
         *                                      to the subscribers.
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_monitor_insert
         *                              "create_table_monitor_insert".
         *                          <li>@ref
         *                              gpudb::create_table_monitor_monitor_id
         *                              "create_table_monitor_monitor_id": ID
         *                              to use for this monitor instead of a
         *                              randomly generated one
         *                          <li>@ref
         *                              gpudb::create_table_monitor_datasink_name
         *                              "create_table_monitor_datasink_name":
         *                              Name of an existing <a
         *                              href="../../../concepts/data_sinks/"
         *                              target="_top">data sink</a> to send
         *                              change data notifications to
         *                          <li>@ref
         *                              gpudb::create_table_monitor_destination
         *                              "create_table_monitor_destination":
         *                              Destination for the output data in
         *                              format
         *                              'destination_type://path[:port]'.
         *                              Supported destination types are 'http',
         *                              'https' and 'kafka'.
         *                          <li>@ref
         *                              gpudb::create_table_monitor_kafka_topic_name
         *                              "create_table_monitor_kafka_topic_name":
         *                              Name of the Kafka topic to publish to
         *                              if @ref
         *                              gpudb::create_table_monitor_destination
         *                              "destination" in @a options_ is
         *                              specified and is a Kafka broker
         *                          <li>@ref
         *                              gpudb::create_table_monitor_increasing_column
         *                              "create_table_monitor_increasing_column":
         *                              Column on subscribed table that will
         *                              increase for new records (e.g.,
         *                              TIMESTAMP).
         *                          <li>@ref
         *                              gpudb::create_table_monitor_expression
         *                              "create_table_monitor_expression":
         *                              Filter expression to limit records for
         *                              notification
         *                          <li>@ref
         *                              gpudb::create_table_monitor_refresh_method
         *                              "create_table_monitor_refresh_method":
         *                              Method controlling when the table
         *                              monitor reports changes to the @a
         *                              tableName_.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::create_table_monitor_on_change
         *                                      "create_table_monitor_on_change":
         *                                      Report changes as they occur.
         *                                  <li>@ref
         *                                      gpudb::create_table_monitor_periodic
         *                                      "create_table_monitor_periodic":
         *                                      Report changes periodically at
         *                                      rate specified by @ref
         *                                      gpudb::create_table_monitor_refresh_period
         *                                      "refresh_period".
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::create_table_monitor_on_change
         *                              "create_table_monitor_on_change".
         *                          <li>@ref
         *                              gpudb::create_table_monitor_refresh_period
         *                              "create_table_monitor_refresh_period":
         *                              When @ref
         *                              gpudb::create_table_monitor_refresh_method
         *                              "refresh_method" is @ref
         *                              gpudb::create_table_monitor_periodic
         *                              "periodic", specifies the period in
         *                              seconds at which changes are reported.
         *                          <li>@ref
         *                              gpudb::create_table_monitor_refresh_start_time
         *                              "create_table_monitor_refresh_start_time":
         *                              When @ref
         *                              gpudb::create_table_monitor_refresh_method
         *                              "refresh_method" is @ref
         *                              gpudb::create_table_monitor_periodic
         *                              "periodic", specifies the first time at
         *                              which changes are reported.  Value is a
         *                              datetime string with format 'YYYY-MM-DD
         *                              HH:MM:SS'.
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateTableMonitorRequest(const std::string& tableName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to monitor, in [ schema_name.\ ]table_name format,
         * using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_table_monitor_event
         *         "create_table_monitor_event": Type of modification event on
         *         the target table to be monitored by this table monitor.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_monitor_insert
         *                 "create_table_monitor_insert": Get notifications of
         *                 new record insertions. The new row images are
         *                 forwarded to the subscribers.
         *             <li>@ref gpudb::create_table_monitor_update
         *                 "create_table_monitor_update": Get notifications of
         *                 update operations. The modified row count
         *                 information is forwarded to the subscribers.
         *             <li>@ref gpudb::create_table_monitor_delete
         *                 "create_table_monitor_delete": Get notifications of
         *                 delete operations. The deleted row count information
         *                 is forwarded to the subscribers.
         *         </ul>
         *         The default value is @ref gpudb::create_table_monitor_insert
         *         "create_table_monitor_insert".
         *     <li>@ref gpudb::create_table_monitor_monitor_id
         *         "create_table_monitor_monitor_id": ID to use for this
         *         monitor instead of a randomly generated one
         *     <li>@ref gpudb::create_table_monitor_datasink_name
         *         "create_table_monitor_datasink_name": Name of an existing <a
         *         href="../../../concepts/data_sinks/" target="_top">data
         *         sink</a> to send change data notifications to
         *     <li>@ref gpudb::create_table_monitor_destination
         *         "create_table_monitor_destination": Destination for the
         *         output data in format 'destination_type://path[:port]'.
         *         Supported destination types are 'http', 'https' and 'kafka'.
         *     <li>@ref gpudb::create_table_monitor_kafka_topic_name
         *         "create_table_monitor_kafka_topic_name": Name of the Kafka
         *         topic to publish to if @ref
         *         gpudb::create_table_monitor_destination "destination" in
         *         @ref options is specified and is a Kafka broker
         *     <li>@ref gpudb::create_table_monitor_increasing_column
         *         "create_table_monitor_increasing_column": Column on
         *         subscribed table that will increase for new records (e.g.,
         *         TIMESTAMP).
         *     <li>@ref gpudb::create_table_monitor_expression
         *         "create_table_monitor_expression": Filter expression to
         *         limit records for notification
         *     <li>@ref gpudb::create_table_monitor_refresh_method
         *         "create_table_monitor_refresh_method": Method controlling
         *         when the table monitor reports changes to the @ref
         *         tableName.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::create_table_monitor_on_change
         *                 "create_table_monitor_on_change": Report changes as
         *                 they occur.
         *             <li>@ref gpudb::create_table_monitor_periodic
         *                 "create_table_monitor_periodic": Report changes
         *                 periodically at rate specified by @ref
         *                 gpudb::create_table_monitor_refresh_period
         *                 "refresh_period".
         *         </ul>
         *         The default value is @ref
         *         gpudb::create_table_monitor_on_change
         *         "create_table_monitor_on_change".
         *     <li>@ref gpudb::create_table_monitor_refresh_period
         *         "create_table_monitor_refresh_period": When @ref
         *         gpudb::create_table_monitor_refresh_method "refresh_method"
         *         is @ref gpudb::create_table_monitor_periodic "periodic",
         *         specifies the period in seconds at which changes are
         *         reported.
         *     <li>@ref gpudb::create_table_monitor_refresh_start_time
         *         "create_table_monitor_refresh_start_time": When @ref
         *         gpudb::create_table_monitor_refresh_method "refresh_method"
         *         is @ref gpudb::create_table_monitor_periodic "periodic",
         *         specifies the first time at which changes are reported.
         *         Value is a datetime string with format 'YYYY-MM-DD
         *         HH:MM:SS'.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableMonitorRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTableMonitorRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTableMonitorRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createTableMonitor(const CreateTableMonitorRequest&) const
     * "GPUdb::createTableMonitor".
     */
    struct CreateTableMonitorResponse
    {
        /**
         * Constructs a CreateTableMonitorResponse object with default
         * parameters.
         */
        CreateTableMonitorResponse() :
            topicId(std::string()),
            tableName(std::string()),
            typeSchema(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The ZMQ topic ID to subscribe to for table events.
         */
        std::string topicId;

        /**
         * Value of @ref gpudb::CreateTableMonitorRequest::tableName
         * "tableName".
         */
        std::string tableName;

        /**
         * JSON Avro schema of the table, for use in decoding published
         * records.
         */
        std::string typeSchema;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::create_table_monitor_ttl
         *         "create_table_monitor_ttl": For insert_table/delete_table
         *         events, the ttl of the table.
         *     <li>@ref gpudb::create_table_monitor_insert_topic_id
         *         "create_table_monitor_insert_topic_id": The topic id for
         *         'insert' @ref gpudb::create_table_monitor_event "event" in
         *         @ref gpudb::CreateTableMonitorRequest::options "options"
         *     <li>@ref gpudb::create_table_monitor_update_topic_id
         *         "create_table_monitor_update_topic_id": The topic id for
         *         'update' @ref gpudb::create_table_monitor_event "event" in
         *         @ref gpudb::CreateTableMonitorRequest::options "options"
         *     <li>@ref gpudb::create_table_monitor_delete_topic_id
         *         "create_table_monitor_delete_topic_id": The topic id for
         *         'delete' @ref gpudb::create_table_monitor_event "event" in
         *         @ref gpudb::CreateTableMonitorRequest::options "options"
         *     <li>@ref gpudb::create_table_monitor_insert_type_schema
         *         "create_table_monitor_insert_type_schema": The JSON Avro
         *         schema of the table in @ref tableName
         *     <li>@ref gpudb::create_table_monitor_update_type_schema
         *         "create_table_monitor_update_type_schema": The JSON Avro
         *         schema for 'update' events
         *     <li>@ref gpudb::create_table_monitor_delete_type_schema
         *         "create_table_monitor_delete_type_schema": The JSON Avro
         *         schema for 'delete' events
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableMonitorResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTableMonitorResponse& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeSchema);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateTableMonitorResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeSchema);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeSchema);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_TABLE_MONITOR_H__
