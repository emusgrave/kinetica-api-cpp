/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __APPEND_RECORDS_H__
#define __APPEND_RECORDS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #appendRecords(const AppendRecordsRequest&) const}.
     * <p>
     * Append (or insert) all records from a source table
     * (specified by @a sourceTableName) to a particular target table
     * (specified by @a tableName). The field map
     * (specified by @a fieldMap) holds the user specified map of target table
     * column names with their mapped source column names.
     */
    struct AppendRecordsRequest
    {

        /**
         * Constructs an AppendRecordsRequest object with default parameter
         * values.
         */
        AppendRecordsRequest() :
            tableName(std::string()),
            sourceTableName(std::string()),
            fieldMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AppendRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  The table name for the records to be
         *                        appended, in [schema_name.]table_name format,
         *                        using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] sourceTableName_  The source table name to get records
         *                              from, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution
         *                              rules</a>.  Must be an existing table
         *                              name.
         * @param[in] fieldMap_  Contains the mapping of column names from the
         *                       target table (specified by @a tableName) as
         *                       the keys, and corresponding column names or
         *                       expressions (e.g., 'col_name+1') from the
         *                       source table (specified by @a
         *                       sourceTableName). Must be existing column
         *                       names in source table and target table, and
         *                       their types must be matched. For details on
         *                       using expressions, see <a
         *                       href="../../../concepts/expressions/"
         *                       target="_top">Expressions</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::append_records_offset: A
         *                      positive integer indicating the number of
         *                      initial results to skip from @a
         *                      sourceTableName. Default is 0. The minimum
         *                      allowed value is 0. The maximum allowed value
         *                      is MAX_INT.  The default value is '0'.
         *                              <li> gpudb::append_records_limit: A
         *                      positive integer indicating the maximum number
         *                      of results to be returned from @a
         *                      sourceTableName. Or END_OF_SET (-9999) to
         *                      indicate that the max number of results should
         *                      be returned.  The default value is '-9999'.
         *                              <li> gpudb::append_records_expression:
         *                      Optional filter expression to apply to the @a
         *                      sourceTableName.  The default value is ''.
         *                              <li> gpudb::append_records_order_by:
         *                      Comma-separated list of the columns to be
         *                      sorted by from source table (specified by @a
         *                      sourceTableName), e.g., 'timestamp asc, x
         *                      desc'. The @a order_by columns do not have to
         *                      be present in @a fieldMap.  The default value
         *                      is ''.
         *                              <li>
         *                      gpudb::append_records_update_on_existing_pk:
         *                      Specifies the record collision policy for
         *                      inserting source table
         *                      records (specified by @a sourceTableName) into
         *                      a target table
         *                      (specified by @a tableName) with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>. If
         *                      set to @a true, any existing table record with
         *                      primary key values that match those of a source
         *                      table record being inserted will be replaced by
         *                      that
         *                      new record (the new data will be "upserted").
         *                      If set to
         *                      @a false, any existing table record with
         *                      primary
         *                      key values that match those of a source table
         *                      record being inserted will remain unchanged,
         *                      while the
         *                      source record will be rejected and an error
         *                      handled as determined by
         *                      @a ignore_existing_pk.  If the specified table
         *                      does not have a primary key,
         *                      then this option has no effect.
         *                      <ul>
         *                              <li> gpudb::append_records_true: Upsert
         *                      new records when primary keys match existing
         *                      records
         *                              <li> gpudb::append_records_false:
         *                      Reject new records when primary keys match
         *                      existing records
         *                      </ul>
         *                      The default value is
         *                      gpudb::append_records_false.
         *                              <li>
         *                      gpudb::append_records_ignore_existing_pk:
         *                      Specifies the record collision
         *                      error-suppression policy for
         *                      inserting source table records (specified by @a
         *                      sourceTableName) into a target table
         *                      (specified by @a tableName) with a <a
         *                      href="../../../concepts/tables/#primary-keys"
         *                      target="_top">primary key</a>, only
         *                      used when not in upsert mode (upsert mode is
         *                      disabled when
         *                      @a update_on_existing_pk is
         *                      @a false).  If set to
         *                      @a true, any source table record being inserted
         *                      that
         *                      is rejected for having primary key values that
         *                      match those of an existing target table record
         *                      will
         *                      be ignored with no error generated.  If @a
         *                      false,
         *                      the rejection of any source table record for
         *                      having primary key values matching an existing
         *                      target
         *                      table record will result in an error being
         *                      raised.  If the specified table does not have a
         *                      primary
         *                      key or if upsert mode is in effect (@a
         *                      update_on_existing_pk is
         *                      @a true), then this option has no effect.
         *                      <ul>
         *                              <li> gpudb::append_records_true: Ignore
         *                      source table records whose primary key values
         *                      collide with those of target table records
         *                              <li> gpudb::append_records_false: Raise
         *                      an error for any source table record whose
         *                      primary key values collide with those of a
         *                      target table record
         *                      </ul>
         *                      The default value is
         *                      gpudb::append_records_false.
         *                              <li>
         *                      gpudb::append_records_truncate_strings: If set
         *                      to @a true, it allows inserting longer strings
         *                      into smaller charN string columns by truncating
         *                      the longer strings to fit.
         *                      <ul>
         *                              <li> gpudb::append_records_true
         *                              <li> gpudb::append_records_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::append_records_false.
         *                      </ul>
         * 
         */
        AppendRecordsRequest(const std::string& tableName_, const std::string& sourceTableName_, const std::map<std::string, std::string>& fieldMap_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            sourceTableName( sourceTableName_ ),
            fieldMap( fieldMap_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string sourceTableName;
        std::map<std::string, std::string> fieldMap;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AppendRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::AppendRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.sourceTableName);
            ::avro::encode(e, v.fieldMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AppendRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceTableName);
                            break;

                        case 2:
                            ::avro::decode(d, v.fieldMap);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.sourceTableName);
                ::avro::decode(d, v.fieldMap);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #appendRecords(const AppendRecordsRequest&) const}.
     * <p>
     * Append (or insert) all records from a source table
     * (specified by @a sourceTableName) to a particular target table
     * (specified by @a tableName). The field map
     * (specified by @a fieldMap) holds the user specified map of target table
     * column names with their mapped source column names.
     */
    struct AppendRecordsResponse
    {

        /**
         * Constructs an AppendRecordsResponse object with default parameter
         * values.
         */
        AppendRecordsResponse() :
            tableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AppendRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::AppendRecordsResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AppendRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
