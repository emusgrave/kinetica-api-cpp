/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_FILES_H__
#define __SHOW_FILES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showFiles(const ShowFilesRequest&) const}.
     * <p>
     * Shows information about files in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. Can be used for individual files, or to show all
     * files in a given directory.
     */
    struct ShowFilesRequest
    {

        /**
         * Constructs a ShowFilesRequest object with default parameter values.
         */
        ShowFilesRequest() :
            paths(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowFilesRequest object with the specified parameters.
         * 
         * @param[in] paths_  File paths to show. Each path can be a KiFS
         *                    directory name, or a full path to a KiFS file.
         * @param[in] options_  Optional parameters.
         * 
         */
        ShowFilesRequest(const std::vector<std::string>& paths_, const std::map<std::string, std::string>& options_):
            paths( paths_ ),
            options( options_ )
        {
        }

        std::vector<std::string> paths;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowFilesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowFilesRequest& v)
        {
            ::avro::encode(e, v.paths);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowFilesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.paths);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.paths);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showFiles(const ShowFilesRequest&) const}.
     * <p>
     * Shows information about files in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. Can be used for individual files, or to show all
     * files in a given directory.
     */
    struct ShowFilesResponse
    {

        /**
         * Constructs a ShowFilesResponse object with default parameter values.
         */
        ShowFilesResponse() :
            fileNames(std::vector<std::string>()),
            sizes(std::vector<int64_t>()),
            users(std::vector<std::string>()),
            creationTimes(std::vector<int64_t>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> fileNames;
        std::vector<int64_t> sizes;
        std::vector<std::string> users;
        std::vector<int64_t> creationTimes;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowFilesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowFilesResponse& v)
        {
            ::avro::encode(e, v.fileNames);
            ::avro::encode(e, v.sizes);
            ::avro::encode(e, v.users);
            ::avro::encode(e, v.creationTimes);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowFilesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.fileNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.sizes);
                            break;

                        case 2:
                            ::avro::decode(d, v.users);
                            break;

                        case 3:
                            ::avro::decode(d, v.creationTimes);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.fileNames);
                ::avro::decode(d, v.sizes);
                ::avro::decode(d, v.users);
                ::avro::decode(d, v.creationTimes);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
