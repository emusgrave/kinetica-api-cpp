/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TIER_H__
#define __ALTER_TIER_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTier(const AlterTierRequest&) const}.
     * <p>
     * Alters properties of an exisiting
     * <a href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
     * facilitate
     * <a href="../../../rm/concepts/" target="_top">resource management</a>.
     * <p>
     * To disable
     * <a href="../../../rm/concepts/#watermark-based-eviction"
     * target="_top">watermark-based eviction</a>,
     * set both @a high_watermark and
     * @a low_watermark to 100.
     */
    struct AlterTierRequest
    {

        /**
         * Constructs an AlterTierRequest object with default parameter values.
         */
        AlterTierRequest() :
            name(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTierRequest object with the specified parameters.
         * 
         * @param[in] name_  Name of the tier to be altered. Must be an
         *                   existing tier group name.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::alter_tier_capacity:
         *                      Maximum size in bytes this tier may hold at
         *                      once.
         *                              <li> gpudb::alter_tier_high_watermark:
         *                      Threshold of usage of this tier's resource that
         *                      once exceeded, will trigger watermark-based
         *                      eviction from this tier.
         *                              <li> gpudb::alter_tier_low_watermark:
         *                      Threshold of resource usage that once fallen
         *                      below after crossing the @a high_watermark,
         *                      will cease watermark-based eviction from this
         *                      tier.
         *                              <li> gpudb::alter_tier_persist: If @a
         *                      true the system configuration will be written
         *                      to disk upon successful application of this
         *                      request. This will commit the changes from this
         *                      request and any additional in-memory
         *                      modifications.
         *                      <ul>
         *                              <li> gpudb::alter_tier_true
         *                              <li> gpudb::alter_tier_false
         *                      </ul>
         *                      The default value is gpudb::alter_tier_true.
         *                      </ul>
         * 
         */
        AlterTierRequest(const std::string& name_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            options( options_ )
        {
        }

        std::string name;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTierRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTierRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTierRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTier(const AlterTierRequest&) const}.
     * <p>
     * Alters properties of an exisiting
     * <a href="../../../rm/concepts/#storage-tiers" target="_top">tier</a> to
     * facilitate
     * <a href="../../../rm/concepts/" target="_top">resource management</a>.
     * <p>
     * To disable
     * <a href="../../../rm/concepts/#watermark-based-eviction"
     * target="_top">watermark-based eviction</a>,
     * set both @a high_watermark and
     * @a low_watermark to 100.
     */
    struct AlterTierResponse
    {

        /**
         * Constructs an AlterTierResponse object with default parameter
         * values.
         */
        AlterTierResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string name;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTierResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTierResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTierResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
