/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GET_JOB_H__
#define __GET_JOB_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::getJob(const GetJobRequest&) const
     * "GPUdb::getJob".
     *
     * Get the status and result of asynchronously running job.  See the @ref
     * GPUdb::createJob(const CreateJobRequest&) const "GPUdb::createJob" for
     * starting an asynchronous job.  Some fields of the response are filled
     * only after the submitted job has finished execution.
     */
    struct GetJobRequest
    {
        /**
         * Constructs a GetJobRequest object with default parameters.
         */
        GetJobRequest() :
            jobId(int64_t()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GetJobRequest object with the specified parameters.
         *
         * @param[in] jobId_  A unique identifier for the job whose status and
         *                    result is to be fetched.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::get_job_job_tag
         *                              "get_job_job_tag": Job tag returned in
         *                              call to create the job
         *                      </ul>
         *                      The default value is an empty map.
         */
        GetJobRequest(const int64_t jobId_, const std::map<std::string, std::string>& options_):
            jobId( jobId_ ),
            options( options_ )
        {
        }

        /**
         * A unique identifier for the job whose status and result is to be
         * fetched.
         */
        int64_t jobId;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::get_job_job_tag "get_job_job_tag": Job tag
         *         returned in call to create the job
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::GetJobRequest>
    {
        static void encode(Encoder& e, const gpudb::GetJobRequest& v)
        {
            ::avro::encode(e, v.jobId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GetJobRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.jobId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.jobId);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::getJob(const GetJobRequest&) const "GPUdb::getJob".
     */
    struct GetJobResponse
    {
        /**
         * Constructs a GetJobResponse object with default parameters.
         */
        GetJobResponse() :
            endpoint(std::string()),
            jobStatus(std::string()),
            running(bool()),
            progress(int32_t()),
            successful(bool()),
            responseEncoding(std::string()),
            jobResponse(std::vector<uint8_t>()),
            jobResponseStr(std::string()),
            statusMap(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The endpoint which is being executed asynchronously.  E.g.
         * '/alter/table'.
         */
        std::string endpoint;

        /**
         * Status of the submitted job.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::get_job_RUNNING "get_job_RUNNING": The job is
         *         currently executing.
         *     <li>@ref gpudb::get_job_DONE "get_job_DONE": The job execution
         *         has successfully completed and the response is included in
         *         the @ref jobResponse or @ref jobResponseStr field
         *     <li>@ref gpudb::get_job_ERROR "get_job_ERROR": The job was
         *         attempted, but an error was encountered.  The @ref statusMap
         *         contains the details of the error in error_message
         *     <li>@ref gpudb::get_job_CANCELLED "get_job_CANCELLED": Job
         *         cancellation was requested while the execution was in
         *         progress.
         * </ul>
         */
        std::string jobStatus;

        /**
         * True if the end point is still executing.
         */
        bool running;

        /**
         * Approximate percentage of the job completed.
         */
        int32_t progress;

        /**
         * True if the job execution completed and no errors were encountered.
         */
        bool successful;

        /**
         * The encoding of the job result (contained in @ref jobResponse or
         * @ref jobResponseStr.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::get_job_binary "get_job_binary": The job result
         *         is binary-encoded.  It is contained in @ref jobResponse.
         *     <li>@ref gpudb::get_job_json "get_job_json": The job result is
         *         json-encoded.  It is contained in @ref jobResponseStr.
         * </ul>
         */
        std::string responseEncoding;

        /**
         * The binary-encoded response of the job.  This field is populated
         * only when the job has completed and @ref responseEncoding is @ref
         * gpudb::get_job_binary "binary"
         */
        std::vector<uint8_t> jobResponse;

        /**
         * The json-encoded response of the job.  This field is populated only
         * when the job has completed and @ref responseEncoding is @ref
         * gpudb::get_job_json "json"
         */
        std::string jobResponseStr;

        /**
         * Map of various status strings for the executed job.
         * <ul>
         *     <li>@ref gpudb::get_job_error_message "get_job_error_message":
         *         Explains what error occurred while running the job
         *         asynchronously.  This entry only exists when the job status
         *         is @ref gpudb::get_job_ERROR "ERROR".
         * </ul>
         */
        std::map<std::string, std::string> statusMap;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::GetJobResponse>
    {
        static void encode(Encoder& e, const gpudb::GetJobResponse& v)
        {
            ::avro::encode(e, v.endpoint);
            ::avro::encode(e, v.jobStatus);
            ::avro::encode(e, v.running);
            ::avro::encode(e, v.progress);
            ::avro::encode(e, v.successful);
            ::avro::encode(e, v.responseEncoding);
            ::avro::encode(e, v.jobResponse);
            ::avro::encode(e, v.jobResponseStr);
            ::avro::encode(e, v.statusMap);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::GetJobResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.endpoint);
                            break;

                        case 1:
                            ::avro::decode(d, v.jobStatus);
                            break;

                        case 2:
                            ::avro::decode(d, v.running);
                            break;

                        case 3:
                            ::avro::decode(d, v.progress);
                            break;

                        case 4:
                            ::avro::decode(d, v.successful);
                            break;

                        case 5:
                            ::avro::decode(d, v.responseEncoding);
                            break;

                        case 6:
                            ::avro::decode(d, v.jobResponse);
                            break;

                        case 7:
                            ::avro::decode(d, v.jobResponseStr);
                            break;

                        case 8:
                            ::avro::decode(d, v.statusMap);
                            break;

                        case 9:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.endpoint);
                ::avro::decode(d, v.jobStatus);
                ::avro::decode(d, v.running);
                ::avro::decode(d, v.progress);
                ::avro::decode(d, v.successful);
                ::avro::decode(d, v.responseEncoding);
                ::avro::decode(d, v.jobResponse);
                ::avro::decode(d, v.jobResponseStr);
                ::avro::decode(d, v.statusMap);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __GET_JOB_H__
