/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __FILTER_BY_RANGE_H__
#define __FILTER_BY_RANGE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #filterByRange(const FilterByRangeRequest&) const}.
     * <p>
     * Calculates which objects from a table have a column that is within
     * the given bounds. An object from the table identified by @a tableName is
     * added to the view @a viewName if its column is within
     * [@a lowerBound, @a upperBound] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed
     * the bound filter.  Although this functionality can also be accomplished
     * with the
     * standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given
     * bounds (which may not include all the track points of any given track).
     */
    struct FilterByRangeRequest
    {

        /**
         * Constructs a FilterByRangeRequest object with default parameter
         * values.
         */
        FilterByRangeRequest() :
            tableName(std::string()),
            viewName(std::string()),
            columnName(std::string()),
            lowerBound(double()),
            upperBound(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a FilterByRangeRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the filter by
         *                        range operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] viewName_  If provided, then this will be the name of the
         *                       view containing the results, in
         *                       [schema_name.]view_name format, using standard
         *                       <a
         *                       href="../../../concepts/tables/#table-name-resolution"
         *                       target="_top">name resolution rules</a> and
         *                       meeting <a
         *                       href="../../../concepts/tables/#table-naming-criteria"
         *                       target="_top">table naming criteria</a>.  Must
         *                       not be an already existing table or view.
         * @param[in] columnName_  Name of a column on which the operation
         *                         would be applied.
         * @param[in] lowerBound_  Value of the lower bound (inclusive).
         * @param[in] upperBound_  Value of the upper bound (inclusive).
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::filter_by_range_create_temp_table: If @a
         *                      true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a viewName. This is always allowed
         *                      even if the caller does not have permission to
         *                      create tables. The generated name is returned
         *                      in @a qualified_view_name.
         *                      <ul>
         *                              <li> gpudb::filter_by_range_true
         *                              <li> gpudb::filter_by_range_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::filter_by_range_false.
         *                              <li>
         *                      gpudb::filter_by_range_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema for the view as part of @a viewName and
         *                      use /create/schema to create the schema if
         *                      non-existent]  Name of a schema for the newly
         *                      created view. If the schema is non-existent, it
         *                      will be automatically created.
         *                      </ul>
         * 
         */
        FilterByRangeRequest(const std::string& tableName_, const std::string& viewName_, const std::string& columnName_, const double lowerBound_, const double upperBound_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            viewName( viewName_ ),
            columnName( columnName_ ),
            lowerBound( lowerBound_ ),
            upperBound( upperBound_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string viewName;
        std::string columnName;
        double lowerBound;
        double upperBound;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByRangeRequest>
    {
        static void encode(Encoder& e, const gpudb::FilterByRangeRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.lowerBound);
            ::avro::encode(e, v.upperBound);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::FilterByRangeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.lowerBound);
                            break;

                        case 4:
                            ::avro::decode(d, v.upperBound);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.lowerBound);
                ::avro::decode(d, v.upperBound);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #filterByRange(const FilterByRangeRequest&) const}.
     * <p>
     * Calculates which objects from a table have a column that is within
     * the given bounds. An object from the table identified by @a tableName is
     * added to the view @a viewName if its column is within
     * [@a lowerBound, @a upperBound] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed
     * the bound filter.  Although this functionality can also be accomplished
     * with the
     * standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given
     * bounds (which may not include all the track points of any given track).
     */
    struct FilterByRangeResponse
    {

        /**
         * Constructs a FilterByRangeResponse object with default parameter
         * values.
         */
        FilterByRangeResponse() :
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        int64_t count;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByRangeResponse>
    {
        static void encode(Encoder& e, const gpudb::FilterByRangeResponse& v)
        {
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::FilterByRangeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
