/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_PERMISSION_H__
#define __HAS_PERMISSION_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #hasPermission(const HasPermissionRequest&) const}.
     * <p>
     * Checks if the specified user has the specified permission on the
     * specified object.
     */
    struct HasPermissionRequest
    {

        /**
         * Constructs a HasPermissionRequest object with default parameter
         * values.
         */
        HasPermissionRequest() :
            name(std::string()),
            target(std::string()),
            permission(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasPermissionRequest object with the specified
         * parameters.
         * 
         * @param[in] name_  Name of the user for which the permission is being
         *                   checked. Must be an existing user. If blank, will
         *                   use the current user.
         * @param[in] target_  Name of object to check for the requested
         *                     permission.  It is recommended to use a
         *                     fully-qualified name when possible.
         * @param[in] permission_  Permission to check for.
         *                         <ul>
         *                                 <li> gpudb::has_permission_connect:
         *                         Connect access on the given data source
         *                                 <li>
         *                         gpudb::has_permission_credential_admin: Full
         *                         read/write and administrative access on the
         *                         credential.
         *                                 <li>
         *                         gpudb::has_permission_credential_read:
         *                         Ability to read and use the credential.
         *                                 <li>
         *                         gpudb::has_permission_directory_read: For
         *                         files in the directory, access to list
         *                         files, download files, or use files in
         *                         server side functions
         *                                 <li>
         *                         gpudb::has_permission_directory_write:
         *                         Access to upload files to, or delete files
         *                         from, the directory. A user with write
         *                         access automatically has read access
         *                                 <li>
         *                         gpudb::has_permission_proc_execute: Execute
         *                         access to the UDF.
         *                                 <li> gpudb::has_permission_role:
         *                         User is a member of this role (including
         *                         indirectly).
         *                                 <li>
         *                         gpudb::has_permission_sql_proc_execute:
         *                         Execute access to the SQL proc.
         *                                 <li>
         *                         gpudb::has_permission_system_admin: Full
         *                         access to all data and system functions.
         *                                 <li>
         *                         gpudb::has_permission_system_read: Read-only
         *                         access to all tables.
         *                                 <li>
         *                         gpudb::has_permission_system_user_admin:
         *                         Access to administer users and roles that do
         *                         not have system_admin permission.
         *                                 <li>
         *                         gpudb::has_permission_system_write: Read and
         *                         write access to all tables.
         *                                 <li>
         *                         gpudb::has_permission_table_admin: Full
         *                         read/write and administrative access to the
         *                         table.
         *                                 <li>
         *                         gpudb::has_permission_table_delete: Delete
         *                         access to the table.
         *                                 <li>
         *                         gpudb::has_permission_table_insert: Insert
         *                         access to the table.
         *                                 <li>
         *                         gpudb::has_permission_table_read: Read
         *                         access to the table.
         *                                 <li>
         *                         gpudb::has_permission_table_update: Update
         *                         access to the table.
         *                         </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::has_permission_no_error_if_not_exists:
         *                      If @a false will return an error if the
         *                      provided @a target does not exist or is blank.
         *                      If @a true then it will return @a false for @a
         *                      hasPermission.
         *                      <ul>
         *                              <li> gpudb::has_permission_true
         *                              <li> gpudb::has_permission_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::has_permission_false.
         *                      </ul>
         * 
         */
        HasPermissionRequest(const std::string& name_, const std::string& target_, const std::string& permission_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            target( target_ ),
            permission( permission_ ),
            options( options_ )
        {
        }

        std::string name;
        std::string target;
        std::string permission;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasPermissionRequest>
    {
        static void encode(Encoder& e, const gpudb::HasPermissionRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.target);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasPermissionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.target);
                            break;

                        case 2:
                            ::avro::decode(d, v.permission);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.target);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #hasPermission(const HasPermissionRequest&) const}.
     * <p>
     * Checks if the specified user has the specified permission on the
     * specified object.
     */
    struct HasPermissionResponse
    {

        /**
         * Constructs a HasPermissionResponse object with default parameter
         * values.
         */
        HasPermissionResponse() :
            name(std::string()),
            target(std::string()),
            permission(std::string()),
            hasPermission(bool()),
            filters(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string name;
        std::string target;
        std::string permission;
        bool hasPermission;
        std::map<std::string, std::string> filters;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasPermissionResponse>
    {
        static void encode(Encoder& e, const gpudb::HasPermissionResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.target);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.hasPermission);
            ::avro::encode(e, v.filters);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasPermissionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.target);
                            break;

                        case 2:
                            ::avro::decode(d, v.permission);
                            break;

                        case 3:
                            ::avro::decode(d, v.hasPermission);
                            break;

                        case 4:
                            ::avro::decode(d, v.filters);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.target);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.hasPermission);
                ::avro::decode(d, v.filters);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
