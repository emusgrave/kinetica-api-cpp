/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_PROC_H__
#define __CREATE_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createProc(const CreateProcRequest&) const "GPUdb::createProc".
     *
     * Creates an instance (proc) of the <a href="../../../concepts/udf/"
     * target="_top">user-defined functions</a> (UDF) specified by the given
     * command, options, and files, and makes it available for execution.
     */
    struct CreateProcRequest
    {
        /**
         * Constructs a CreateProcRequest object with default parameters.
         */
        CreateProcRequest() :
            procName(std::string()),
            executionMode(std::string()),
            files(std::map<std::string, std::vector<uint8_t> >()),
            command(std::string()),
            args(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateProcRequest object with the specified parameters.
         *
         * @param[in] procName_  Name of the proc to be created. Must not be
         *                       the name of a currently existing proc.
         * @param[in] executionMode_  The execution mode of the proc.
         *                            Supported values:
         *                            <ul>
         *                                <li>@ref
         *                                    gpudb::create_proc_distributed
         *                                    "create_proc_distributed": Input
         *                                    table data will be divided into
         *                                    data segments that are
         *                                    distributed across all nodes in
         *                                    the cluster, and the proc command
         *                                    will be invoked once per data
         *                                    segment in parallel. Output table
         *                                    data from each invocation will be
         *                                    saved to the same node as the
         *                                    corresponding input data.
         *                                <li>@ref
         *                                    gpudb::create_proc_nondistributed
         *                                    "create_proc_nondistributed": The
         *                                    proc command will be invoked only
         *                                    once per execution, and will not
         *                                    have direct access to any tables
         *                                    named as input or output table
         *                                    parameters in the call to @ref
         *                                    GPUdb::executeProc(const ExecuteProcRequest&) const
         *                                    "GPUdb::executeProc".  It will,
         *                                    however, be able to access the
         *                                    database using native API calls.
         *                            </ul>
         *                            The default value is @ref
         *                            gpudb::create_proc_distributed
         *                            "create_proc_distributed".
         * @param[in] files_  A map of the files that make up the proc. The
         *                    keys of the map are file names, and the values
         *                    are the binary contents of the files. The file
         *                    names may include subdirectory names (e.g.
         *                    'subdir/file') but must not resolve to a
         *                    directory above the root for the proc.  Files may
         *                    be loaded from existing files in KiFS. Those file
         *                    names should be prefixed with the uri kifs:// and
         *                    the values in the map should be empty. The
         *                    default value is an empty map.
         * @param[in] command_  The command (excluding arguments) that will be
         *                      invoked when the proc is executed. It will be
         *                      invoked from the directory containing the proc
         *                      @a files_ and may be any command that can be
         *                      resolved from that directory. It need not refer
         *                      to a file actually in that directory; for
         *                      example, it could be 'java' if the proc is a
         *                      Java application; however, any necessary
         *                      external programs must be preinstalled on every
         *                      database node. If the command refers to a file
         *                      in that directory, it must be preceded with
         *                      './' as per Linux convention. If not specified,
         *                      and exactly one file is provided in @a files_,
         *                      that file will be invoked. The default value is
         *                      ''.
         * @param[in] args_  An array of command-line arguments that will be
         *                   passed to @a command_ when the proc is executed.
         *                   The default value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::create_proc_max_concurrency_per_node
         *                              "create_proc_max_concurrency_per_node":
         *                              The maximum number of concurrent
         *                              instances of the proc that will be
         *                              executed per node. 0 allows unlimited
         *                              concurrency. The default value is '0'.
         *                          <li>@ref gpudb::create_proc_set_environment
         *                              "create_proc_set_environment": A python
         *                              environment to use when executing the
         *                              proc. Must be an existing environment,
         *                              else an error will be returned. The
         *                              default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateProcRequest(const std::string& procName_, const std::string& executionMode_, const std::map<std::string, std::vector<uint8_t> >& files_, const std::string& command_, const std::vector<std::string>& args_, const std::map<std::string, std::string>& options_):
            procName( procName_ ),
            executionMode( executionMode_ ),
            files( files_ ),
            command( command_ ),
            args( args_ ),
            options( options_ )
        {
        }

        /**
         * Name of the proc to be created. Must not be the name of a currently
         * existing proc.
         */
        std::string procName;

        /**
         * The execution mode of the proc.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::create_proc_distributed
         *         "create_proc_distributed": Input table data will be divided
         *         into data segments that are distributed across all nodes in
         *         the cluster, and the proc command will be invoked once per
         *         data segment in parallel. Output table data from each
         *         invocation will be saved to the same node as the
         *         corresponding input data.
         *     <li>@ref gpudb::create_proc_nondistributed
         *         "create_proc_nondistributed": The proc command will be
         *         invoked only once per execution, and will not have direct
         *         access to any tables named as input or output table
         *         parameters in the call to @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc".  It will, however, be able to access
         *         the database using native API calls.
         * </ul>
         * The default value is @ref gpudb::create_proc_distributed
         * "create_proc_distributed".
         */
        std::string executionMode;

        /**
         * A map of the files that make up the proc. The keys of the map are
         * file names, and the values are the binary contents of the files. The
         * file names may include subdirectory names (e.g.\ 'subdir/file') but
         * must not resolve to a directory above the root for the proc.
         *
         * Files may be loaded from existing files in KiFS. Those file names
         * should be prefixed with the uri kifs:// and the values in the map
         * should be empty. The default value is an empty map.
         */
        std::map<std::string, std::vector<uint8_t> > files;

        /**
         * The command (excluding arguments) that will be invoked when the proc
         * is executed. It will be invoked from the directory containing the
         * proc @ref files and may be any command that can be resolved from
         * that directory. It need not refer to a file actually in that
         * directory; for example, it could be 'java' if the proc is a Java
         * application; however, any necessary external programs must be
         * preinstalled on every database node. If the command refers to a file
         * in that directory, it must be preceded with './' as per Linux
         * convention. If not specified, and exactly one file is provided in
         * @ref files, that file will be invoked. The default value is ''.
         */
        std::string command;

        /**
         * An array of command-line arguments that will be passed to @ref
         * command when the proc is executed. The default value is an empty
         * vector.
         */
        std::vector<std::string> args;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_proc_max_concurrency_per_node
         *         "create_proc_max_concurrency_per_node": The maximum number
         *         of concurrent instances of the proc that will be executed
         *         per node. 0 allows unlimited concurrency. The default value
         *         is '0'.
         *     <li>@ref gpudb::create_proc_set_environment
         *         "create_proc_set_environment": A python environment to use
         *         when executing the proc. Must be an existing environment,
         *         else an error will be returned. The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProcRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.executionMode);
            ::avro::encode(e, v.files);
            ::avro::encode(e, v.command);
            ::avro::encode(e, v.args);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.executionMode);
                            break;

                        case 2:
                            ::avro::decode(d, v.files);
                            break;

                        case 3:
                            ::avro::decode(d, v.command);
                            break;

                        case 4:
                            ::avro::decode(d, v.args);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.executionMode);
                ::avro::decode(d, v.files);
                ::avro::decode(d, v.command);
                ::avro::decode(d, v.args);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createProc(const CreateProcRequest&) const "GPUdb::createProc".
     */
    struct CreateProcResponse
    {
        /**
         * Constructs a CreateProcResponse object with default parameters.
         */
        CreateProcResponse() :
            procName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateProcRequest::procName "procName".
         */
        std::string procName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProcResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateProcResponse& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_PROC_H__
