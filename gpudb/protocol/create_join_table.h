/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_JOIN_TABLE_H__
#define __CREATE_JOIN_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createJoinTable(const CreateJoinTableRequest&) const}.
     * <p>
     * Creates a table that is the result of a SQL JOIN.
     * <p>
     * For join details and examples see: <a href="../../../concepts/joins/"
     * target="_top">Joins</a>.  For limitations, see <a
     * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
     * Limitations and Cautions</a>.
     */
    struct CreateJoinTableRequest
    {

        /**
         * Constructs a CreateJoinTableRequest object with default parameter
         * values.
         */
        CreateJoinTableRequest() :
            joinTableName(std::string()),
            tableNames(std::vector<std::string>()),
            columnNames(std::vector<std::string>()),
            expressions(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateJoinTableRequest object with the specified
         * parameters.
         * 
         * @param[in] joinTableName_  Name of the join table to be created, in
         *                            [schema_name.]table_name format, using
         *                            standard <a
         *                            href="../../../concepts/tables/#table-name-resolution"
         *                            target="_top">name resolution rules</a>
         *                            and meeting <a
         *                            href="../../../concepts/tables/#table-naming-criteria"
         *                            target="_top">table naming criteria</a>.
         * @param[in] tableNames_  The list of table names composing the join,
         *                         each in [schema_name.]table_name format,
         *                         using standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         *                         Corresponds to a SQL statement FROM clause.
         * @param[in] columnNames_  List of member table columns or column
         *                          expressions to be included in the join.
         *                          Columns can be prefixed with
         *                          'table_id.column_name', where 'table_id' is
         *                          the table name or alias.  Columns can be
         *                          aliased via the syntax 'column_name as
         *                          alias'. Wild cards '*' can be used to
         *                          include all columns across member tables or
         *                          'table_id.*' for all of a single table's
         *                          columns.  Columns and column expressions
         *                          composing the join must be uniquely named
         *                          or aliased--therefore, the '*' wild card
         *                          cannot be used if column names aren't
         *                          unique across all tables.
         * @param[in] expressions_  An optional list of expressions to combine
         *                          and filter the joined tables.  Corresponds
         *                          to a SQL statement WHERE clause. For
         *                          details see: <a
         *                          href="../../../concepts/expressions/"
         *                          target="_top">expressions</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_join_table_create_temp_table: If
         *                      @a true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a joinTableName. This is always
         *                      allowed even if the caller does not have
         *                      permission to create tables. The generated name
         *                      is returned in @a qualified_join_table_name.
         *                      <ul>
         *                              <li> gpudb::create_join_table_true
         *                              <li> gpudb::create_join_table_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_join_table_false.
         *                              <li>
         *                      gpudb::create_join_table_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema for the join as part of @a joinTableName
         *                      and use /create/schema to create the schema if
         *                      non-existent]  Name of a schema for the join.
         *                      If the schema is non-existent, it will be
         *                      automatically created.  The default value is
         *                      ''.
         *                              <li>
         *                      gpudb::create_join_table_max_query_dimensions:
         *                      No longer used.
         *                              <li>
         *                      gpudb::create_join_table_optimize_lookups: Use
         *                      more memory to speed up the joining of tables.
         *                      <ul>
         *                              <li> gpudb::create_join_table_true
         *                              <li> gpudb::create_join_table_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_join_table_false.
         *                              <li> gpudb::create_join_table_ttl: Sets
         *                      the <a href="../../../concepts/ttl/"
         *                      target="_top">TTL</a> of the join table
         *                      specified in @a joinTableName.
         *                              <li> gpudb::create_join_table_view_id:
         *                      view this projection is part of.  The default
         *                      value is ''.
         *                              <li> gpudb::create_join_table_no_count:
         *                      return a count of 0 for the join table for
         *                      logging and for show_table. optimization needed
         *                      for large overlapped equi-join stencils.  The
         *                      default value is 'false'.
         *                              <li>
         *                      gpudb::create_join_table_chunk_size: Maximum
         *                      number of records per joined-chunk for this
         *                      table. Defaults to the gpudb.conf file chunk
         *                      size
         *                      </ul>
         * 
         */
        CreateJoinTableRequest(const std::string& joinTableName_, const std::vector<std::string>& tableNames_, const std::vector<std::string>& columnNames_, const std::vector<std::string>& expressions_, const std::map<std::string, std::string>& options_):
            joinTableName( joinTableName_ ),
            tableNames( tableNames_ ),
            columnNames( columnNames_ ),
            expressions( expressions_ ),
            options( options_ )
        {
        }

        std::string joinTableName;
        std::vector<std::string> tableNames;
        std::vector<std::string> columnNames;
        std::vector<std::string> expressions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableRequest& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.expressions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.expressions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.expressions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createJoinTable(const CreateJoinTableRequest&) const}.
     * <p>
     * Creates a table that is the result of a SQL JOIN.
     * <p>
     * For join details and examples see: <a href="../../../concepts/joins/"
     * target="_top">Joins</a>.  For limitations, see <a
     * href="../../../concepts/joins/#limitations-cautions" target="_top">Join
     * Limitations and Cautions</a>.
     */
    struct CreateJoinTableResponse
    {

        /**
         * Constructs a CreateJoinTableResponse object with default parameter
         * values.
         */
        CreateJoinTableResponse() :
            joinTableName(std::string()),
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string joinTableName;
        int64_t count;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableResponse& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.count);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
