/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __MERGE_RECORDS_H__
#define __MERGE_RECORDS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::mergeRecords(const MergeRecordsRequest&) const
     * "GPUdb::mergeRecords".
     *
     * Create a new empty result table (specified by @ref tableName), and
     * insert all records from source tables (specified by @ref
     * sourceTableNames) based on the field mapping information (specified by
     * @ref fieldMaps).
     *
     * For merge records details and examples, see <a
     * href="../../../concepts/merge_records/" target="_top">Merge Records</a>.
     * For limitations, see <a
     * href="../../../concepts/merge_records/#limitations-and-cautions"
     * target="_top">Merge Records Limitations and Cautions</a>.
     *
     * The field map (specified by @ref fieldMaps) holds the user-specified
     * maps of target table column names to source table columns. The array of
     * @ref fieldMaps must match one-to-one with the @ref sourceTableNames,
     * e.g., there's a map present in @ref fieldMaps for each table listed in
     * @ref sourceTableNames.
     */
    struct MergeRecordsRequest
    {
        /**
         * Constructs a MergeRecordsRequest object with default parameters.
         */
        MergeRecordsRequest() :
            tableName(std::string()),
            sourceTableNames(std::vector<std::string>()),
            fieldMaps(std::vector<std::map<std::string, std::string> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a MergeRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  The name of the new result table for the
         *                        records to be merged into, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         *                        Must NOT be an existing table.
         * @param[in] sourceTableNames_  The list of names of source tables to
         *                               get the records from, each in
         *                               [schema_name.]table_name format, using
         *                               standard <a
         *                               href="../../../concepts/tables/#table-name-resolution"
         *                               target="_top">name resolution
         *                               rules</a>.  Must be existing table
         *                               names.
         * @param[in] fieldMaps_  Contains a list of source/target column
         *                        mappings, one mapping for each source table
         *                        listed in @a sourceTableNames_ being merged
         *                        into the target table specified by @a
         *                        tableName_.  Each mapping contains the target
         *                        column names (as keys) that the data in the
         *                        mapped source columns or column <a
         *                        href="../../../concepts/expressions/"
         *                        target="_top">expressions</a> (as values)
         *                        will be merged into.  All of the source
         *                        columns being merged into a given target
         *                        column must match in type, as that type will
         *                        determine the type of the new target column.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::merge_records_create_temp_table
         *                              "merge_records_create_temp_table": If
         *                              @ref gpudb::merge_records_true "true",
         *                              a unique temporary table name will be
         *                              generated in the sys_temp schema and
         *                              used in place of @a tableName_. If @ref
         *                              gpudb::merge_records_persist "persist"
         *                              is @ref gpudb::merge_records_false
         *                              "false", then this is always allowed
         *                              even if the caller does not have
         *                              permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::merge_records_qualified_table_name
         *                              "qualified_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::merge_records_true
         *                                      "merge_records_true"
         *                                  <li>@ref gpudb::merge_records_false
         *                                      "merge_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::merge_records_false
         *                              "merge_records_false".
         *                          <li>@ref
         *                              gpudb::merge_records_collection_name
         *                              "merge_records_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the merged table
         *                              as part of @a tableName_ and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema for the newly created merged
         *                              table specified by @a tableName_.
         *                          <li>@ref gpudb::merge_records_is_replicated
         *                              "merge_records_is_replicated":
         *                              Indicates the <a
         *                              href="../../../concepts/tables/#distribution"
         *                              target="_top">distribution scheme</a>
         *                              for the data of the merged table
         *                              specified in @a tableName_.  If true,
         *                              the table will be <a
         *                              href="../../../concepts/tables/#replication"
         *                              target="_top">replicated</a>.  If
         *                              false, the table will be <a
         *                              href="../../../concepts/tables/#random-sharding"
         *                              target="_top">randomly sharded</a>.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::merge_records_true
         *                                      "merge_records_true"
         *                                  <li>@ref gpudb::merge_records_false
         *                                      "merge_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::merge_records_false
         *                              "merge_records_false".
         *                          <li>@ref gpudb::merge_records_ttl
         *                              "merge_records_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the merged
         *                              table specified in @a tableName_.
         *                          <li>@ref gpudb::merge_records_persist
         *                              "merge_records_persist": If @ref
         *                              gpudb::merge_records_true "true", then
         *                              the table specified in @a tableName_
         *                              will be persisted and will not expire
         *                              unless a @ref gpudb::merge_records_ttl
         *                              "ttl" is specified.   If @ref
         *                              gpudb::merge_records_false "false",
         *                              then the table will be an in-memory
         *                              table and will expire unless a @ref
         *                              gpudb::merge_records_ttl "ttl" is
         *                              specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::merge_records_true
         *                                      "merge_records_true"
         *                                  <li>@ref gpudb::merge_records_false
         *                                      "merge_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::merge_records_true
         *                              "merge_records_true".
         *                          <li>@ref gpudb::merge_records_chunk_size
         *                              "merge_records_chunk_size": Indicates
         *                              the number of records per chunk to be
         *                              used for the merged table specified in
         *                              @a tableName_.
         *                          <li>@ref
         *                              gpudb::merge_records_chunk_column_max_memory
         *                              "merge_records_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the merged table specified in @a
         *                              tableName_.
         *                          <li>@ref
         *                              gpudb::merge_records_chunk_max_memory
         *                              "merge_records_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the merged table specified in @a
         *                              tableName_.
         *                          <li>@ref gpudb::merge_records_view_id
         *                              "merge_records_view_id": view this
         *                              result table is part of. The default
         *                              value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        MergeRecordsRequest(const std::string& tableName_, const std::vector<std::string>& sourceTableNames_, const std::vector<std::map<std::string, std::string> >& fieldMaps_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            sourceTableNames( sourceTableNames_ ),
            fieldMaps( fieldMaps_ ),
            options( options_ )
        {
        }

        /**
         * The name of the new result table for the records to be merged into,
         * in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  Must NOT be an existing
         * table.
         */
        std::string tableName;

        /**
         * The list of names of source tables to get the records from, each in
         * [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be existing table
         * names.
         */
        std::vector<std::string> sourceTableNames;

        /**
         * Contains a list of source/target column mappings, one mapping for
         * each source table listed in @ref sourceTableNames being merged into
         * the target table specified by @ref tableName.  Each mapping contains
         * the target column names (as keys) that the data in the mapped source
         * columns or column <a href="../../../concepts/expressions/"
         * target="_top">expressions</a> (as values) will be merged into.  All
         * of the source columns being merged into a given target column must
         * match in type, as that type will determine the type of the new
         * target column.
         */
        std::vector<std::map<std::string, std::string> > fieldMaps;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::merge_records_create_temp_table
         *         "merge_records_create_temp_table": If @ref
         *         gpudb::merge_records_true "true", a unique temporary table
         *         name will be generated in the sys_temp schema and used in
         *         place of @ref tableName. If @ref
         *         gpudb::merge_records_persist "persist" is @ref
         *         gpudb::merge_records_false "false", then this is always
         *         allowed even if the caller does not have permission to
         *         create tables. The generated name is returned in @ref
         *         gpudb::merge_records_qualified_table_name
         *         "qualified_table_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::merge_records_true "merge_records_true"
         *             <li>@ref gpudb::merge_records_false
         *                 "merge_records_false"
         *         </ul>
         *         The default value is @ref gpudb::merge_records_false
         *         "merge_records_false".
         *     <li>@ref gpudb::merge_records_collection_name
         *         "merge_records_collection_name": [DEPRECATED--please specify
         *         the containing schema for the merged table as part of @ref
         *         tableName and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema for the newly created merged table
         *         specified by @ref tableName.
         *     <li>@ref gpudb::merge_records_is_replicated
         *         "merge_records_is_replicated": Indicates the <a
         *         href="../../../concepts/tables/#distribution"
         *         target="_top">distribution scheme</a> for the data of the
         *         merged table specified in @ref tableName.  If true, the
         *         table will be <a
         *         href="../../../concepts/tables/#replication"
         *         target="_top">replicated</a>.  If false, the table will be
         *         <a href="../../../concepts/tables/#random-sharding"
         *         target="_top">randomly sharded</a>.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::merge_records_true "merge_records_true"
         *             <li>@ref gpudb::merge_records_false
         *                 "merge_records_false"
         *         </ul>
         *         The default value is @ref gpudb::merge_records_false
         *         "merge_records_false".
         *     <li>@ref gpudb::merge_records_ttl "merge_records_ttl": Sets the
         *         <a href="../../../concepts/ttl/" target="_top">TTL</a> of
         *         the merged table specified in @ref tableName.
         *     <li>@ref gpudb::merge_records_persist "merge_records_persist":
         *         If @ref gpudb::merge_records_true "true", then the table
         *         specified in @ref tableName will be persisted and will not
         *         expire unless a @ref gpudb::merge_records_ttl "ttl" is
         *         specified.   If @ref gpudb::merge_records_false "false",
         *         then the table will be an in-memory table and will expire
         *         unless a @ref gpudb::merge_records_ttl "ttl" is specified
         *         otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::merge_records_true "merge_records_true"
         *             <li>@ref gpudb::merge_records_false
         *                 "merge_records_false"
         *         </ul>
         *         The default value is @ref gpudb::merge_records_true
         *         "merge_records_true".
         *     <li>@ref gpudb::merge_records_chunk_size
         *         "merge_records_chunk_size": Indicates the number of records
         *         per chunk to be used for the merged table specified in @ref
         *         tableName.
         *     <li>@ref gpudb::merge_records_chunk_column_max_memory
         *         "merge_records_chunk_column_max_memory": Indicates the
         *         target maximum data size for each column in a chunk to be
         *         used for the merged table specified in @ref tableName.
         *     <li>@ref gpudb::merge_records_chunk_max_memory
         *         "merge_records_chunk_max_memory": Indicates the target
         *         maximum data size for all columns in a chunk to be used for
         *         the merged table specified in @ref tableName.
         *     <li>@ref gpudb::merge_records_view_id "merge_records_view_id":
         *         view this result table is part of. The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.sourceTableNames);
            ::avro::encode(e, v.fieldMaps);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceTableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.fieldMaps);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.sourceTableNames);
                ::avro::decode(d, v.fieldMaps);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::mergeRecords(const MergeRecordsRequest&) const
     * "GPUdb::mergeRecords".
     */
    struct MergeRecordsResponse
    {
        /**
         * Constructs a MergeRecordsResponse object with default parameters.
         */
        MergeRecordsResponse() :
            tableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::merge_records_qualified_table_name
         *         "merge_records_qualified_table_name": The fully qualified
         *         name of the result table (i.e. including the schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __MERGE_RECORDS_H__
