/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __MERGE_RECORDS_H__
#define __MERGE_RECORDS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #mergeRecords(const MergeRecordsRequest&) const}.
     * <p>
     * Create a new empty result table (specified by @a tableName),
     * and insert all records from source tables
     * (specified by @a sourceTableNames) based on the field mapping
     * information (specified by @a fieldMaps).
     * <p>
     * For merge records details and examples, see
     * <a href="../../../concepts/merge_records/" target="_top">Merge
     * Records</a>.  For limitations, see
     * <a href="../../../concepts/merge_records/#limitations-and-cautions"
     * target="_top">Merge Records Limitations and Cautions</a>.

     * The field map (specified by @a fieldMaps) holds the user-specified maps
     * of target table column names to source table columns. The array of
     * @a fieldMaps must match one-to-one with the @a sourceTableNames,
     * e.g., there's a map present in @a fieldMaps for each table listed in
     * @a sourceTableNames.
     */
    struct MergeRecordsRequest
    {

        /**
         * Constructs a MergeRecordsRequest object with default parameter
         * values.
         */
        MergeRecordsRequest() :
            tableName(std::string()),
            sourceTableNames(std::vector<std::string>()),
            fieldMaps(std::vector<std::map<std::string, std::string> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a MergeRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  The name of the new result table for the
         *                        records to be merged into, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         *                        Must NOT be an existing table.
         * @param[in] sourceTableNames_  The list of names of source tables to
         *                               get the records from, each in
         *                               [schema_name.]table_name format, using
         *                               standard <a
         *                               href="../../../concepts/tables/#table-name-resolution"
         *                               target="_top">name resolution
         *                               rules</a>.  Must be existing table
         *                               names.
         * @param[in] fieldMaps_  Contains a list of source/target column
         *                        mappings, one mapping for each source table
         *                        listed in @a sourceTableNames being merged
         *                        into the target table specified by @a
         *                        tableName.  Each mapping contains the target
         *                        column names (as keys) that the data in the
         *                        mapped source columns or column <a
         *                        href="../../../concepts/expressions/"
         *                        target="_top">expressions</a> (as values)
         *                        will be merged into.  All of the source
         *                        columns being merged into a given target
         *                        column must match in type, as that type will
         *                        determine the type of the new target column.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::merge_records_create_temp_table: If @a
         *                      true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a tableName. If @a persist is @a
         *                      false, then this is always allowed even if the
         *                      caller does not have permission to create
         *                      tables. The generated name is returned in @a
         *                      qualified_table_name.
         *                      <ul>
         *                              <li> gpudb::merge_records_true
         *                              <li> gpudb::merge_records_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::merge_records_false.
         *                              <li>
         *                      gpudb::merge_records_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema for the merged table as part of @a
         *                      tableName and use /create/schema to create the
         *                      schema if non-existent]  Name of a schema for
         *                      the newly created merged table specified by @a
         *                      tableName.
         *                              <li>
         *                      gpudb::merge_records_is_replicated: Indicates
         *                      the <a
         *                      href="../../../concepts/tables/#distribution"
         *                      target="_top">distribution scheme</a> for the
         *                      data of the merged table specified in @a
         *                      tableName.  If true, the table will be <a
         *                      href="../../../concepts/tables/#replication"
         *                      target="_top">replicated</a>.  If false, the
         *                      table will be <a
         *                      href="../../../concepts/tables/#random-sharding"
         *                      target="_top">randomly sharded</a>.
         *                      <ul>
         *                              <li> gpudb::merge_records_true
         *                              <li> gpudb::merge_records_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::merge_records_false.
         *                              <li> gpudb::merge_records_ttl: Sets the
         *                      <a href="../../../concepts/ttl/"
         *                      target="_top">TTL</a> of the merged table
         *                      specified in @a tableName.
         *                              <li> gpudb::merge_records_persist: If
         *                      @a true, then the table specified in @a
         *                      tableName will be persisted and will not expire
         *                      unless a @a ttl is specified.   If @a false,
         *                      then the table will be an in-memory table and
         *                      will expire unless a @a ttl is specified
         *                      otherwise.
         *                      <ul>
         *                              <li> gpudb::merge_records_true
         *                              <li> gpudb::merge_records_false
         *                      </ul>
         *                      The default value is gpudb::merge_records_true.
         *                              <li> gpudb::merge_records_chunk_size:
         *                      Indicates the number of records per chunk to be
         *                      used for the merged table specified in @a
         *                      tableName.
         *                              <li> gpudb::merge_records_view_id: view
         *                      this result table is part of.  The default
         *                      value is ''.
         *                      </ul>
         * 
         */
        MergeRecordsRequest(const std::string& tableName_, const std::vector<std::string>& sourceTableNames_, const std::vector<std::map<std::string, std::string> >& fieldMaps_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            sourceTableNames( sourceTableNames_ ),
            fieldMaps( fieldMaps_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> sourceTableNames;
        std::vector<std::map<std::string, std::string> > fieldMaps;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.sourceTableNames);
            ::avro::encode(e, v.fieldMaps);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceTableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.fieldMaps);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.sourceTableNames);
                ::avro::decode(d, v.fieldMaps);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #mergeRecords(const MergeRecordsRequest&) const}.
     * <p>
     * Create a new empty result table (specified by @a tableName),
     * and insert all records from source tables
     * (specified by @a sourceTableNames) based on the field mapping
     * information (specified by @a fieldMaps).
     * <p>
     * For merge records details and examples, see
     * <a href="../../../concepts/merge_records/" target="_top">Merge
     * Records</a>.  For limitations, see
     * <a href="../../../concepts/merge_records/#limitations-and-cautions"
     * target="_top">Merge Records Limitations and Cautions</a>.

     * The field map (specified by @a fieldMaps) holds the user-specified maps
     * of target table column names to source table columns. The array of
     * @a fieldMaps must match one-to-one with the @a sourceTableNames,
     * e.g., there's a map present in @a fieldMaps for each table listed in
     * @a sourceTableNames.
     */
    struct MergeRecordsResponse
    {

        /**
         * Constructs a MergeRecordsResponse object with default parameter
         * values.
         */
        MergeRecordsResponse() :
            tableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
