/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GET_RECORDS_H__
#define __GET_RECORDS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::getRecords(const GetRecordsRequest&) const "GPUdb::getRecords".
     *
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables and views. Records can be returned encoded as binary, json, or
     * geojson.
     *
     * This operation supports paging through the data via the @ref offset and
     * @ref limit parameters.  Note that when paging through a table, if the
     * table (or the underlying table in case of a view) is updated (records
     * are inserted, deleted or modified) the records retrieved may differ
     * between calls based on the updates applied.
     */
    struct GetRecordsRequest
    {
        /**
         * Constructs a GetRecordsRequest object with default parameters.
         */
        GetRecordsRequest() :
            tableName(std::string()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GetRecordsRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table or view from which the
         *                        records will be fetched, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawGetRecordsResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] options_  <ul>
         *                          <li>@ref gpudb::get_records_expression
         *                              "get_records_expression": Optional
         *                              filter expression to apply to the
         *                              table.
         *                          <li>@ref
         *                              gpudb::get_records_fast_index_lookup
         *                              "get_records_fast_index_lookup":
         *                              Indicates if indexes should be used to
         *                              perform the lookup for a given
         *                              expression if possible. Only applicable
         *                              if there is no sorting, the expression
         *                              contains only equivalence comparisons
         *                              based on existing tables indexes and
         *                              the range of requested values is from
         *                              [0 to END_OF_SET].
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::get_records_true
         *                                      "get_records_true"
         *                                  <li>@ref gpudb::get_records_false
         *                                      "get_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_true
         *                              "get_records_true".
         *                          <li>@ref gpudb::get_records_sort_by
         *                              "get_records_sort_by": Optional column
         *                              that the data should be sorted by.
         *                              Empty by default (i.e. no sorting is
         *                              applied).
         *                          <li>@ref gpudb::get_records_sort_order
         *                              "get_records_sort_order": String
         *                              indicating how the returned values
         *                              should be sorted - ascending or
         *                              descending. If sort_order is provided,
         *                              sort_by has to be provided.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::get_records_ascending
         *                                      "get_records_ascending"
         *                                  <li>@ref
         *                                      gpudb::get_records_descending
         *                                      "get_records_descending"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_ascending
         *                              "get_records_ascending".
         *                      </ul>
         *                      The default value is an empty map.
         */
        GetRecordsRequest(const std::string& tableName_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs a GetRecordsRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table or view from which the
         *                        records will be fetched, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results). The default value
         *                     is 0. The minimum allowed value is 0. The
         *                     maximum allowed value is MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned, or END_OF_SET (-9999)
         *                    to indicate that the maximum number of results
         *                    allowed by the server should be returned.  The
         *                    number of records returned will never exceed the
         *                    server's own limit, defined by the <a
         *                    href="../../../config/#config-main-general"
         *                    target="_top">max_get_records_size</a> parameter
         *                    in the server configuration. Use @ref
         *                    gpudb::RawGetRecordsResponse::hasMoreRecords
         *                    "hasMoreRecords" to see if more records exist in
         *                    the result to be fetched, and @a offset_ & @a
         *                    limit_ to request subsequent pages of results.
         *                    The default value is -9999.
         * @param[in] encoding_  Specifies the encoding for returned records;
         *                       one of @ref gpudb::get_records_binary
         *                       "binary", @ref gpudb::get_records_json "json",
         *                       or @ref gpudb::get_records_geojson "geojson".
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::get_records_binary
         *                               "get_records_binary"
         *                           <li>@ref gpudb::get_records_json
         *                               "get_records_json"
         *                           <li>@ref gpudb::get_records_geojson
         *                               "get_records_geojson"
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::get_records_binary
         *                       "get_records_binary".
         * @param[in] options_  <ul>
         *                          <li>@ref gpudb::get_records_expression
         *                              "get_records_expression": Optional
         *                              filter expression to apply to the
         *                              table.
         *                          <li>@ref
         *                              gpudb::get_records_fast_index_lookup
         *                              "get_records_fast_index_lookup":
         *                              Indicates if indexes should be used to
         *                              perform the lookup for a given
         *                              expression if possible. Only applicable
         *                              if there is no sorting, the expression
         *                              contains only equivalence comparisons
         *                              based on existing tables indexes and
         *                              the range of requested values is from
         *                              [0 to END_OF_SET].
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::get_records_true
         *                                      "get_records_true"
         *                                  <li>@ref gpudb::get_records_false
         *                                      "get_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_true
         *                              "get_records_true".
         *                          <li>@ref gpudb::get_records_sort_by
         *                              "get_records_sort_by": Optional column
         *                              that the data should be sorted by.
         *                              Empty by default (i.e. no sorting is
         *                              applied).
         *                          <li>@ref gpudb::get_records_sort_order
         *                              "get_records_sort_order": String
         *                              indicating how the returned values
         *                              should be sorted - ascending or
         *                              descending. If sort_order is provided,
         *                              sort_by has to be provided.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::get_records_ascending
         *                                      "get_records_ascending"
         *                                  <li>@ref
         *                                      gpudb::get_records_descending
         *                                      "get_records_descending"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::get_records_ascending
         *                              "get_records_ascending".
         *                      </ul>
         *                      The default value is an empty map.
         */
        GetRecordsRequest(const std::string& tableName_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table or view from which the records will be fetched, in
         * [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * A positive integer indicating the number of initial results to skip
         * (this can be useful for paging through the results). The default
         * value is 0. The minimum allowed value is 0. The maximum allowed
         * value is MAX_INT.
         */
        int64_t offset;

        /**
         * A positive integer indicating the maximum number of results to be
         * returned, or END_OF_SET (-9999) to indicate that the maximum number
         * of results allowed by the server should be returned.  The number of
         * records returned will never exceed the server's own limit, defined
         * by the <a href="../../../config/#config-main-general"
         * target="_top">max_get_records_size</a> parameter in the server
         * configuration. Use @ref gpudb::RawGetRecordsResponse::hasMoreRecords
         * "hasMoreRecords" to see if more records exist in the result to be
         * fetched, and @ref offset & @ref limit to request subsequent pages of
         * results. The default value is -9999.
         */
        int64_t limit;

        /**
         * Specifies the encoding for returned records; one of @ref
         * gpudb::get_records_binary "binary", @ref gpudb::get_records_json
         * "json", or @ref gpudb::get_records_geojson "geojson".
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::get_records_binary "get_records_binary"
         *     <li>@ref gpudb::get_records_json "get_records_json"
         *     <li>@ref gpudb::get_records_geojson "get_records_geojson"
         * </ul>
         * The default value is @ref gpudb::get_records_binary
         * "get_records_binary".
         */
        std::string encoding;

        /**
         * <ul>
         *     <li>@ref gpudb::get_records_expression "get_records_expression":
         *         Optional filter expression to apply to the table.
         *     <li>@ref gpudb::get_records_fast_index_lookup
         *         "get_records_fast_index_lookup": Indicates if indexes should
         *         be used to perform the lookup for a given expression if
         *         possible. Only applicable if there is no sorting, the
         *         expression contains only equivalence comparisons based on
         *         existing tables indexes and the range of requested values is
         *         from [0 to END_OF_SET].
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::get_records_true "get_records_true"
         *             <li>@ref gpudb::get_records_false "get_records_false"
         *         </ul>
         *         The default value is @ref gpudb::get_records_true
         *         "get_records_true".
         *     <li>@ref gpudb::get_records_sort_by "get_records_sort_by":
         *         Optional column that the data should be sorted by. Empty by
         *         default (i.e. no sorting is applied).
         *     <li>@ref gpudb::get_records_sort_order "get_records_sort_order":
         *         String indicating how the returned values should be sorted -
         *         ascending or descending. If sort_order is provided, sort_by
         *         has to be provided.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::get_records_ascending
         *                 "get_records_ascending"
         *             <li>@ref gpudb::get_records_descending
         *                 "get_records_descending"
         *         </ul>
         *         The default value is @ref gpudb::get_records_ascending
         *         "get_records_ascending".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::GetRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::GetRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GetRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.offset);
                            break;

                        case 2:
                            ::avro::decode(d, v.limit);
                            break;

                        case 3:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::getRecordsRaw(const GetRecordsRequest&) const
     * "GPUdb::getRecordsRaw".
     */
    struct RawGetRecordsResponse
    {
        /**
         * Constructs a RawGetRecordsResponse object with default parameters.
         */
        RawGetRecordsResponse() :
            tableName(std::string()),
            typeName(std::string()),
            typeSchema(std::string()),
            recordsBinary(std::vector<std::vector<uint8_t> >()),
            recordsJson(std::vector<std::string>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::GetRecordsRequest::tableName "tableName".
         */
        std::string tableName;

        std::string typeName;

        /**
         * Avro schema of @ref recordsBinary or @ref recordsJson
         */
        std::string typeSchema;

        /**
         * If the @ref gpudb::GetRecordsRequest::encoding "encoding" was
         * 'binary', then this list contains the binary encoded records
         * retrieved from the table, otherwise not populated.
         */
        std::vector<std::vector<uint8_t> > recordsBinary;

        /**
         * If the @ref gpudb::GetRecordsRequest::encoding "encoding" was
         * 'json', then this list contains the JSON encoded records retrieved
         * from the table. If the @ref gpudb::GetRecordsRequest::encoding
         * "encoding" was 'geojson' this list contains a single entry
         * consisting of a GeoJSON FeatureCollection containing a feature per
         * record. Otherwise not populated.
         */
        std::vector<std::string> recordsJson;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawGetRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::RawGetRecordsResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeName);
            ::avro::encode(e, v.typeSchema);
            ::avro::encode(e, v.recordsBinary);
            ::avro::encode(e, v.recordsJson);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawGetRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeName);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeSchema);
                            break;

                        case 3:
                            ::avro::decode(d, v.recordsBinary);
                            break;

                        case 4:
                            ::avro::decode(d, v.recordsJson);
                            break;

                        case 5:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 6:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        case 7:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeName);
                ::avro::decode(d, v.typeSchema);
                ::avro::decode(d, v.recordsBinary);
                ::avro::decode(d, v.recordsJson);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::getRecords(const GetRecordsRequest&) const "GPUdb::getRecords".
     *
     * @tparam T  The type of object being processed.
     *
     */
    template<typename T> struct GetRecordsResponse
    {
        /**
         * Constructs a GetRecordsResponse object with default parameters.
         */
        GetRecordsResponse() :
            tableName(std::string()),
            typeName(std::string()),
            typeSchema(std::string()),
            data(std::vector<T>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::GetRecordsRequest::tableName "tableName".
         */
        std::string tableName;

        std::string typeName;

        /**
         * Avro schema of @ref data or @a recordsJson
         */
        std::string typeSchema;

        /**
         * If the @ref gpudb::GetRecordsRequest::encoding "encoding" was
         * 'binary', then this list contains the binary encoded records
         * retrieved from the table, otherwise not populated.
         */
        std::vector<T> data;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

#endif // __GET_RECORDS_H__
