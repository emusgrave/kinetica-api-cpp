/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_GET_FEATURE_INFO_H__
#define __VISUALIZE_GET_FEATURE_INFO_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #visualizeGetFeatureInfo(const VisualizeGetFeatureInfoRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeGetFeatureInfoRequest
    {

        /**
         * @private
         * Constructs a VisualizeGetFeatureInfoRequest object with default
         * parameter values.
         */
        VisualizeGetFeatureInfoRequest() :
            tableNames(std::vector<std::string>()),
            xColumnNames(std::vector<std::string>()),
            yColumnNames(std::vector<std::string>()),
            geometryColumnNames(std::vector<std::string>()),
            queryColumnNames(std::vector<std::vector<std::string> >()),
            projection(std::string()),
            minX(double()),
            maxX(double()),
            minY(double()),
            maxY(double()),
            width(int32_t()),
            height(int32_t()),
            x(int32_t()),
            y(int32_t()),
            radius(int32_t()),
            limit(int64_t()),
            encoding(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a VisualizeGetFeatureInfoRequest object with the
         * specified parameters.
         * 
         * @param[in] tableNames_
         * @param[in] xColumnNames_
         * @param[in] yColumnNames_
         * @param[in] geometryColumnNames_
         * @param[in] queryColumnNames_
         * @param[in] projection_
         *                         <ul>
         *                                 <li>
         *                         gpudb::visualize_get_feature_info_plate_carree
         *                                 <li>
         *                         gpudb::visualize_get_feature_info_web_mercator
         *                         </ul>
         * @param[in] minX_
         * @param[in] maxX_
         * @param[in] minY_
         * @param[in] maxY_
         * @param[in] width_
         * @param[in] height_
         * @param[in] x_
         * @param[in] y_
         * @param[in] radius_
         * @param[in] limit_
         * @param[in] encoding_
         *                       <ul>
         *                               <li>
         *                       gpudb::visualize_get_feature_info_binary
         *                               <li>
         *                       gpudb::visualize_get_feature_info_json
         *                               <li>
         *                       gpudb::visualize_get_feature_info_geojson
         *                               <li>
         *                       gpudb::visualize_get_feature_info_html
         *                       </ul>
         * @param[in] options_
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_get_feature_info_auto_column_selection:
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_get_feature_info_false
         *                              <li>
         *                      gpudb::visualize_get_feature_info_true
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_get_feature_info_false.
         *                      </ul>
         * 
         */
        VisualizeGetFeatureInfoRequest(const std::vector<std::string>& tableNames_, const std::vector<std::string>& xColumnNames_, const std::vector<std::string>& yColumnNames_, const std::vector<std::string>& geometryColumnNames_, const std::vector<std::vector<std::string> >& queryColumnNames_, const std::string& projection_, const double minX_, const double maxX_, const double minY_, const double maxY_, const int32_t width_, const int32_t height_, const int32_t x_, const int32_t y_, const int32_t radius_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            xColumnNames( xColumnNames_ ),
            yColumnNames( yColumnNames_ ),
            geometryColumnNames( geometryColumnNames_ ),
            queryColumnNames( queryColumnNames_ ),
            projection( projection_ ),
            minX( minX_ ),
            maxX( maxX_ ),
            minY( minY_ ),
            maxY( maxY_ ),
            width( width_ ),
            height( height_ ),
            x( x_ ),
            y( y_ ),
            radius( radius_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        std::vector<std::string> tableNames;
        std::vector<std::string> xColumnNames;
        std::vector<std::string> yColumnNames;
        std::vector<std::string> geometryColumnNames;
        std::vector<std::vector<std::string> > queryColumnNames;
        std::string projection;
        double minX;
        double maxX;
        double minY;
        double maxY;
        int32_t width;
        int32_t height;
        int32_t x;
        int32_t y;
        int32_t radius;
        int64_t limit;
        std::string encoding;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeGetFeatureInfoRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeGetFeatureInfoRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.xColumnNames);
            ::avro::encode(e, v.yColumnNames);
            ::avro::encode(e, v.geometryColumnNames);
            ::avro::encode(e, v.queryColumnNames);
            ::avro::encode(e, v.projection);
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.x);
            ::avro::encode(e, v.y);
            ::avro::encode(e, v.radius);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeGetFeatureInfoRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.xColumnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.yColumnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.geometryColumnNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.queryColumnNames);
                            break;

                        case 5:
                            ::avro::decode(d, v.projection);
                            break;

                        case 6:
                            ::avro::decode(d, v.minX);
                            break;

                        case 7:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 8:
                            ::avro::decode(d, v.minY);
                            break;

                        case 9:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 10:
                            ::avro::decode(d, v.width);
                            break;

                        case 11:
                            ::avro::decode(d, v.height);
                            break;

                        case 12:
                            ::avro::decode(d, v.x);
                            break;

                        case 13:
                            ::avro::decode(d, v.y);
                            break;

                        case 14:
                            ::avro::decode(d, v.radius);
                            break;

                        case 15:
                            ::avro::decode(d, v.limit);
                            break;

                        case 16:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 17:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.xColumnNames);
                ::avro::decode(d, v.yColumnNames);
                ::avro::decode(d, v.geometryColumnNames);
                ::avro::decode(d, v.queryColumnNames);
                ::avro::decode(d, v.projection);
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.x);
                ::avro::decode(d, v.y);
                ::avro::decode(d, v.radius);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #visualizeGetFeatureInfo(const VisualizeGetFeatureInfoRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeGetFeatureInfoResponse
    {

        /**
         * @private
         * Constructs a VisualizeGetFeatureInfoResponse object with default
         * parameter values.
         */
        VisualizeGetFeatureInfoResponse() :
            tableNames(std::vector<std::string>()),
            typeSchemas(std::vector<std::string>()),
            recordsBinary(std::vector<std::vector<uint8_t> >()),
            recordsJson(std::vector<std::string>()),
            geojsonEncodedResponse(std::string()),
            textEncodedResponse(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> tableNames;
        std::vector<std::string> typeSchemas;
        std::vector<std::vector<uint8_t> > recordsBinary;
        std::vector<std::string> recordsJson;
        std::string geojsonEncodedResponse;
        std::string textEncodedResponse;
        std::map<std::string, std::string> info;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeGetFeatureInfoResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeGetFeatureInfoResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.typeSchemas);
            ::avro::encode(e, v.recordsBinary);
            ::avro::encode(e, v.recordsJson);
            ::avro::encode(e, v.geojsonEncodedResponse);
            ::avro::encode(e, v.textEncodedResponse);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::VisualizeGetFeatureInfoResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeSchemas);
                            break;

                        case 2:
                            ::avro::decode(d, v.recordsBinary);
                            break;

                        case 3:
                            ::avro::decode(d, v.recordsJson);
                            break;

                        case 4:
                            ::avro::decode(d, v.geojsonEncodedResponse);
                            break;

                        case 5:
                            ::avro::decode(d, v.textEncodedResponse);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.typeSchemas);
                ::avro::decode(d, v.recordsBinary);
                ::avro::decode(d, v.recordsJson);
                ::avro::decode(d, v.geojsonEncodedResponse);
                ::avro::decode(d, v.textEncodedResponse);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
