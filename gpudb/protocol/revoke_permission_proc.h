/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __REVOKE_PERMISSION_PROC_H__
#define __REVOKE_PERMISSION_PROC_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #revokePermissionProc(const RevokePermissionProcRequest&) const}.
     * <p>
     * Revokes a proc-level permission from a user or role.
     */
    struct RevokePermissionProcRequest
    {

        /**
         * Constructs a RevokePermissionProcRequest object with default
         * parameter values.
         */
        RevokePermissionProcRequest() :
            name(std::string()),
            permission(std::string()),
            procName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RevokePermissionProcRequest object with the specified
         * parameters.
         * 
         * @param[in] name_  Name of the user or role from which the permission
         *                   will be revoked. Must be an existing user or role.
         * @param[in] permission_  Permission to revoke from the user or role.
         *                         <ul>
         *                                 <li>
         *                         gpudb::revoke_permission_proc_proc_admin:
         *                         Admin access to the proc.
         *                                 <li>
         *                         gpudb::revoke_permission_proc_proc_execute:
         *                         Execute access to the proc.
         *                         </ul>
         * @param[in] procName_  Name of the proc to which the permission
         *                       grants access. Must be an existing proc, or an
         *                       empty string if the permission grants access
         *                       to all procs.
         * @param[in] options_  Optional parameters.
         * 
         */
        RevokePermissionProcRequest(const std::string& name_, const std::string& permission_, const std::string& procName_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            permission( permission_ ),
            procName( procName_ ),
            options( options_ )
        {
        }

        std::string name;
        std::string permission;
        std::string procName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionProcRequest>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionProcRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.permission);
                            break;

                        case 2:
                            ::avro::decode(d, v.procName);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #revokePermissionProc(const RevokePermissionProcRequest&) const}.
     * <p>
     * Revokes a proc-level permission from a user or role.
     */
    struct RevokePermissionProcResponse
    {

        /**
         * Constructs a RevokePermissionProcResponse object with default
         * parameter values.
         */
        RevokePermissionProcResponse() :
            name(std::string()),
            permission(std::string()),
            procName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string name;
        std::string permission;
        std::string procName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionProcResponse>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionProcResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.permission);
                            break;

                        case 2:
                            ::avro::decode(d, v.procName);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
