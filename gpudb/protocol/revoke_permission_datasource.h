/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __REVOKE_PERMISSION_DATASOURCE_H__
#define __REVOKE_PERMISSION_DATASOURCE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::revokePermissionDatasource(const RevokePermissionDatasourceRequest&) const
     * "GPUdb::revokePermissionDatasource".
     *
     * Revokes a <a href="../../../concepts/data_sources/" target="_top">data
     * source</a> permission from a user or role.
     */
    struct RevokePermissionDatasourceRequest
    {
        /**
         * Constructs a RevokePermissionDatasourceRequest object with default
         * parameters.
         */
        RevokePermissionDatasourceRequest() :
            name(std::string()),
            permission(std::string()),
            datasourceName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RevokePermissionDatasourceRequest object with the
         * specified parameters.
         *
         * @param[in] name_  Name of the user or role from which the permission
         *                   will be revoked. Must be an existing user or role.
         * @param[in] permission_  Permission to revoke from the user or role.
         *                         Supported values:
         *                         <ul>
         *                             <li>@ref
         *                                 gpudb::revoke_permission_datasource_admin
         *                                 "revoke_permission_datasource_admin":
         *                                 Admin access on the given data
         *                                 source
         *                             <li>@ref
         *                                 gpudb::revoke_permission_datasource_connect
         *                                 "revoke_permission_datasource_connect":
         *                                 Connect access on the given data
         *                                 source
         *                         </ul>
         * @param[in] datasourceName_  Name of the data source on which the
         *                             permission will be revoked. Must be an
         *                             existing data source, or an empty string
         *                             to revoke permission from all data
         *                             sources.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        RevokePermissionDatasourceRequest(const std::string& name_, const std::string& permission_, const std::string& datasourceName_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            permission( permission_ ),
            datasourceName( datasourceName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the user or role from which the permission will be revoked.
         * Must be an existing user or role.
         */
        std::string name;

        /**
         * Permission to revoke from the user or role.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::revoke_permission_datasource_admin
         *         "revoke_permission_datasource_admin": Admin access on the
         *         given data source
         *     <li>@ref gpudb::revoke_permission_datasource_connect
         *         "revoke_permission_datasource_connect": Connect access on
         *         the given data source
         * </ul>
         */
        std::string permission;

        /**
         * Name of the data source on which the permission will be revoked.
         * Must be an existing data source, or an empty string to revoke
         * permission from all data sources.
         */
        std::string datasourceName;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionDatasourceRequest>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionDatasourceRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.datasourceName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionDatasourceRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.permission);
                            break;

                        case 2:
                            ::avro::decode(d, v.datasourceName);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.datasourceName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::revokePermissionDatasource(const RevokePermissionDatasourceRequest&) const
     * "GPUdb::revokePermissionDatasource".
     */
    struct RevokePermissionDatasourceResponse
    {
        /**
         * Constructs a RevokePermissionDatasourceResponse object with default
         * parameters.
         */
        RevokePermissionDatasourceResponse() :
            name(std::string()),
            permission(std::string()),
            datasourceName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::RevokePermissionDatasourceRequest::name "name".
         */
        std::string name;

        /**
         * Value of @ref gpudb::RevokePermissionDatasourceRequest::permission
         * "permission".
         */
        std::string permission;

        /**
         * Value of @ref
         * gpudb::RevokePermissionDatasourceRequest::datasourceName
         * "datasourceName".
         */
        std::string datasourceName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionDatasourceResponse>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionDatasourceResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.datasourceName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionDatasourceResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.permission);
                            break;

                        case 2:
                            ::avro::decode(d, v.datasourceName);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.datasourceName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __REVOKE_PERMISSION_DATASOURCE_H__
