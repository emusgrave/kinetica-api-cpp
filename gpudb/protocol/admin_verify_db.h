/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_VERIFY_DB_H__
#define __ADMIN_VERIFY_DB_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminVerifyDb(const AdminVerifyDbRequest&) const}.
     * <p>
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     */
    struct AdminVerifyDbRequest
    {

        /**
         * Constructs an AdminVerifyDbRequest object with default parameter
         * values.
         */
        AdminVerifyDbRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminVerifyDbRequest object with the specified
         * parameters.
         * 
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::admin_verify_db_rebuild_on_error:
         *                      [DEPRECATED -- Use the Rebuild DB feature of
         *                      GAdmin instead.]
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                              <li>
         *                      gpudb::admin_verify_db_verify_nulls: When @a
         *                      true, verifies that null values are set to zero
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                              <li>
         *                      gpudb::admin_verify_db_verify_persist: When @a
         *                      true, persistent objects will be compared
         *                      against their state in memory and workers will
         *                      be checked for orphaned table data in persist.
         *                      To check for orphaned worker data, either set
         *                      @a concurrent_safe in @a options to @a true or
         *                      place the database offline.
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                              <li>
         *                      gpudb::admin_verify_db_concurrent_safe: When @a
         *                      true, allows this endpoint to be run safely
         *                      with other concurrent database operations.
         *                      Other operations may be slower while this is
         *                      running.
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_true.
         *                              <li>
         *                      gpudb::admin_verify_db_verify_rank0: If @a
         *                      true, compare rank0 table metadata against
         *                      workers' metadata
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                              <li>
         *                      gpudb::admin_verify_db_delete_orphaned_tables:
         *                      If @a true, orphaned table directories found on
         *                      workers for which there is no corresponding
         *                      metadata will be deleted. Must set @a
         *                      verify_persist in @a options to @a true. It is
         *                      recommended to run this while the database is
         *                      offline OR set @a concurrent_safe in @a options
         *                      to @a true
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                              <li>
         *                      gpudb::admin_verify_db_verify_orphaned_tables_only:
         *                      If @a true, only the presence of orphaned table
         *                      directories will be checked, all persistence
         *                      checks will be skipped
         *                      <ul>
         *                              <li> gpudb::admin_verify_db_true
         *                              <li> gpudb::admin_verify_db_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_verify_db_false.
         *                      </ul>
         * 
         */
        AdminVerifyDbRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminVerifyDb(const AdminVerifyDbRequest&) const}.
     * <p>
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     */
    struct AdminVerifyDbResponse
    {

        /**
         * Constructs an AdminVerifyDbResponse object with default parameter
         * values.
         */
        AdminVerifyDbResponse() :
            verifiedOk(bool()),
            errorList(std::vector<std::string>()),
            orphanedTablesTotalSize(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        bool verifiedOk;
        std::vector<std::string> errorList;
        int64_t orphanedTablesTotalSize;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbResponse& v)
        {
            ::avro::encode(e, v.verifiedOk);
            ::avro::encode(e, v.errorList);
            ::avro::encode(e, v.orphanedTablesTotalSize);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.verifiedOk);
                            break;

                        case 1:
                            ::avro::decode(d, v.errorList);
                            break;

                        case 2:
                            ::avro::decode(d, v.orphanedTablesTotalSize);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.verifiedOk);
                ::avro::decode(d, v.errorList);
                ::avro::decode(d, v.orphanedTablesTotalSize);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
