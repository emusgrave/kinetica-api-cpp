/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_VERIFY_DB_H__
#define __ADMIN_VERIFY_DB_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminVerifyDb(const AdminVerifyDbRequest&) const
     * "GPUdb::adminVerifyDb".
     *
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     */
    struct AdminVerifyDbRequest
    {
        /**
         * Constructs an AdminVerifyDbRequest object with default parameters.
         */
        AdminVerifyDbRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminVerifyDbRequest object with the specified
         * parameters.
         *
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::admin_verify_db_rebuild_on_error
         *                              "admin_verify_db_rebuild_on_error":
         *                              [DEPRECATED -- Use the Rebuild DB
         *                              feature of GAdmin instead.].
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_verify_nulls
         *                              "admin_verify_db_verify_nulls": When
         *                              @ref gpudb::admin_verify_db_true
         *                              "true", verifies that null values are
         *                              set to zero.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_verify_persist
         *                              "admin_verify_db_verify_persist": When
         *                              @ref gpudb::admin_verify_db_true
         *                              "true", persistent objects will be
         *                              compared against their state in memory
         *                              and workers will be checked for
         *                              orphaned table data in persist. To
         *                              check for orphaned worker data, either
         *                              set @ref
         *                              gpudb::admin_verify_db_concurrent_safe
         *                              "concurrent_safe" in @a options_ to
         *                              @ref gpudb::admin_verify_db_true "true"
         *                              or place the database offline.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_concurrent_safe
         *                              "admin_verify_db_concurrent_safe": When
         *                              @ref gpudb::admin_verify_db_true
         *                              "true", allows this endpoint to be run
         *                              safely with other concurrent database
         *                              operations. Other operations may be
         *                              slower while this is running.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_true
         *                              "admin_verify_db_true".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_verify_rank0
         *                              "admin_verify_db_verify_rank0": If @ref
         *                              gpudb::admin_verify_db_true "true",
         *                              compare rank0 table metadata against
         *                              workers' metadata.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_delete_orphaned_tables
         *                              "admin_verify_db_delete_orphaned_tables":
         *                              If @ref gpudb::admin_verify_db_true
         *                              "true", orphaned table directories
         *                              found on workers for which there is no
         *                              corresponding metadata will be deleted.
         *                              Must set @ref
         *                              gpudb::admin_verify_db_verify_persist
         *                              "verify_persist" in @a options_ to @ref
         *                              gpudb::admin_verify_db_true "true". It
         *                              is recommended to run this while the
         *                              database is offline OR set @ref
         *                              gpudb::admin_verify_db_concurrent_safe
         *                              "concurrent_safe" in @a options_ to
         *                              @ref gpudb::admin_verify_db_true
         *                              "true".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                          <li>@ref
         *                              gpudb::admin_verify_db_verify_orphaned_tables_only
         *                              "admin_verify_db_verify_orphaned_tables_only":
         *                              If @ref gpudb::admin_verify_db_true
         *                              "true", only the presence of orphaned
         *                              table directories will be checked, all
         *                              persistence checks will be skipped.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_true
         *                                      "admin_verify_db_true"
         *                                  <li>@ref
         *                                      gpudb::admin_verify_db_false
         *                                      "admin_verify_db_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::admin_verify_db_false
         *                              "admin_verify_db_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AdminVerifyDbRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::admin_verify_db_rebuild_on_error
         *         "admin_verify_db_rebuild_on_error": [DEPRECATED -- Use the
         *         Rebuild DB feature of GAdmin instead.].
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         *     <li>@ref gpudb::admin_verify_db_verify_nulls
         *         "admin_verify_db_verify_nulls": When @ref
         *         gpudb::admin_verify_db_true "true", verifies that null
         *         values are set to zero.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         *     <li>@ref gpudb::admin_verify_db_verify_persist
         *         "admin_verify_db_verify_persist": When @ref
         *         gpudb::admin_verify_db_true "true", persistent objects will
         *         be compared against their state in memory and workers will
         *         be checked for orphaned table data in persist. To check for
         *         orphaned worker data, either set @ref
         *         gpudb::admin_verify_db_concurrent_safe "concurrent_safe" in
         *         @ref options to @ref gpudb::admin_verify_db_true "true" or
         *         place the database offline.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         *     <li>@ref gpudb::admin_verify_db_concurrent_safe
         *         "admin_verify_db_concurrent_safe": When @ref
         *         gpudb::admin_verify_db_true "true", allows this endpoint to
         *         be run safely with other concurrent database operations.
         *         Other operations may be slower while this is running.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_true
         *         "admin_verify_db_true".
         *     <li>@ref gpudb::admin_verify_db_verify_rank0
         *         "admin_verify_db_verify_rank0": If @ref
         *         gpudb::admin_verify_db_true "true", compare rank0 table
         *         metadata against workers' metadata.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         *     <li>@ref gpudb::admin_verify_db_delete_orphaned_tables
         *         "admin_verify_db_delete_orphaned_tables": If @ref
         *         gpudb::admin_verify_db_true "true", orphaned table
         *         directories found on workers for which there is no
         *         corresponding metadata will be deleted. Must set @ref
         *         gpudb::admin_verify_db_verify_persist "verify_persist" in
         *         @ref options to @ref gpudb::admin_verify_db_true "true". It
         *         is recommended to run this while the database is offline OR
         *         set @ref gpudb::admin_verify_db_concurrent_safe
         *         "concurrent_safe" in @ref options to @ref
         *         gpudb::admin_verify_db_true "true".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         *     <li>@ref gpudb::admin_verify_db_verify_orphaned_tables_only
         *         "admin_verify_db_verify_orphaned_tables_only": If @ref
         *         gpudb::admin_verify_db_true "true", only the presence of
         *         orphaned table directories will be checked, all persistence
         *         checks will be skipped.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::admin_verify_db_true
         *                 "admin_verify_db_true"
         *             <li>@ref gpudb::admin_verify_db_false
         *                 "admin_verify_db_false"
         *         </ul>
         *         The default value is @ref gpudb::admin_verify_db_false
         *         "admin_verify_db_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminVerifyDb(const AdminVerifyDbRequest&) const
     * "GPUdb::adminVerifyDb".
     */
    struct AdminVerifyDbResponse
    {
        /**
         * Constructs an AdminVerifyDbResponse object with default parameters.
         */
        AdminVerifyDbResponse() :
            verifiedOk(bool()),
            errorList(std::vector<std::string>()),
            orphanedTablesTotalSize(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * True if no errors were found, false otherwise. The default value is
         * false.
         */
        bool verifiedOk;

        /**
         * List of errors found while validating the database internal state.
         * The default value is an empty vector.
         */
        std::vector<std::string> errorList;

        /**
         * If @ref gpudb::admin_verify_db_verify_persist "verify_persist" is
         * @ref gpudb::admin_verify_db_true "true", @ref
         * gpudb::admin_verify_db_verify_orphaned_tables_only
         * "verify_orphaned_tables_only" is @ref gpudb::admin_verify_db_true
         * "true" or @ref gpudb::admin_verify_db_delete_orphaned_tables
         * "delete_orphaned_tables" is @ref gpudb::admin_verify_db_true "true",
         * this is the sum in bytes of all orphaned tables found.  Otherwise,
         * -1.
         */
        int64_t orphanedTablesTotalSize;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbResponse& v)
        {
            ::avro::encode(e, v.verifiedOk);
            ::avro::encode(e, v.errorList);
            ::avro::encode(e, v.orphanedTablesTotalSize);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.verifiedOk);
                            break;

                        case 1:
                            ::avro::decode(d, v.errorList);
                            break;

                        case 2:
                            ::avro::decode(d, v.orphanedTablesTotalSize);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.verifiedOk);
                ::avro::decode(d, v.errorList);
                ::avro::decode(d, v.orphanedTablesTotalSize);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_VERIFY_DB_H__
