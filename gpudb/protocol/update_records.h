/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __UPDATE_RECORDS_H__
#define __UPDATE_RECORDS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::updateRecordsRaw(const RawUpdateRecordsRequest&) const
     * "GPUdb::updateRecordsRaw".
     *
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in @ref newValuesMaps.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     *
     * Note that this operation can only be run on an original table and not on
     * a result view.
     *
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through @ref options.
     *
     * The @ref gpudb::update_records_update_on_existing_pk
     * "update_on_existing_pk" option specifies the record primary key
     * collision policy for tables with a <a
     * href="../../../concepts/tables/#primary-keys" target="_top">primary
     * key</a>, while @ref gpudb::update_records_ignore_existing_pk
     * "ignore_existing_pk" specifies the record primary key collision
     * error-suppression policy when those collisions result in the update
     * being rejected.  Both are ignored on tables with no primary key.
     */
    struct RawUpdateRecordsRequest
    {
        /**
         * Constructs a RawUpdateRecordsRequest object with default parameters.
         */
        RawUpdateRecordsRequest() :
            tableName(std::string()),
            expressions(std::vector<std::string>()),
            newValuesMaps(std::vector<std::map<std::string, boost::optional<std::string> > >()),
            recordsToInsert(std::vector<std::vector<uint8_t> >()),
            recordsToInsertStr(std::vector<std::string>()),
            recordEncoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RawUpdateRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to be updated, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be a currently existing table and not a
         *                        view.
         * @param[in] expressions_  A list of the actual predicates, one for
         *                          each update; format should follow the
         *                          guidelines @ref
         *                          GPUdb::filter(const FilterRequest&) const
         *                          "here".
         * @param[in] newValuesMaps_  List of new values for the matching
         *                            records.  Each element is a map with
         *                            (key, value) pairs where the keys are the
         *                            names of the columns whose values are to
         *                            be updated; the values are the new
         *                            values.  The number of elements in the
         *                            list should match the length of @a
         *                            expressions_.
         * @param[in] recordsToInsert_  An *optional* list of new binary-avro
         *                              encoded records to insert, one for each
         *                              update.  If one of @a expressions_ does
         *                              not yield a matching record to be
         *                              updated, then the corresponding element
         *                              from this list will be added to the
         *                              table. The default value is an empty
         *                              vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::update_records_global_expression
         *                              "update_records_global_expression": An
         *                              optional global expression to reduce
         *                              the search space of the predicates
         *                              listed in @a expressions_. The default
         *                              value is ''.
         *                          <li>@ref
         *                              gpudb::update_records_bypass_safety_checks
         *                              "update_records_bypass_safety_checks":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              predicates are available for primary
         *                              key updates.  Keep in mind that it is
         *                              possible to destroy data in this case,
         *                              since a single predicate may match
         *                              multiple objects (potentially all of
         *                              records of a table), and then updating
         *                              all of those records to have the same
         *                              primary key will, due to the primary
         *                              key uniqueness constraints, effectively
         *                              delete all but one of those updated
         *                              records.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for updating a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>.  There
         *                              are two ways that a record collision
         *                              can occur.  The first is an "update
         *                              collision", which happens when the
         *                              update changes the value of the updated
         *                              record's primary key, and that new
         *                              primary key already exists as the
         *                              primary key of another record in the
         *                              table.  The second is an "insert
         *                              collision", which occurs when a given
         *                              filter in @a expressions_ finds no
         *                              records to update, and the alternate
         *                              insert record given in @a
         *                              recordsToInsert_ (or @a
         *                              recordsToInsertStr_) contains a primary
         *                              key matching that of an existing record
         *                              in the table.  If @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is set to @ref
         *                              gpudb::update_records_true "true",
         *                              "update collisions" will result in the
         *                              existing record collided into being
         *                              removed and the record updated with
         *                              values specified in @a newValuesMaps_
         *                              taking its place; "insert collisions"
         *                              will result in the collided-into record
         *                              being updated with the values in @a
         *                              recordsToInsert_/@a recordsToInsertStr_
         *                              (if given).  If set to @ref
         *                              gpudb::update_records_false "false",
         *                              the existing collided-into record will
         *                              remain unchanged, while the update will
         *                              be rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "ignore_existing_pk".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true":
         *                                      Overwrite the collided-into
         *                                      record when updating a record's
         *                                      primary key or inserting an
         *                                      alternate record causes a
         *                                      primary key collision between
         *                                      the record being
         *                                      updated/inserted and another
         *                                      existing record in the table
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Reject
         *                                      updates which cause primary key
         *                                      collisions between the record
         *                                      being updated/inserted and an
         *                                      existing record in the table
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "update_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for updating a
         *                              table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when primary key record collisions
         *                              are rejected (@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_false "false").
         *                              If set to @ref
         *                              gpudb::update_records_true "true", any
         *                              record update that is rejected for
         *                              resulting in a primary key collision
         *                              with an existing table record will be
         *                              ignored with no error generated.  If
         *                              @ref gpudb::update_records_false
         *                              "false", the rejection of any update
         *                              for resulting in a primary key
         *                              collision will cause an error to be
         *                              reported.  If the specified table does
         *                              not have a primary key or if @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_true "true", then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true": Ignore
         *                                      updates that result in primary
         *                                      key collisions with existing
         *                                      records
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Treat
         *                                      as errors any updates that
         *                                      result in primary key
         *                                      collisions with existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_partition
         *                              "update_records_update_partition":
         *                              Force qualifying records to be deleted
         *                              and reinserted so their partition
         *                              membership will be reevaluated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_truncate_strings
         *                              "update_records_truncate_strings": If
         *                              set to @ref gpudb::update_records_true
         *                              "true", any strings which are too long
         *                              for their charN string fields will be
         *                              truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_use_expressions_in_new_values_maps
         *                              "update_records_use_expressions_in_new_values_maps":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              new values in @a newValuesMaps_ are
         *                              considered as expression values. When
         *                              set to @ref gpudb::update_records_false
         *                              "false", all new values in @a
         *                              newValuesMaps_ are considered as
         *                              constants.  NOTE:  When @ref
         *                              gpudb::update_records_true "true",
         *                              string constants will need to be quoted
         *                              to avoid being evaluated as
         *                              expressions.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref gpudb::update_records_record_id
         *                              "update_records_record_id": ID of a
         *                              single record to be updated (returned
         *                              in the call to @ref
         *                              GPUdb::insertRecordsRaw(const RawInsertRecordsRequest&) const
         *                              "GPUdb::insertRecordsRaw" or @ref
         *                              GPUdb::getRecordsFromCollectionRaw(const GetRecordsFromCollectionRequest&) const
         *                              "GPUdb::getRecordsFromCollectionRaw").
         *                      </ul>
         *                      The default value is an empty map.
         */
        RawUpdateRecordsRequest(const std::string& tableName_, const std::vector<std::string>& expressions_, const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps_, const std::vector<std::vector<uint8_t> >& recordsToInsert_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            expressions( expressions_ ),
            newValuesMaps( newValuesMaps_ ),
            recordsToInsert( recordsToInsert_ ),
            recordsToInsertStr( std::vector<std::string>() ),
            recordEncoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs a RawUpdateRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to be updated, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be a currently existing table and not a
         *                        view.
         * @param[in] expressions_  A list of the actual predicates, one for
         *                          each update; format should follow the
         *                          guidelines @ref
         *                          GPUdb::filter(const FilterRequest&) const
         *                          "here".
         * @param[in] newValuesMaps_  List of new values for the matching
         *                            records.  Each element is a map with
         *                            (key, value) pairs where the keys are the
         *                            names of the columns whose values are to
         *                            be updated; the values are the new
         *                            values.  The number of elements in the
         *                            list should match the length of @a
         *                            expressions_.
         * @param[in] recordsToInsert_  An *optional* list of new binary-avro
         *                              encoded records to insert, one for each
         *                              update.  If one of @a expressions_ does
         *                              not yield a matching record to be
         *                              updated, then the corresponding element
         *                              from this list will be added to the
         *                              table. The default value is an empty
         *                              vector.
         * @param[in] recordsToInsertStr_  An optional list of JSON encoded
         *                                 objects to insert, one for each
         *                                 update, to be added if the
         *                                 particular update did not match any
         *                                 objects. The default value is an
         *                                 empty vector.
         * @param[in] recordEncoding_  Identifies which of @a recordsToInsert_
         *                             and @a recordsToInsertStr_ should be
         *                             used.
         *                             Supported values:
         *                             <ul>
         *                                 <li>@ref
         *                                     gpudb::update_records_binary
         *                                     "update_records_binary"
         *                                 <li>@ref gpudb::update_records_json
         *                                     "update_records_json"
         *                             </ul>
         *                             The default value is @ref
         *                             gpudb::update_records_binary
         *                             "update_records_binary".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::update_records_global_expression
         *                              "update_records_global_expression": An
         *                              optional global expression to reduce
         *                              the search space of the predicates
         *                              listed in @a expressions_. The default
         *                              value is ''.
         *                          <li>@ref
         *                              gpudb::update_records_bypass_safety_checks
         *                              "update_records_bypass_safety_checks":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              predicates are available for primary
         *                              key updates.  Keep in mind that it is
         *                              possible to destroy data in this case,
         *                              since a single predicate may match
         *                              multiple objects (potentially all of
         *                              records of a table), and then updating
         *                              all of those records to have the same
         *                              primary key will, due to the primary
         *                              key uniqueness constraints, effectively
         *                              delete all but one of those updated
         *                              records.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for updating a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>.  There
         *                              are two ways that a record collision
         *                              can occur.  The first is an "update
         *                              collision", which happens when the
         *                              update changes the value of the updated
         *                              record's primary key, and that new
         *                              primary key already exists as the
         *                              primary key of another record in the
         *                              table.  The second is an "insert
         *                              collision", which occurs when a given
         *                              filter in @a expressions_ finds no
         *                              records to update, and the alternate
         *                              insert record given in @a
         *                              recordsToInsert_ (or @a
         *                              recordsToInsertStr_) contains a primary
         *                              key matching that of an existing record
         *                              in the table.  If @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is set to @ref
         *                              gpudb::update_records_true "true",
         *                              "update collisions" will result in the
         *                              existing record collided into being
         *                              removed and the record updated with
         *                              values specified in @a newValuesMaps_
         *                              taking its place; "insert collisions"
         *                              will result in the collided-into record
         *                              being updated with the values in @a
         *                              recordsToInsert_/@a recordsToInsertStr_
         *                              (if given).  If set to @ref
         *                              gpudb::update_records_false "false",
         *                              the existing collided-into record will
         *                              remain unchanged, while the update will
         *                              be rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "ignore_existing_pk".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true":
         *                                      Overwrite the collided-into
         *                                      record when updating a record's
         *                                      primary key or inserting an
         *                                      alternate record causes a
         *                                      primary key collision between
         *                                      the record being
         *                                      updated/inserted and another
         *                                      existing record in the table
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Reject
         *                                      updates which cause primary key
         *                                      collisions between the record
         *                                      being updated/inserted and an
         *                                      existing record in the table
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "update_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for updating a
         *                              table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when primary key record collisions
         *                              are rejected (@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_false "false").
         *                              If set to @ref
         *                              gpudb::update_records_true "true", any
         *                              record update that is rejected for
         *                              resulting in a primary key collision
         *                              with an existing table record will be
         *                              ignored with no error generated.  If
         *                              @ref gpudb::update_records_false
         *                              "false", the rejection of any update
         *                              for resulting in a primary key
         *                              collision will cause an error to be
         *                              reported.  If the specified table does
         *                              not have a primary key or if @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_true "true", then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true": Ignore
         *                                      updates that result in primary
         *                                      key collisions with existing
         *                                      records
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Treat
         *                                      as errors any updates that
         *                                      result in primary key
         *                                      collisions with existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_partition
         *                              "update_records_update_partition":
         *                              Force qualifying records to be deleted
         *                              and reinserted so their partition
         *                              membership will be reevaluated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_truncate_strings
         *                              "update_records_truncate_strings": If
         *                              set to @ref gpudb::update_records_true
         *                              "true", any strings which are too long
         *                              for their charN string fields will be
         *                              truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_use_expressions_in_new_values_maps
         *                              "update_records_use_expressions_in_new_values_maps":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              new values in @a newValuesMaps_ are
         *                              considered as expression values. When
         *                              set to @ref gpudb::update_records_false
         *                              "false", all new values in @a
         *                              newValuesMaps_ are considered as
         *                              constants.  NOTE:  When @ref
         *                              gpudb::update_records_true "true",
         *                              string constants will need to be quoted
         *                              to avoid being evaluated as
         *                              expressions.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref gpudb::update_records_record_id
         *                              "update_records_record_id": ID of a
         *                              single record to be updated (returned
         *                              in the call to @ref
         *                              GPUdb::insertRecordsRaw(const RawInsertRecordsRequest&) const
         *                              "GPUdb::insertRecordsRaw" or @ref
         *                              GPUdb::getRecordsFromCollectionRaw(const GetRecordsFromCollectionRequest&) const
         *                              "GPUdb::getRecordsFromCollectionRaw").
         *                      </ul>
         *                      The default value is an empty map.
         */
        RawUpdateRecordsRequest(const std::string& tableName_, const std::vector<std::string>& expressions_, const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps_, const std::vector<std::vector<uint8_t> >& recordsToInsert_, const std::vector<std::string>& recordsToInsertStr_, const std::string& recordEncoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            expressions( expressions_ ),
            newValuesMaps( newValuesMaps_ ),
            recordsToInsert( recordsToInsert_ ),
            recordsToInsertStr( recordsToInsertStr_ ),
            recordEncoding( recordEncoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of table to be updated, in [ schema_name.\ ]table_name format,
         * using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be a currently
         * existing table and not a view.
         */
        std::string tableName;

        /**
         * A list of the actual predicates, one for each update; format should
         * follow the guidelines @ref GPUdb::filter(const FilterRequest&) const
         * "here".
         */
        std::vector<std::string> expressions;

        /**
         * List of new values for the matching records.  Each element is a map
         * with (key, value) pairs where the keys are the names of the columns
         * whose values are to be updated; the values are the new values.  The
         * number of elements in the list should match the length of @ref
         * expressions.
         */
        std::vector<std::map<std::string, boost::optional<std::string> > > newValuesMaps;

        /**
         * An *optional* list of new binary-avro encoded records to insert, one
         * for each update.  If one of @ref expressions does not yield a
         * matching record to be updated, then the corresponding element from
         * this list will be added to the table. The default value is an empty
         * vector.
         */
        std::vector<std::vector<uint8_t> > recordsToInsert;

        /**
         * An optional list of JSON encoded objects to insert, one for each
         * update, to be added if the particular update did not match any
         * objects. The default value is an empty vector.
         */
        std::vector<std::string> recordsToInsertStr;

        /**
         * Identifies which of @ref recordsToInsert and @ref recordsToInsertStr
         * should be used.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::update_records_binary "update_records_binary"
         *     <li>@ref gpudb::update_records_json "update_records_json"
         * </ul>
         * The default value is @ref gpudb::update_records_binary
         * "update_records_binary".
         */
        std::string recordEncoding;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::update_records_global_expression
         *         "update_records_global_expression": An optional global
         *         expression to reduce the search space of the predicates
         *         listed in @ref expressions. The default value is ''.
         *     <li>@ref gpudb::update_records_bypass_safety_checks
         *         "update_records_bypass_safety_checks": When set to @ref
         *         gpudb::update_records_true "true", all predicates are
         *         available for primary key updates.  Keep in mind that it is
         *         possible to destroy data in this case, since a single
         *         predicate may match multiple objects (potentially all of
         *         records of a table), and then updating all of those records
         *         to have the same primary key will, due to the primary key
         *         uniqueness constraints, effectively delete all but one of
         *         those updated records.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_update_on_existing_pk
         *         "update_records_update_on_existing_pk": Specifies the record
         *         collision policy for updating a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>.  There are two ways that a
         *         record collision can occur.  The first is an "update
         *         collision", which happens when the update changes the value
         *         of the updated record's primary key, and that new primary
         *         key already exists as the primary key of another record in
         *         the table.  The second is an "insert collision", which
         *         occurs when a given filter in @ref expressions finds no
         *         records to update, and the alternate insert record given in
         *         @ref recordsToInsert (or @ref recordsToInsertStr) contains a
         *         primary key matching that of an existing record in the
         *         table.  If @ref gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is set to @ref
         *         gpudb::update_records_true "true", "update collisions" will
         *         result in the existing record collided into being removed
         *         and the record updated with values specified in @ref
         *         newValuesMaps taking its place; "insert collisions" will
         *         result in the collided-into record being updated with the
         *         values in @ref recordsToInsert/@ref recordsToInsertStr (if
         *         given).  If set to @ref gpudb::update_records_false "false",
         *         the existing collided-into record will remain unchanged,
         *         while the update will be rejected and the error handled as
         *         determined by @ref gpudb::update_records_ignore_existing_pk
         *         "ignore_existing_pk".  If the specified table does not have
         *         a primary key, then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true": Overwrite the collided-into
         *                 record when updating a record's primary key or
         *                 inserting an alternate record causes a primary key
         *                 collision between the record being updated/inserted
         *                 and another existing record in the table
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false": Reject updates which cause
         *                 primary key collisions between the record being
         *                 updated/inserted and an existing record in the table
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_ignore_existing_pk
         *         "update_records_ignore_existing_pk": Specifies the record
         *         collision error-suppression policy for updating a table with
         *         a <a href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when primary key
         *         record collisions are rejected (@ref
         *         gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::update_records_false
         *         "false").  If set to @ref gpudb::update_records_true "true",
         *         any record update that is rejected for resulting in a
         *         primary key collision with an existing table record will be
         *         ignored with no error generated.  If @ref
         *         gpudb::update_records_false "false", the rejection of any
         *         update for resulting in a primary key collision will cause
         *         an error to be reported.  If the specified table does not
         *         have a primary key or if @ref
         *         gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::update_records_true
         *         "true", then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true": Ignore updates that result in
         *                 primary key collisions with existing records
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false": Treat as errors any updates
         *                 that result in primary key collisions with existing
         *                 records
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_update_partition
         *         "update_records_update_partition": Force qualifying records
         *         to be deleted and reinserted so their partition membership
         *         will be reevaluated.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_truncate_strings
         *         "update_records_truncate_strings": If set to @ref
         *         gpudb::update_records_true "true", any strings which are too
         *         long for their charN string fields will be truncated to fit.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref
         *         gpudb::update_records_use_expressions_in_new_values_maps
         *         "update_records_use_expressions_in_new_values_maps": When
         *         set to @ref gpudb::update_records_true "true", all new
         *         values in @ref newValuesMaps are considered as expression
         *         values. When set to @ref gpudb::update_records_false
         *         "false", all new values in @ref newValuesMaps are considered
         *         as constants.  NOTE:  When @ref gpudb::update_records_true
         *         "true", string constants will need to be quoted to avoid
         *         being evaluated as expressions.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_record_id
         *         "update_records_record_id": ID of a single record to be
         *         updated (returned in the call to @ref
         *         GPUdb::insertRecordsRaw(const RawInsertRecordsRequest&) const
         *         "GPUdb::insertRecordsRaw" or @ref
         *         GPUdb::getRecordsFromCollectionRaw(const GetRecordsFromCollectionRequest&) const
         *         "GPUdb::getRecordsFromCollectionRaw").
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawUpdateRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::RawUpdateRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.expressions);
            ::avro::encode(e, v.newValuesMaps);
            ::avro::encode(e, v.recordsToInsert);
            ::avro::encode(e, v.recordsToInsertStr);
            ::avro::encode(e, v.recordEncoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RawUpdateRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.expressions);
                            break;

                        case 2:
                            ::avro::decode(d, v.newValuesMaps);
                            break;

                        case 3:
                            ::avro::decode(d, v.recordsToInsert);
                            break;

                        case 4:
                            ::avro::decode(d, v.recordsToInsertStr);
                            break;

                        case 5:
                            ::avro::decode(d, v.recordEncoding);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.expressions);
                ::avro::decode(d, v.newValuesMaps);
                ::avro::decode(d, v.recordsToInsert);
                ::avro::decode(d, v.recordsToInsertStr);
                ::avro::decode(d, v.recordEncoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::updateRecords(const UpdateRecordsRequest<TRequest>&) const
     * "GPUdb::updateRecords".
     *
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in @ref newValuesMaps.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     *
     * Note that this operation can only be run on an original table and not on
     * a result view.
     *
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through @ref options.
     *
     * The @ref gpudb::update_records_update_on_existing_pk
     * "update_on_existing_pk" option specifies the record primary key
     * collision policy for tables with a <a
     * href="../../../concepts/tables/#primary-keys" target="_top">primary
     * key</a>, while @ref gpudb::update_records_ignore_existing_pk
     * "ignore_existing_pk" specifies the record primary key collision
     * error-suppression policy when those collisions result in the update
     * being rejected.  Both are ignored on tables with no primary key.
     *
     * @tparam T  The type of object being processed.
     *
     */
    template<typename T> struct UpdateRecordsRequest
    {
        /**
         * Constructs an UpdateRecordsRequest object with default parameters.
         */
        UpdateRecordsRequest() :
            tableName(std::string()),
            expressions(std::vector<std::string>()),
            newValuesMaps(std::vector<std::map<std::string, boost::optional<std::string> > >()),
            data(std::vector<T>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an UpdateRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to be updated, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be a currently existing table and not a
         *                        view.
         * @param[in] expressions_  A list of the actual predicates, one for
         *                          each update; format should follow the
         *                          guidelines @ref
         *                          GPUdb::filter(const FilterRequest&) const
         *                          "here".
         * @param[in] newValuesMaps_  List of new values for the matching
         *                            records.  Each element is a map with
         *                            (key, value) pairs where the keys are the
         *                            names of the columns whose values are to
         *                            be updated; the values are the new
         *                            values.  The number of elements in the
         *                            list should match the length of @a
         *                            expressions_.
         * @param[in] data_  An *optional* list of new binary-avro encoded
         *                   records to insert, one for each update.  If one of
         *                   @a expressions_ does not yield a matching record
         *                   to be updated, then the corresponding element from
         *                   this list will be added to the table. The default
         *                   value is an empty vector.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::update_records_global_expression
         *                              "update_records_global_expression": An
         *                              optional global expression to reduce
         *                              the search space of the predicates
         *                              listed in @a expressions_. The default
         *                              value is ''.
         *                          <li>@ref
         *                              gpudb::update_records_bypass_safety_checks
         *                              "update_records_bypass_safety_checks":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              predicates are available for primary
         *                              key updates.  Keep in mind that it is
         *                              possible to destroy data in this case,
         *                              since a single predicate may match
         *                              multiple objects (potentially all of
         *                              records of a table), and then updating
         *                              all of those records to have the same
         *                              primary key will, due to the primary
         *                              key uniqueness constraints, effectively
         *                              delete all but one of those updated
         *                              records.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for updating a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>.  There
         *                              are two ways that a record collision
         *                              can occur.  The first is an "update
         *                              collision", which happens when the
         *                              update changes the value of the updated
         *                              record's primary key, and that new
         *                              primary key already exists as the
         *                              primary key of another record in the
         *                              table.  The second is an "insert
         *                              collision", which occurs when a given
         *                              filter in @a expressions_ finds no
         *                              records to update, and the alternate
         *                              insert record given in @a data_ (or @a
         *                              recordsToInsertStr) contains a primary
         *                              key matching that of an existing record
         *                              in the table.  If @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is set to @ref
         *                              gpudb::update_records_true "true",
         *                              "update collisions" will result in the
         *                              existing record collided into being
         *                              removed and the record updated with
         *                              values specified in @a newValuesMaps_
         *                              taking its place; "insert collisions"
         *                              will result in the collided-into record
         *                              being updated with the values in @a
         *                              data_/@a recordsToInsertStr (if given).
         *                              If set to @ref
         *                              gpudb::update_records_false "false",
         *                              the existing collided-into record will
         *                              remain unchanged, while the update will
         *                              be rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "ignore_existing_pk".  If the specified
         *                              table does not have a primary key, then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true":
         *                                      Overwrite the collided-into
         *                                      record when updating a record's
         *                                      primary key or inserting an
         *                                      alternate record causes a
         *                                      primary key collision between
         *                                      the record being
         *                                      updated/inserted and another
         *                                      existing record in the table
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Reject
         *                                      updates which cause primary key
         *                                      collisions between the record
         *                                      being updated/inserted and an
         *                                      existing record in the table
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_ignore_existing_pk
         *                              "update_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for updating a
         *                              table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when primary key record collisions
         *                              are rejected (@ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_false "false").
         *                              If set to @ref
         *                              gpudb::update_records_true "true", any
         *                              record update that is rejected for
         *                              resulting in a primary key collision
         *                              with an existing table record will be
         *                              ignored with no error generated.  If
         *                              @ref gpudb::update_records_false
         *                              "false", the rejection of any update
         *                              for resulting in a primary key
         *                              collision will cause an error to be
         *                              reported.  If the specified table does
         *                              not have a primary key or if @ref
         *                              gpudb::update_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::update_records_true "true", then
         *                              this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true": Ignore
         *                                      updates that result in primary
         *                                      key collisions with existing
         *                                      records
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false": Treat
         *                                      as errors any updates that
         *                                      result in primary key
         *                                      collisions with existing
         *                                      records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_update_partition
         *                              "update_records_update_partition":
         *                              Force qualifying records to be deleted
         *                              and reinserted so their partition
         *                              membership will be reevaluated.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_truncate_strings
         *                              "update_records_truncate_strings": If
         *                              set to @ref gpudb::update_records_true
         *                              "true", any strings which are too long
         *                              for their charN string fields will be
         *                              truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref
         *                              gpudb::update_records_use_expressions_in_new_values_maps
         *                              "update_records_use_expressions_in_new_values_maps":
         *                              When set to @ref
         *                              gpudb::update_records_true "true", all
         *                              new values in @a newValuesMaps_ are
         *                              considered as expression values. When
         *                              set to @ref gpudb::update_records_false
         *                              "false", all new values in @a
         *                              newValuesMaps_ are considered as
         *                              constants.  NOTE:  When @ref
         *                              gpudb::update_records_true "true",
         *                              string constants will need to be quoted
         *                              to avoid being evaluated as
         *                              expressions.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::update_records_true
         *                                      "update_records_true"
         *                                  <li>@ref
         *                                      gpudb::update_records_false
         *                                      "update_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::update_records_false
         *                              "update_records_false".
         *                          <li>@ref gpudb::update_records_record_id
         *                              "update_records_record_id": ID of a
         *                              single record to be updated (returned
         *                              in the call to @ref
         *                              GPUdb::insertRecords(const InsertRecordsRequest<TRequest>&) const
         *                              "GPUdb::insertRecords" or @ref
         *                              GPUdb::getRecordsFromCollection(const GetRecordsFromCollectionRequest&) const
         *                              "GPUdb::getRecordsFromCollection").
         *                      </ul>
         *                      The default value is an empty map.
         */
        UpdateRecordsRequest(const std::string& tableName_, const std::vector<std::string>& expressions_, const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps_, const std::vector<T>& data_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            expressions( expressions_ ),
            newValuesMaps( newValuesMaps_ ),
            data( data_ ),
            options( options_ )
        {
        }

        /**
         * Name of table to be updated, in [ schema_name.\ ]table_name format,
         * using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be a currently
         * existing table and not a view.
         */
        std::string tableName;

        /**
         * A list of the actual predicates, one for each update; format should
         * follow the guidelines @ref GPUdb::filter(const FilterRequest&) const
         * "here".
         */
        std::vector<std::string> expressions;

        /**
         * List of new values for the matching records.  Each element is a map
         * with (key, value) pairs where the keys are the names of the columns
         * whose values are to be updated; the values are the new values.  The
         * number of elements in the list should match the length of @ref
         * expressions.
         */
        std::vector<std::map<std::string, boost::optional<std::string> > > newValuesMaps;

        /**
         * An *optional* list of new binary-avro encoded records to insert, one
         * for each update.  If one of @ref expressions does not yield a
         * matching record to be updated, then the corresponding element from
         * this list will be added to the table. The default value is an empty
         * vector.
         */
        std::vector<T> data;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::update_records_global_expression
         *         "update_records_global_expression": An optional global
         *         expression to reduce the search space of the predicates
         *         listed in @ref expressions. The default value is ''.
         *     <li>@ref gpudb::update_records_bypass_safety_checks
         *         "update_records_bypass_safety_checks": When set to @ref
         *         gpudb::update_records_true "true", all predicates are
         *         available for primary key updates.  Keep in mind that it is
         *         possible to destroy data in this case, since a single
         *         predicate may match multiple objects (potentially all of
         *         records of a table), and then updating all of those records
         *         to have the same primary key will, due to the primary key
         *         uniqueness constraints, effectively delete all but one of
         *         those updated records.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_update_on_existing_pk
         *         "update_records_update_on_existing_pk": Specifies the record
         *         collision policy for updating a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>.  There are two ways that a
         *         record collision can occur.  The first is an "update
         *         collision", which happens when the update changes the value
         *         of the updated record's primary key, and that new primary
         *         key already exists as the primary key of another record in
         *         the table.  The second is an "insert collision", which
         *         occurs when a given filter in @ref expressions finds no
         *         records to update, and the alternate insert record given in
         *         @ref data (or @a recordsToInsertStr) contains a primary key
         *         matching that of an existing record in the table.  If @ref
         *         gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is set to @ref
         *         gpudb::update_records_true "true", "update collisions" will
         *         result in the existing record collided into being removed
         *         and the record updated with values specified in @ref
         *         newValuesMaps taking its place; "insert collisions" will
         *         result in the collided-into record being updated with the
         *         values in @ref data/@a recordsToInsertStr (if given).  If
         *         set to @ref gpudb::update_records_false "false", the
         *         existing collided-into record will remain unchanged, while
         *         the update will be rejected and the error handled as
         *         determined by @ref gpudb::update_records_ignore_existing_pk
         *         "ignore_existing_pk".  If the specified table does not have
         *         a primary key, then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true": Overwrite the collided-into
         *                 record when updating a record's primary key or
         *                 inserting an alternate record causes a primary key
         *                 collision between the record being updated/inserted
         *                 and another existing record in the table
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false": Reject updates which cause
         *                 primary key collisions between the record being
         *                 updated/inserted and an existing record in the table
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_ignore_existing_pk
         *         "update_records_ignore_existing_pk": Specifies the record
         *         collision error-suppression policy for updating a table with
         *         a <a href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when primary key
         *         record collisions are rejected (@ref
         *         gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::update_records_false
         *         "false").  If set to @ref gpudb::update_records_true "true",
         *         any record update that is rejected for resulting in a
         *         primary key collision with an existing table record will be
         *         ignored with no error generated.  If @ref
         *         gpudb::update_records_false "false", the rejection of any
         *         update for resulting in a primary key collision will cause
         *         an error to be reported.  If the specified table does not
         *         have a primary key or if @ref
         *         gpudb::update_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::update_records_true
         *         "true", then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true": Ignore updates that result in
         *                 primary key collisions with existing records
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false": Treat as errors any updates
         *                 that result in primary key collisions with existing
         *                 records
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_update_partition
         *         "update_records_update_partition": Force qualifying records
         *         to be deleted and reinserted so their partition membership
         *         will be reevaluated.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_truncate_strings
         *         "update_records_truncate_strings": If set to @ref
         *         gpudb::update_records_true "true", any strings which are too
         *         long for their charN string fields will be truncated to fit.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref
         *         gpudb::update_records_use_expressions_in_new_values_maps
         *         "update_records_use_expressions_in_new_values_maps": When
         *         set to @ref gpudb::update_records_true "true", all new
         *         values in @ref newValuesMaps are considered as expression
         *         values. When set to @ref gpudb::update_records_false
         *         "false", all new values in @ref newValuesMaps are considered
         *         as constants.  NOTE:  When @ref gpudb::update_records_true
         *         "true", string constants will need to be quoted to avoid
         *         being evaluated as expressions.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::update_records_true
         *                 "update_records_true"
         *             <li>@ref gpudb::update_records_false
         *                 "update_records_false"
         *         </ul>
         *         The default value is @ref gpudb::update_records_false
         *         "update_records_false".
         *     <li>@ref gpudb::update_records_record_id
         *         "update_records_record_id": ID of a single record to be
         *         updated (returned in the call to @ref
         *         GPUdb::insertRecords(const InsertRecordsRequest<TRequest>&) const
         *         "GPUdb::insertRecords" or @ref
         *         GPUdb::getRecordsFromCollection(const GetRecordsFromCollectionRequest&) const
         *         "GPUdb::getRecordsFromCollection").
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::updateRecords(const UpdateRecordsRequest<TRequest>&) const
     * "GPUdb::updateRecords".
     */
    struct UpdateRecordsResponse
    {
        /**
         * Constructs an UpdateRecordsResponse object with default parameters.
         */
        UpdateRecordsResponse() :
            countUpdated(int64_t()),
            countsUpdated(std::vector<int64_t>()),
            countInserted(int64_t()),
            countsInserted(std::vector<int64_t>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Total number of records updated.
         */
        int64_t countUpdated;

        /**
         * Total number of records updated per predicate in @ref
         * gpudb::RawUpdateRecordsRequest::expressions "expressions".
         */
        std::vector<int64_t> countsUpdated;

        /**
         * Total number of records inserted (due to expressions not matching
         * any existing records).
         */
        int64_t countInserted;

        /**
         * Total number of records inserted per predicate in @ref
         * gpudb::RawUpdateRecordsRequest::expressions "expressions" (will be
         * either 0 or 1 for each expression).
         */
        std::vector<int64_t> countsInserted;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::UpdateRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::UpdateRecordsResponse& v)
        {
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.countsUpdated);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countsInserted);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::UpdateRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 1:
                            ::avro::decode(d, v.countsUpdated);
                            break;

                        case 2:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 3:
                            ::avro::decode(d, v.countsInserted);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.countsUpdated);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countsInserted);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __UPDATE_RECORDS_H__
