/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DROP_DATASINK_H__
#define __DROP_DATASINK_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::dropDatasink(const DropDatasinkRequest&) const
     * "GPUdb::dropDatasink".
     *
     * Drops an existing <a href="../../../concepts/data_sinks/"
     * target="_top">data sink</a>.
     *
     * By default, if any <a href="../../../concepts/table_monitors"
     * target="_top">table monitors</a> use this sink as a destination, the
     * request will be blocked unless option @ref
     * gpudb::drop_datasink_clear_table_monitors "clear_table_monitors" is @ref
     * gpudb::drop_datasink_true "true".
     */
    struct DropDatasinkRequest
    {
        /**
         * Constructs a DropDatasinkRequest object with default parameters.
         */
        DropDatasinkRequest() :
            name(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DropDatasinkRequest object with the specified
         * parameters.
         *
         * @param[in] name_  Name of the data sink to be dropped. Must be an
         *                   existing data sink.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::drop_datasink_clear_table_monitors
         *                              "drop_datasink_clear_table_monitors":
         *                              If @ref gpudb::drop_datasink_true
         *                              "true", any <a
         *                              href="../../../concepts/table_monitors/"
         *                              target="_top">table monitors</a> that
         *                              use this data sink will be cleared.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::drop_datasink_true
         *                                      "drop_datasink_true"
         *                                  <li>@ref gpudb::drop_datasink_false
         *                                      "drop_datasink_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::drop_datasink_false
         *                              "drop_datasink_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        DropDatasinkRequest(const std::string& name_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            options( options_ )
        {
        }

        /**
         * Name of the data sink to be dropped. Must be an existing data sink.
         */
        std::string name;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::drop_datasink_clear_table_monitors
         *         "drop_datasink_clear_table_monitors": If @ref
         *         gpudb::drop_datasink_true "true", any <a
         *         href="../../../concepts/table_monitors/" target="_top">table
         *         monitors</a> that use this data sink will be cleared.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::drop_datasink_true "drop_datasink_true"
         *             <li>@ref gpudb::drop_datasink_false
         *                 "drop_datasink_false"
         *         </ul>
         *         The default value is @ref gpudb::drop_datasink_false
         *         "drop_datasink_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropDatasinkRequest>
    {
        static void encode(Encoder& e, const gpudb::DropDatasinkRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DropDatasinkRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::dropDatasink(const DropDatasinkRequest&) const
     * "GPUdb::dropDatasink".
     */
    struct DropDatasinkResponse
    {
        /**
         * Constructs a DropDatasinkResponse object with default parameters.
         */
        DropDatasinkResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::DropDatasinkRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropDatasinkResponse>
    {
        static void encode(Encoder& e, const gpudb::DropDatasinkResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DropDatasinkResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __DROP_DATASINK_H__
