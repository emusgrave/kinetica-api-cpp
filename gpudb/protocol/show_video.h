/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_VIDEO_H__
#define __SHOW_VIDEO_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showVideo(const ShowVideoRequest&) const}.
     * <p>
     * Retrieves information about rendered videos.
     */
    struct ShowVideoRequest
    {

        /**
         * Constructs a ShowVideoRequest object with default parameter values.
         */
        ShowVideoRequest() :
            paths(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowVideoRequest object with the specified parameters.
         * 
         * @param[in] paths_  The fully-qualified <a
         *                    href="../../../tools/kifs/"
         *                    target="_top">KiFS</a> paths for the videos to
         *                    show. If empty, shows all videos.
         * @param[in] options_  Optional parameters.
         * 
         */
        ShowVideoRequest(const std::vector<std::string>& paths_, const std::map<std::string, std::string>& options_):
            paths( paths_ ),
            options( options_ )
        {
        }

        std::vector<std::string> paths;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowVideoRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowVideoRequest& v)
        {
            ::avro::encode(e, v.paths);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowVideoRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.paths);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.paths);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showVideo(const ShowVideoRequest&) const}.
     * <p>
     * Retrieves information about rendered videos.
     */
    struct ShowVideoResponse
    {

        /**
         * Constructs a ShowVideoResponse object with default parameter values.
         */
        ShowVideoResponse() :
            creationTimes(std::vector<std::string>()),
            elapsedRenderTimeSeconds(std::vector<int64_t>()),
            jobIds(std::vector<int64_t>()),
            paths(std::vector<std::string>()),
            renderedBytes(std::vector<int64_t>()),
            renderedFrames(std::vector<int64_t>()),
            renderedPercents(std::vector<int64_t>()),
            requests(std::vector<std::string>()),
            status(std::vector<std::string>()),
            ttls(std::vector<int64_t>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> creationTimes;
        std::vector<int64_t> elapsedRenderTimeSeconds;
        std::vector<int64_t> jobIds;
        std::vector<std::string> paths;
        std::vector<int64_t> renderedBytes;
        std::vector<int64_t> renderedFrames;
        std::vector<int64_t> renderedPercents;
        std::vector<std::string> requests;
        std::vector<std::string> status;
        std::vector<int64_t> ttls;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowVideoResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowVideoResponse& v)
        {
            ::avro::encode(e, v.creationTimes);
            ::avro::encode(e, v.elapsedRenderTimeSeconds);
            ::avro::encode(e, v.jobIds);
            ::avro::encode(e, v.paths);
            ::avro::encode(e, v.renderedBytes);
            ::avro::encode(e, v.renderedFrames);
            ::avro::encode(e, v.renderedPercents);
            ::avro::encode(e, v.requests);
            ::avro::encode(e, v.status);
            ::avro::encode(e, v.ttls);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowVideoResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.creationTimes);
                            break;

                        case 1:
                            ::avro::decode(d, v.elapsedRenderTimeSeconds);
                            break;

                        case 2:
                            ::avro::decode(d, v.jobIds);
                            break;

                        case 3:
                            ::avro::decode(d, v.paths);
                            break;

                        case 4:
                            ::avro::decode(d, v.renderedBytes);
                            break;

                        case 5:
                            ::avro::decode(d, v.renderedFrames);
                            break;

                        case 6:
                            ::avro::decode(d, v.renderedPercents);
                            break;

                        case 7:
                            ::avro::decode(d, v.requests);
                            break;

                        case 8:
                            ::avro::decode(d, v.status);
                            break;

                        case 9:
                            ::avro::decode(d, v.ttls);
                            break;

                        case 10:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.creationTimes);
                ::avro::decode(d, v.elapsedRenderTimeSeconds);
                ::avro::decode(d, v.jobIds);
                ::avro::decode(d, v.paths);
                ::avro::decode(d, v.renderedBytes);
                ::avro::decode(d, v.renderedFrames);
                ::avro::decode(d, v.renderedPercents);
                ::avro::decode(d, v.requests);
                ::avro::decode(d, v.status);
                ::avro::decode(d, v.ttls);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
