/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_MONITOR_H__
#define __ALTER_TABLE_MONITOR_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterTableMonitor(const AlterTableMonitorRequest&) const
     * "GPUdb::alterTableMonitor".
     *
     * Alters a table monitor previously created with @ref
     * GPUdb::createTableMonitor(const CreateTableMonitorRequest&) const
     * "GPUdb::createTableMonitor".
     */
    struct AlterTableMonitorRequest
    {
        /**
         * Constructs an AlterTableMonitorRequest object with default
         * parameters.
         */
        AlterTableMonitorRequest() :
            topicId(std::string()),
            monitorUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableMonitorRequest object with the specified
         * parameters.
         *
         * @param[in] topicId_  The topic ID returned by @ref
         *                      GPUdb::createTableMonitor(const CreateTableMonitorRequest&) const
         *                      "GPUdb::createTableMonitor".
         * @param[in] monitorUpdatesMap_  Map containing the properties of the
         *                                table monitor to be updated. Error if
         *                                empty.
         *                                <ul>
         *                                    <li>@ref
         *                                        gpudb::alter_table_monitor_schema_name
         *                                        "alter_table_monitor_schema_name":
         *                                        Updates the schema name.  If
         *                                        @ref
         *                                        gpudb::alter_table_monitor_schema_name
         *                                        "schema_name" doesn't exist,
         *                                        an error will be thrown. If
         *                                        @ref
         *                                        gpudb::alter_table_monitor_schema_name
         *                                        "schema_name" is empty, then
         *                                        the user's default schema
         *                                        will be used.
         *                                </ul>
         * @param[in] options_  Optional parameters.
         */
        AlterTableMonitorRequest(const std::string& topicId_, const std::map<std::string, std::string>& monitorUpdatesMap_, const std::map<std::string, std::string>& options_):
            topicId( topicId_ ),
            monitorUpdatesMap( monitorUpdatesMap_ ),
            options( options_ )
        {
        }

        /**
         * The topic ID returned by @ref
         * GPUdb::createTableMonitor(const CreateTableMonitorRequest&) const
         * "GPUdb::createTableMonitor".
         */
        std::string topicId;

        /**
         * Map containing the properties of the table monitor to be updated.
         * Error if empty.
         * <ul>
         *     <li>@ref gpudb::alter_table_monitor_schema_name
         *         "alter_table_monitor_schema_name": Updates the schema name.
         *         If @ref gpudb::alter_table_monitor_schema_name "schema_name"
         *         doesn't exist, an error will be thrown. If @ref
         *         gpudb::alter_table_monitor_schema_name "schema_name" is
         *         empty, then the user's default schema will be used.
         * </ul>
         */
        std::map<std::string, std::string> monitorUpdatesMap;

        /**
         * Optional parameters.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableMonitorRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableMonitorRequest& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.monitorUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableMonitorRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.monitorUpdatesMap);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.monitorUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterTableMonitor(const AlterTableMonitorRequest&) const
     * "GPUdb::alterTableMonitor".
     */
    struct AlterTableMonitorResponse
    {
        /**
         * Constructs an AlterTableMonitorResponse object with default
         * parameters.
         */
        AlterTableMonitorResponse() :
            topicId(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::AlterTableMonitorRequest::topicId "topicId".
         */
        std::string topicId;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableMonitorResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableMonitorResponse& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTableMonitorResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_TABLE_MONITOR_H__
