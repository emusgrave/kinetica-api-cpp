/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_MONITOR_H__
#define __ALTER_TABLE_MONITOR_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTableMonitor(const AlterTableMonitorRequest&) const}.
     * <p>
     * Alters a table monitor previously created with {@link
     * #createTableMonitor(const CreateTableMonitorRequest&) const}.
     */
    struct AlterTableMonitorRequest
    {

        /**
         * Constructs an AlterTableMonitorRequest object with default parameter
         * values.
         */
        AlterTableMonitorRequest() :
            topicId(std::string()),
            monitorUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableMonitorRequest object with the specified
         * parameters.
         * 
         * @param[in] topicId_  The topic ID returned by /create/tablemonitor.
         * @param[in] monitorUpdatesMap_  Map containing the properties of the
         *                                table monitor to be updated. Error if
         *                                empty.
         *                                <ul>
         *                                        <li>
         *                                gpudb::alter_table_monitor_schema_name:
         *                                Updates the schema name.  If @a
         *                                schema_name
         *                                doesn't exist, an error will be
         *                                thrown. If @a schema_name is empty,
         *                                then the user's
         *                                default schema will be used.
         *                                </ul>
         * @param[in] options_  Optional parameters.
         * 
         */
        AlterTableMonitorRequest(const std::string& topicId_, const std::map<std::string, std::string>& monitorUpdatesMap_, const std::map<std::string, std::string>& options_):
            topicId( topicId_ ),
            monitorUpdatesMap( monitorUpdatesMap_ ),
            options( options_ )
        {
        }

        std::string topicId;
        std::map<std::string, std::string> monitorUpdatesMap;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableMonitorRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableMonitorRequest& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.monitorUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableMonitorRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.monitorUpdatesMap);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.monitorUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTableMonitor(const AlterTableMonitorRequest&) const}.
     * <p>
     * Alters a table monitor previously created with {@link
     * #createTableMonitor(const CreateTableMonitorRequest&) const}.
     */
    struct AlterTableMonitorResponse
    {

        /**
         * Constructs an AlterTableMonitorResponse object with default
         * parameter values.
         */
        AlterTableMonitorResponse() :
            topicId(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string topicId;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableMonitorResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableMonitorResponse& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTableMonitorResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
