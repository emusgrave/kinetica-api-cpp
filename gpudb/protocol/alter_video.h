/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_VIDEO_H__
#define __ALTER_VIDEO_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterVideo(const AlterVideoRequest&) const "GPUdb::alterVideo".
     *
     * Alters a video.
     */
    struct AlterVideoRequest
    {
        /**
         * Constructs an AlterVideoRequest object with default parameters.
         */
        AlterVideoRequest() :
            path(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterVideoRequest object with the specified
         * parameters.
         *
         * @param[in] path_  Fully-qualified <a href="../../../tools/kifs/"
         *                   target="_top">KiFS</a> path to the video to be
         *                   altered.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::alter_video_ttl
         *                              "alter_video_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the video.
         *                      </ul>
         *                      The default value is an empty map.
         */
        AlterVideoRequest(const std::string& path_, const std::map<std::string, std::string>& options_):
            path( path_ ),
            options( options_ )
        {
        }

        /**
         * Fully-qualified <a href="../../../tools/kifs/"
         * target="_top">KiFS</a> path to the video to be altered.
         */
        std::string path;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::alter_video_ttl "alter_video_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         video.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterVideoRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterVideoRequest& v)
        {
            ::avro::encode(e, v.path);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterVideoRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.path);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.path);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterVideo(const AlterVideoRequest&) const "GPUdb::alterVideo".
     */
    struct AlterVideoResponse
    {
        /**
         * Constructs an AlterVideoResponse object with default parameters.
         */
        AlterVideoResponse() :
            path(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Fully qualified KIFS path to the video file.
         */
        std::string path;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterVideoResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterVideoResponse& v)
        {
            ::avro::encode(e, v.path);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterVideoResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.path);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.path);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_VIDEO_H__
