/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_COLUMNS_H__
#define __ALTER_TABLE_COLUMNS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterTableColumns(const AlterTableColumnsRequest&) const
     * "GPUdb::alterTableColumns".
     *
     * Apply various modifications to columns in a table, view.  The available
     * modifications include the following:
     *
     * Create or delete an <a href="../../../concepts/indexes/#column-index"
     * target="_top">index</a> on a particular column. This can speed up
     * certain operations when using expressions containing equality or
     * relational operators on indexed columns. This only applies to tables.
     *
     * Manage a table's columns--a column can be added, removed, or have its <a
     * href="../../../concepts/types/" target="_top">type and properties</a>
     * modified, including whether it is <a
     * href="../../../concepts/dictionary_encoding/" target="_top">dictionary
     * encoded</a> or not.
     */
    struct AlterTableColumnsRequest
    {
        /**
         * Constructs an AlterTableColumnsRequest object with default
         * parameters.
         */
        AlterTableColumnsRequest() :
            tableName(std::string()),
            columnAlterations(std::vector<std::map<std::string, std::string> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableColumnsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Table on which the operation will be
         *                        performed. Must be an existing table or view,
         *                        in [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnAlterations_  List of alter table add/delete/change
         *                                column requests - all for the same
         *                                table. Each request is a map that
         *                                includes 'column_name', 'action' and
         *                                the options specific for the action.
         *                                Note that the same options as in
         *                                alter table requests but in the same
         *                                map as the column name and the
         *                                action. For example:
         *                                [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
         *                                'type':'int','default_value':'1'}]
         * @param[in] options_  Optional parameters.
         */
        AlterTableColumnsRequest(const std::string& tableName_, const std::vector<std::map<std::string, std::string> >& columnAlterations_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnAlterations( columnAlterations_ ),
            options( options_ )
        {
        }

        /**
         * Table on which the operation will be performed. Must be an existing
         * table or view, in [ schema_name.\ ]table_name format, using standard
         * <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * List of alter table add/delete/change column requests - all for the
         * same table. Each request is a map that includes 'column_name',
         * 'action' and the options specific for the action. Note that the same
         * options as in alter table requests but in the same map as the column
         * name and the action. For example:
         * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
         * 'type':'int','default_value':'1'}]
         */
        std::vector<std::map<std::string, std::string> > columnAlterations;

        /**
         * Optional parameters.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableColumnsRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableColumnsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnAlterations);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableColumnsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnAlterations);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnAlterations);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterTableColumns(const AlterTableColumnsRequest&) const
     * "GPUdb::alterTableColumns".
     */
    struct AlterTableColumnsResponse
    {
        /**
         * Constructs an AlterTableColumnsResponse object with default
         * parameters.
         */
        AlterTableColumnsResponse() :
            tableName(std::string()),
            typeId(std::string()),
            typeDefinition(std::string()),
            properties(std::map<std::string, std::vector<std::string> >()),
            label(std::string()),
            columnAlterations(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Table on which the operation was performed.
         */
        std::string tableName;

        /**
         * return the type_id (when changing a table, a new type may be
         * created)
         */
        std::string typeId;

        /**
         * return the type_definition  (when changing a table, a new type may
         * be created)
         */
        std::string typeDefinition;

        /**
         * return the type properties  (when changing a table, a new type may
         * be created)
         */
        std::map<std::string, std::vector<std::string> > properties;

        /**
         * return the type label  (when changing a table, a new type may be
         * created)
         */
        std::string label;

        /**
         * List of alter table add/delete/change column requests - all for the
         * same table. Each request is a map that includes 'column_name',
         * 'action' and the options specific for the action. Note that the same
         * options as in alter table requests but in the same map as the column
         * name and the action. For example:
         * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
         * 'type':'int','default_value':'1'}]
         */
        std::vector<std::map<std::string, std::string> > columnAlterations;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableColumnsResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableColumnsResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.typeDefinition);
            ::avro::encode(e, v.properties);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.columnAlterations);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterTableColumnsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeDefinition);
                            break;

                        case 3:
                            ::avro::decode(d, v.properties);
                            break;

                        case 4:
                            ::avro::decode(d, v.label);
                            break;

                        case 5:
                            ::avro::decode(d, v.columnAlterations);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.typeDefinition);
                ::avro::decode(d, v.properties);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.columnAlterations);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_TABLE_COLUMNS_H__
