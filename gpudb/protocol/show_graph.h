/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_GRAPH_H__
#define __SHOW_GRAPH_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showGraph(const ShowGraphRequest&) const "GPUdb::showGraph".
     *
     * Shows information and characteristics of graphs that exist on the graph
     * server.
     */
    struct ShowGraphRequest
    {
        /**
         * Constructs a ShowGraphRequest object with default parameters.
         */
        ShowGraphRequest() :
            graphName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowGraphRequest object with the specified parameters.
         *
         * @param[in] graphName_  Name of the graph on which to retrieve
         *                        information. If left as the default value,
         *                        information about all graphs is returned. The
         *                        default value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_graph_show_original_request
         *                              "show_graph_show_original_request": If
         *                              set to @ref gpudb::show_graph_true
         *                              "true", the request that was originally
         *                              used to create the graph is also
         *                              returned as JSON.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::show_graph_true
         *                                      "show_graph_true"
         *                                  <li>@ref gpudb::show_graph_false
         *                                      "show_graph_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::show_graph_true
         *                              "show_graph_true".
         *                          <li>@ref gpudb::show_graph_server_id
         *                              "show_graph_server_id": Indicates which
         *                              graph server(s) to send the request to.
         *                              Default is to send to get information
         *                              about all the servers.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowGraphRequest(const std::string& graphName_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the graph on which to retrieve information. If left as the
         * default value, information about all graphs is returned. The default
         * value is ''.
         */
        std::string graphName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_graph_show_original_request
         *         "show_graph_show_original_request": If set to @ref
         *         gpudb::show_graph_true "true", the request that was
         *         originally used to create the graph is also returned as
         *         JSON.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_graph_true "show_graph_true"
         *             <li>@ref gpudb::show_graph_false "show_graph_false"
         *         </ul>
         *         The default value is @ref gpudb::show_graph_true
         *         "show_graph_true".
         *     <li>@ref gpudb::show_graph_server_id "show_graph_server_id":
         *         Indicates which graph server(s) to send the request to.
         *         Default is to send to get information about all the servers.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowGraphRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowGraphRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowGraphRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showGraph(const ShowGraphRequest&) const "GPUdb::showGraph".
     */
    struct ShowGraphResponse
    {
        /**
         * Constructs a ShowGraphResponse object with default parameters.
         */
        ShowGraphResponse() :
            result(bool()),
            load(std::vector<int32_t>()),
            memory(std::vector<int64_t>()),
            graphNames(std::vector<std::string>()),
            graphServerIds(std::vector<int32_t>()),
            graphOwnerUserNames(std::vector<std::string>()),
            graphOwnerResourceGroups(std::vector<std::string>()),
            directed(std::vector<bool>()),
            numNodes(std::vector<int64_t>()),
            numEdges(std::vector<int64_t>()),
            numBytes(std::vector<int64_t>()),
            resourceCapacity(std::vector<int64_t>()),
            isPersisted(std::vector<bool>()),
            isPartitioned(std::vector<bool>()),
            isSyncDb(std::vector<bool>()),
            hasInsertTableMonitor(std::vector<bool>()),
            originalRequest(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Indicates a success. This call will fails of the graph specified in
         * the request does not exist.
         */
        bool result;

        /**
         * A percentage approximating the current computational load on the
         * server.
         */
        std::vector<int32_t> load;

        /**
         * Available memory.
         */
        std::vector<int64_t> memory;

        /**
         * Name(s) of the graph(s).
         */
        std::vector<std::string> graphNames;

        /**
         * Id(s) of the graph(s).
         */
        std::vector<int32_t> graphServerIds;

        /**
         * Owner the graph(s) and associated solution table(s).
         */
        std::vector<std::string> graphOwnerUserNames;

        /**
         * Owner resource groups(s) of the graph(s).
         */
        std::vector<std::string> graphOwnerResourceGroups;

        /**
         * Whether or not the edges of the graph have directions
         * (bi-directional edges can still exist in directed graphs). Consult
         * <a
         * href="../../../graph_solver/network_graph_solver/#directed-graphs"
         * target="_top">Directed Graphs</a> for more details.
         */
        std::vector<bool> directed;

        /**
         * Total number of nodes in the graph.
         */
        std::vector<int64_t> numNodes;

        /**
         * Total number of edges in the graph.
         */
        std::vector<int64_t> numEdges;

        /**
         * Memory this graph uses in bytes.
         */
        std::vector<int64_t> numBytes;

        /**
         * Memory this graph uses in bytes.
         */
        std::vector<int64_t> resourceCapacity;

        /**
         * Shows whether or not the graph is persisted (saved and loaded on
         * launch).
         */
        std::vector<bool> isPersisted;

        /**
         * Indicated if the graph data data is distributed across all available
         * servers.
         */
        std::vector<bool> isPartitioned;

        /**
         * Shows whether or not the graph is linked to the original tables that
         * created it, and will potentially be re-created instead loaded from
         * persist on launch.
         */
        std::vector<bool> isSyncDb;

        /**
         * Shows whether or not the graph has an insert table monitor attached
         * to it.
         */
        std::vector<bool> hasInsertTableMonitor;

        /**
         * The original client request used to create the graph (before any
         * expression evaluation or separator processing).
         */
        std::vector<std::string> originalRequest;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowGraphResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowGraphResponse& v)
        {
            ::avro::encode(e, v.result);
            ::avro::encode(e, v.load);
            ::avro::encode(e, v.memory);
            ::avro::encode(e, v.graphNames);
            ::avro::encode(e, v.graphServerIds);
            ::avro::encode(e, v.graphOwnerUserNames);
            ::avro::encode(e, v.graphOwnerResourceGroups);
            ::avro::encode(e, v.directed);
            ::avro::encode(e, v.numNodes);
            ::avro::encode(e, v.numEdges);
            ::avro::encode(e, v.numBytes);
            ::avro::encode(e, v.resourceCapacity);
            ::avro::encode(e, v.isPersisted);
            ::avro::encode(e, v.isPartitioned);
            ::avro::encode(e, v.isSyncDb);
            ::avro::encode(e, v.hasInsertTableMonitor);
            ::avro::encode(e, v.originalRequest);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowGraphResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.result);
                            break;

                        case 1:
                            ::avro::decode(d, v.load);
                            break;

                        case 2:
                            ::avro::decode(d, v.memory);
                            break;

                        case 3:
                            ::avro::decode(d, v.graphNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.graphServerIds);
                            break;

                        case 5:
                            ::avro::decode(d, v.graphOwnerUserNames);
                            break;

                        case 6:
                            ::avro::decode(d, v.graphOwnerResourceGroups);
                            break;

                        case 7:
                            ::avro::decode(d, v.directed);
                            break;

                        case 8:
                            ::avro::decode(d, v.numNodes);
                            break;

                        case 9:
                            ::avro::decode(d, v.numEdges);
                            break;

                        case 10:
                            ::avro::decode(d, v.numBytes);
                            break;

                        case 11:
                            ::avro::decode(d, v.resourceCapacity);
                            break;

                        case 12:
                            ::avro::decode(d, v.isPersisted);
                            break;

                        case 13:
                            ::avro::decode(d, v.isPartitioned);
                            break;

                        case 14:
                            ::avro::decode(d, v.isSyncDb);
                            break;

                        case 15:
                            ::avro::decode(d, v.hasInsertTableMonitor);
                            break;

                        case 16:
                            ::avro::decode(d, v.originalRequest);
                            break;

                        case 17:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.result);
                ::avro::decode(d, v.load);
                ::avro::decode(d, v.memory);
                ::avro::decode(d, v.graphNames);
                ::avro::decode(d, v.graphServerIds);
                ::avro::decode(d, v.graphOwnerUserNames);
                ::avro::decode(d, v.graphOwnerResourceGroups);
                ::avro::decode(d, v.directed);
                ::avro::decode(d, v.numNodes);
                ::avro::decode(d, v.numEdges);
                ::avro::decode(d, v.numBytes);
                ::avro::decode(d, v.resourceCapacity);
                ::avro::decode(d, v.isPersisted);
                ::avro::decode(d, v.isPartitioned);
                ::avro::decode(d, v.isSyncDb);
                ::avro::decode(d, v.hasInsertTableMonitor);
                ::avro::decode(d, v.originalRequest);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_GRAPH_H__
