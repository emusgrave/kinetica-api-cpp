/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __REPARTITION_GRAPH_H__
#define __REPARTITION_GRAPH_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::repartitionGraph(const RepartitionGraphRequest&) const
     * "GPUdb::repartitionGraph".
     *
     * Rebalances an existing partitioned graph.
     *
     * IMPORTANT: It's highly recommended that you review the <a
     * href="../../../graph_solver/network_graph_solver/" target="_top">Network
     * Graphs & Solvers</a> concepts documentation, the <a
     * href="../../../guides/graph_rest_guide/" target="_top">Graph REST
     * Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
     * target="_top">graph examples</a> before using this endpoint.
     */
    struct RepartitionGraphRequest
    {
        /**
         * Constructs a RepartitionGraphRequest object with default parameters.
         */
        RepartitionGraphRequest() :
            graphName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RepartitionGraphRequest object with the specified
         * parameters.
         *
         * @param[in] graphName_  Name of the graph resource to rebalance.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::repartition_graph_new_graph_name
         *                              "repartition_graph_new_graph_name": If
         *                              a non-empty value is specified, the
         *                              original graph will be kept
         *                              (non-default behaviour) and a new
         *                              balanced graph will be created under
         *                              this given name.  When the value is
         *                              empty (default), the generated
         *                              'balanced' graph will replace the
         *                              original 'unbalanced' graph under the
         *                              same graph name. The default value is
         *                              ''.
         *                          <li>@ref
         *                              gpudb::repartition_graph_source_node
         *                              "repartition_graph_source_node": The
         *                              distributed shortest path solve is run
         *                              from this source node to all the nodes
         *                              in the graph to create balaced
         *                              partitions using the iso-distance
         *                              levels of the solution.  The source
         *                              node is selected by the rebalance
         *                              algorithm automatically (default case
         *                              when the value is an empty string).
         *                              Otherwise, the user specified node is
         *                              used as the source. The default value
         *                              is ''.
         *                          <li>@ref
         *                              gpudb::repartition_graph_sql_request_avro_json
         *                              "repartition_graph_sql_request_avro_json":
         *                              The default value is ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        RepartitionGraphRequest(const std::string& graphName_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the graph resource to rebalance.
         */
        std::string graphName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::repartition_graph_new_graph_name
         *         "repartition_graph_new_graph_name": If a non-empty value is
         *         specified, the original graph will be kept (non-default
         *         behaviour) and a new balanced graph will be created under
         *         this given name.  When the value is empty (default), the
         *         generated 'balanced' graph will replace the original
         *         'unbalanced' graph under the same graph name. The default
         *         value is ''.
         *     <li>@ref gpudb::repartition_graph_source_node
         *         "repartition_graph_source_node": The distributed shortest
         *         path solve is run from this source node to all the nodes in
         *         the graph to create balaced partitions using the
         *         iso-distance levels of the solution.  The source node is
         *         selected by the rebalance algorithm automatically (default
         *         case when the value is an empty string). Otherwise, the user
         *         specified node is used as the source. The default value is
         *         ''.
         *     <li>@ref gpudb::repartition_graph_sql_request_avro_json
         *         "repartition_graph_sql_request_avro_json": The default value
         *         is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RepartitionGraphRequest>
    {
        static void encode(Encoder& e, const gpudb::RepartitionGraphRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RepartitionGraphRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::repartitionGraph(const RepartitionGraphRequest&) const
     * "GPUdb::repartitionGraph".
     */
    struct RepartitionGraphResponse
    {
        /**
         * Constructs a RepartitionGraphResponse object with default
         * parameters.
         */
        RepartitionGraphResponse() :
            result(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Indicates a successful rebalancing on all servers.
         */
        bool result;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RepartitionGraphResponse>
    {
        static void encode(Encoder& e, const gpudb::RepartitionGraphResponse& v)
        {
            ::avro::encode(e, v.result);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RepartitionGraphResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.result);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.result);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __REPARTITION_GRAPH_H__
