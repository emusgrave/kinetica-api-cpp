/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DELETE_DIRECTORY_H__
#define __DELETE_DIRECTORY_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::deleteDirectory(const DeleteDirectoryRequest&) const
     * "GPUdb::deleteDirectory".
     *
     * Deletes a directory from <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct DeleteDirectoryRequest
    {
        /**
         * Constructs a DeleteDirectoryRequest object with default parameters.
         */
        DeleteDirectoryRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DeleteDirectoryRequest object with the specified
         * parameters.
         *
         * @param[in] directoryName_  Name of the directory in KiFS to be
         *                            deleted. The directory must contain no
         *                            files, unless @ref
         *                            gpudb::delete_directory_recursive
         *                            "recursive" is @ref
         *                            gpudb::delete_directory_true "true"
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::delete_directory_recursive
         *                              "delete_directory_recursive": If @ref
         *                              gpudb::delete_directory_true "true",
         *                              will delete directory and all files
         *                              residing in it. If false, directory
         *                              must be empty for deletion.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::delete_directory_true
         *                                      "delete_directory_true"
         *                                  <li>@ref
         *                                      gpudb::delete_directory_false
         *                                      "delete_directory_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::delete_directory_false
         *                              "delete_directory_false".
         *                          <li>@ref
         *                              gpudb::delete_directory_no_error_if_not_exists
         *                              "delete_directory_no_error_if_not_exists":
         *                              If @ref gpudb::delete_directory_true
         *                              "true", no error is returned if
         *                              specified directory does not exist.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::delete_directory_true
         *                                      "delete_directory_true"
         *                                  <li>@ref
         *                                      gpudb::delete_directory_false
         *                                      "delete_directory_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::delete_directory_false
         *                              "delete_directory_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        DeleteDirectoryRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the directory in KiFS to be deleted. The directory must
         * contain no files, unless @ref gpudb::delete_directory_recursive
         * "recursive" is @ref gpudb::delete_directory_true "true"
         */
        std::string directoryName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::delete_directory_recursive
         *         "delete_directory_recursive": If @ref
         *         gpudb::delete_directory_true "true", will delete directory
         *         and all files residing in it. If false, directory must be
         *         empty for deletion.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::delete_directory_true
         *                 "delete_directory_true"
         *             <li>@ref gpudb::delete_directory_false
         *                 "delete_directory_false"
         *         </ul>
         *         The default value is @ref gpudb::delete_directory_false
         *         "delete_directory_false".
         *     <li>@ref gpudb::delete_directory_no_error_if_not_exists
         *         "delete_directory_no_error_if_not_exists": If @ref
         *         gpudb::delete_directory_true "true", no error is returned if
         *         specified directory does not exist.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::delete_directory_true
         *                 "delete_directory_true"
         *             <li>@ref gpudb::delete_directory_false
         *                 "delete_directory_false"
         *         </ul>
         *         The default value is @ref gpudb::delete_directory_false
         *         "delete_directory_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DeleteDirectoryRequest>
    {
        static void encode(Encoder& e, const gpudb::DeleteDirectoryRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DeleteDirectoryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::deleteDirectory(const DeleteDirectoryRequest&) const
     * "GPUdb::deleteDirectory".
     */
    struct DeleteDirectoryResponse
    {
        /**
         * Constructs a DeleteDirectoryResponse object with default parameters.
         */
        DeleteDirectoryResponse() :
            directoryName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::DeleteDirectoryRequest::directoryName
         * "directoryName".
         */
        std::string directoryName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DeleteDirectoryResponse>
    {
        static void encode(Encoder& e, const gpudb::DeleteDirectoryResponse& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DeleteDirectoryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __DELETE_DIRECTORY_H__
