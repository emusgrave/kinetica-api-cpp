/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DELETE_DIRECTORY_H__
#define __DELETE_DIRECTORY_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #deleteDirectory(const DeleteDirectoryRequest&) const}.
     * <p>
     * Deletes a directory from <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct DeleteDirectoryRequest
    {

        /**
         * Constructs a DeleteDirectoryRequest object with default parameter
         * values.
         */
        DeleteDirectoryRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DeleteDirectoryRequest object with the specified
         * parameters.
         * 
         * @param[in] directoryName_  Name of the directory in KiFS to be
         *                            deleted. The directory must contain no
         *                            files, unless @a recursive is @a true
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::delete_directory_recursive:
         *                      If @a true, will delete directory and all files
         *                      residing in it. If false, directory must be
         *                      empty for deletion.
         *                      <ul>
         *                              <li> gpudb::delete_directory_true
         *                              <li> gpudb::delete_directory_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::delete_directory_false.
         *                              <li>
         *                      gpudb::delete_directory_no_error_if_not_exists:
         *                      If @a true, no error is returned if specified
         *                      directory does not exist
         *                      <ul>
         *                              <li> gpudb::delete_directory_true
         *                              <li> gpudb::delete_directory_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::delete_directory_false.
         *                      </ul>
         * 
         */
        DeleteDirectoryRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DeleteDirectoryRequest>
    {
        static void encode(Encoder& e, const gpudb::DeleteDirectoryRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DeleteDirectoryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #deleteDirectory(const DeleteDirectoryRequest&) const}.
     * <p>
     * Deletes a directory from <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct DeleteDirectoryResponse
    {

        /**
         * Constructs a DeleteDirectoryResponse object with default parameter
         * values.
         */
        DeleteDirectoryResponse() :
            directoryName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DeleteDirectoryResponse>
    {
        static void encode(Encoder& e, const gpudb::DeleteDirectoryResponse& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DeleteDirectoryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
