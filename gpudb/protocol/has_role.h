/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_ROLE_H__
#define __HAS_ROLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #hasRole(const HasRoleRequest&) const}.
     * <p>
     * Checks if the specified user has the specified role.
     */
    struct HasRoleRequest
    {

        /**
         * Constructs a HasRoleRequest object with default parameter values.
         */
        HasRoleRequest() :
            principal(std::string()),
            role(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasRoleRequest object with the specified parameters.
         * 
         * @param[in] principal_  Name of the user for which role membersih is
         *                        being checked. Must be an existing user. If
         *                        blank, will use the current user.
         * @param[in] role_  Name of role to check for membership.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::has_role_no_error_if_not_exists: If @a
         *                      false will return an error if the provided @a
         *                      role does not exist or is blank. If @a true
         *                      then it will return @a false for @a hasRole.
         *                      <ul>
         *                              <li> gpudb::has_role_true
         *                              <li> gpudb::has_role_false
         *                      </ul>
         *                      The default value is gpudb::has_role_false.
         *                              <li> gpudb::has_role_only_direct: If @a
         *                      false will search recursively if the @a
         *                      principal is a member of @a role.  If @a true
         *                      then @a principal must directly be a member of
         *                      @a role.
         *                      <ul>
         *                              <li> gpudb::has_role_true
         *                              <li> gpudb::has_role_false
         *                      </ul>
         *                      The default value is gpudb::has_role_false.
         *                      </ul>
         * 
         */
        HasRoleRequest(const std::string& principal_, const std::string& role_, const std::map<std::string, std::string>& options_):
            principal( principal_ ),
            role( role_ ),
            options( options_ )
        {
        }

        std::string principal;
        std::string role;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasRoleRequest>
    {
        static void encode(Encoder& e, const gpudb::HasRoleRequest& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasRoleRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.role);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #hasRole(const HasRoleRequest&) const}.
     * <p>
     * Checks if the specified user has the specified role.
     */
    struct HasRoleResponse
    {

        /**
         * Constructs a HasRoleResponse object with default parameter values.
         */
        HasRoleResponse() :
            principal(std::string()),
            role(std::string()),
            hasRole(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string principal;
        std::string role;
        bool hasRole;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasRoleResponse>
    {
        static void encode(Encoder& e, const gpudb::HasRoleResponse& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.hasRole);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasRoleResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.role);
                            break;

                        case 2:
                            ::avro::decode(d, v.hasRole);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.hasRole);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
