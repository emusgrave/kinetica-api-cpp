/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SYSTEM_PROPERTIES_H__
#define __SHOW_SYSTEM_PROPERTIES_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showSystemProperties(const ShowSystemPropertiesRequest&) const
     * "GPUdb::showSystemProperties".
     *
     * Returns server configuration and version related information to the
     * caller. The admin tool uses it to present server related information to
     * the user.
     */
    struct ShowSystemPropertiesRequest
    {
        /**
         * Constructs a ShowSystemPropertiesRequest object with default
         * parameters.
         */
        ShowSystemPropertiesRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSystemPropertiesRequest object with the specified
         * parameters.
         *
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::show_system_properties_properties
         *                              "show_system_properties_properties": A
         *                              list of comma separated names of
         *                              properties requested. If not specified,
         *                              all properties will be returned.
         *                      </ul>
         *                      The default value is an empty map.
         */
        ShowSystemPropertiesRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::show_system_properties_properties
         *         "show_system_properties_properties": A list of comma
         *         separated names of properties requested. If not specified,
         *         all properties will be returned.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSystemPropertiesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSystemPropertiesRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSystemPropertiesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showSystemProperties(const ShowSystemPropertiesRequest&) const
     * "GPUdb::showSystemProperties".
     */
    struct ShowSystemPropertiesResponse
    {
        /**
         * Constructs a ShowSystemPropertiesResponse object with default
         * parameters.
         */
        ShowSystemPropertiesResponse() :
            propertyMap(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * A map of server configuration parameters and version information.
         * <ul>
         *     <li>@ref
         *         gpudb::show_system_properties_conf_enable_worker_http_servers
         *         "show_system_properties_conf_enable_worker_http_servers":
         *         Boolean value indicating whether the system is configured
         *         for multi-head ingestion.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::show_system_properties_TRUE
         *                 "show_system_properties_TRUE": Indicates that the
         *                 system is configured for multi-head ingestion.
         *             <li>@ref gpudb::show_system_properties_FALSE
         *                 "show_system_properties_FALSE": Indicates that the
         *                 system is NOT configured for multi-head ingestion.
         *         </ul>
         *     <li>@ref
         *         gpudb::show_system_properties_conf_worker_http_server_ips
         *         "show_system_properties_conf_worker_http_server_ips":
         *         Semicolon (';') separated string of IP addresses of all the
         *         ingestion-enabled worker heads of the system.
         *     <li>@ref
         *         gpudb::show_system_properties_conf_worker_http_server_ports
         *         "show_system_properties_conf_worker_http_server_ports":
         *         Semicolon (';') separated string of the port numbers of all
         *         the ingestion-enabled worker ranks of the system.
         *     <li>@ref gpudb::show_system_properties_conf_hm_http_port
         *         "show_system_properties_conf_hm_http_port": The host manager
         *         port number (an integer value).
         *     <li>@ref gpudb::show_system_properties_conf_enable_ha
         *         "show_system_properties_conf_enable_ha": Flag indicating
         *         whether high availability (HA) is set up (a boolean value).
         *     <li>@ref gpudb::show_system_properties_conf_ha_ring_head_nodes
         *         "show_system_properties_conf_ha_ring_head_nodes": A
         *         comma-separated string of high availability (HA) ring node
         *         URLs.  If HA is not set up, then an empty string.
         * </ul>
         */
        std::map<std::string, std::string> propertyMap;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSystemPropertiesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSystemPropertiesResponse& v)
        {
            ::avro::encode(e, v.propertyMap);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowSystemPropertiesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.propertyMap);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.propertyMap);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_SYSTEM_PROPERTIES_H__
