/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_ISOCHRONE_H__
#define __VISUALIZE_ISOCHRONE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #visualizeIsochrone(const VisualizeIsochroneRequest&) const}.
     * <p>
     * Generate an image containing isolines for travel results using an
     * existing graph. Isolines represent curves of equal cost, with cost
     * typically
     * referring to the time or distance assigned as the weights of the
     * underlying
     * graph. See
     * <a href="../../../graph_solver/network_graph_solver/"
     * target="_top">Network Graphs & Solvers</a>
     * for more information on graphs.
     */
    struct VisualizeIsochroneRequest
    {

        /**
         * Constructs a VisualizeIsochroneRequest object with default parameter
         * values.
         */
        VisualizeIsochroneRequest() :
            graphName(std::string()),
            sourceNode(std::string()),
            maxSolutionRadius(double()),
            weightsOnEdges(std::vector<std::string>()),
            restrictions(std::vector<std::string>()),
            numLevels(int32_t()),
            generateImage(bool()),
            levelsTable(std::string()),
            styleOptions(std::map<std::string, std::string>()),
            solveOptions(std::map<std::string, std::string>()),
            contourOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a VisualizeIsochroneRequest object with the specified
         * parameters.
         * 
         * @param[in] graphName_  Name of the graph on which the isochrone is
         *                        to be computed.
         * @param[in] sourceNode_  Starting vertex on the underlying graph
         *                         from/to which the isochrones are created.
         * @param[in] maxSolutionRadius_  Extent of the search radius around @a
         *                                sourceNode. Set to '-1.0' for
         *                                unrestricted search radius.
         * @param[in] weightsOnEdges_  Additional weights to apply to the edges
         *                             of an existing graph. Weights must be
         *                             specified using <a
         *                             href="../../../graph_solver/network_graph_solver/#identifiers"
         *                             target="_top">identifiers</a>;
         *                             identifiers are grouped as <a
         *                             href="../../../graph_solver/network_graph_solver/#id-combos"
         *                             target="_top">combinations</a>.
         *                             Identifiers can be used with existing
         *                             column names, e.g., 'table.column AS
         *                             WEIGHTS_EDGE_ID', or expressions, e.g.,
         *                             'ST_LENGTH(wkt) AS
         *                             WEIGHTS_VALUESPECIFIED'. Any provided
         *                             weights will be added (in the case of
         *                             'WEIGHTS_VALUESPECIFIED') to or
         *                             multiplied with (in the case of
         *                             'WEIGHTS_FACTORSPECIFIED') the existing
         *                             weight(s).
         * @param[in] restrictions_  Additional restrictions to apply to the
         *                           nodes/edges of an existing graph.
         *                           Restrictions must be specified using <a
         *                           href="../../../graph_solver/network_graph_solver/#identifiers"
         *                           target="_top">identifiers</a>; identifiers
         *                           are grouped as <a
         *                           href="../../../graph_solver/network_graph_solver/#id-combos"
         *                           target="_top">combinations</a>.
         *                           Identifiers can be used with existing
         *                           column names, e.g., 'table.column AS
         *                           RESTRICTIONS_EDGE_ID', or expressions,
         *                           e.g., 'column/2 AS
         *                           RESTRICTIONS_VALUECOMPARED'. If @a
         *                           remove_previous_restrictions is set to @a
         *                           true, any provided restrictions will
         *                           replace the existing restrictions. If @a
         *                           remove_previous_restrictions is set to @a
         *                           false, any provided restrictions will be
         *                           added (in the case of
         *                           'RESTRICTIONS_VALUECOMPARED') to or
         *                           replaced (in the case of
         *                           'RESTRICTIONS_ONOFFCOMPARED').
         * @param[in] numLevels_  Number of equally-separated isochrones to
         *                        compute.
         * @param[in] generateImage_  If set to @a true, generates a PNG image
         *                            of the isochrones in the response.
         *                            <ul>
         *                                    <li>
         *                            gpudb::visualize_isochrone_true
         *                                    <li>
         *                            gpudb::visualize_isochrone_false
         *                            </ul>
         *                            The default value is
         *                            gpudb::visualize_isochrone_true.
         * @param[in] levelsTable_  Name of the table to output the isochrones
         *                          to, in [schema_name.]table_name format,
         *                          using standard <a
         *                          href="../../../concepts/tables/#table-name-resolution"
         *                          target="_top">name resolution rules</a> and
         *                          meeting <a
         *                          href="../../../concepts/tables/#table-naming-criteria"
         *                          target="_top">table naming criteria</a>.
         *                          The table will contain levels and their
         *                          corresponding WKT geometry. If no value is
         *                          provided, the table is not generated.
         * @param[in] styleOptions_  Various style related options of the
         *                           isochrone image.
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_line_size: The
         *                           width of the contour lines in pixels.  The
         *                           default value is '3'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_color: Color of
         *                           generated isolines. All color values must
         *                           be in the format RRGGBB or AARRGGBB (to
         *                           specify the alpha value). If alpha is
         *                           specified and flooded contours are
         *                           enabled, it will be used for as the
         *                           transparency of the latter.  The default
         *                           value is 'FF696969'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_bg_color: When
         *                           @a generateImage is set to @a true,
         *                           background color of the generated image.
         *                           All color values must be in the format
         *                           RRGGBB or AARRGGBB (to specify the alpha
         *                           value).  The default value is '00000000'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_text_color:
         *                           When @a add_labels is set to @a true,
         *                           color for the labels. All color values
         *                           must be in the format RRGGBB or AARRGGBB
         *                           (to specify the alpha value).  The default
         *                           value is 'FF000000'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_colormap:
         *                           Colormap for contours or fill-in regions
         *                           when applicable. All color values must be
         *                           in the format RRGGBB or AARRGGBB (to
         *                           specify the alpha value)
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_jet
         *                                   <li>
         *                           gpudb::visualize_isochrone_accent
         *                                   <li>
         *                           gpudb::visualize_isochrone_afmhot
         *                                   <li>
         *                           gpudb::visualize_isochrone_autumn
         *                                   <li>
         *                           gpudb::visualize_isochrone_binary
         *                                   <li>
         *                           gpudb::visualize_isochrone_blues
         *                                   <li>
         *                           gpudb::visualize_isochrone_bone
         *                                   <li>
         *                           gpudb::visualize_isochrone_brbg
         *                                   <li>
         *                           gpudb::visualize_isochrone_brg
         *                                   <li>
         *                           gpudb::visualize_isochrone_bugn
         *                                   <li>
         *                           gpudb::visualize_isochrone_bupu
         *                                   <li>
         *                           gpudb::visualize_isochrone_bwr
         *                                   <li>
         *                           gpudb::visualize_isochrone_cmrmap
         *                                   <li>
         *                           gpudb::visualize_isochrone_cool
         *                                   <li>
         *                           gpudb::visualize_isochrone_coolwarm
         *                                   <li>
         *                           gpudb::visualize_isochrone_copper
         *                                   <li>
         *                           gpudb::visualize_isochrone_cubehelix
         *                                   <li>
         *                           gpudb::visualize_isochrone_dark2
         *                                   <li>
         *                           gpudb::visualize_isochrone_flag
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_earth
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_gray
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_heat
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_ncar
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_rainbow
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_stern
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_yarg
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnuplot2
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnuplot
         *                                   <li>
         *                           gpudb::visualize_isochrone_gray
         *                                   <li>
         *                           gpudb::visualize_isochrone_greens
         *                                   <li>
         *                           gpudb::visualize_isochrone_greys
         *                                   <li>
         *                           gpudb::visualize_isochrone_hot
         *                                   <li>
         *                           gpudb::visualize_isochrone_hsv
         *                                   <li>
         *                           gpudb::visualize_isochrone_inferno
         *                                   <li>
         *                           gpudb::visualize_isochrone_magma
         *                                   <li>
         *                           gpudb::visualize_isochrone_nipy_spectral
         *                                   <li>
         *                           gpudb::visualize_isochrone_ocean
         *                                   <li>
         *                           gpudb::visualize_isochrone_oranges
         *                                   <li>
         *                           gpudb::visualize_isochrone_orrd
         *                                   <li>
         *                           gpudb::visualize_isochrone_paired
         *                                   <li>
         *                           gpudb::visualize_isochrone_pastel1
         *                                   <li>
         *                           gpudb::visualize_isochrone_pastel2
         *                                   <li>
         *                           gpudb::visualize_isochrone_pink
         *                                   <li>
         *                           gpudb::visualize_isochrone_piyg
         *                                   <li>
         *                           gpudb::visualize_isochrone_plasma
         *                                   <li>
         *                           gpudb::visualize_isochrone_prgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_prism
         *                                   <li>
         *                           gpudb::visualize_isochrone_pubu
         *                                   <li>
         *                           gpudb::visualize_isochrone_pubugn
         *                                   <li>
         *                           gpudb::visualize_isochrone_puor
         *                                   <li>
         *                           gpudb::visualize_isochrone_purd
         *                                   <li>
         *                           gpudb::visualize_isochrone_purples
         *                                   <li>
         *                           gpudb::visualize_isochrone_rainbow
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdgy
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdpu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdylbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdylgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_reds
         *                                   <li>
         *                           gpudb::visualize_isochrone_seismic
         *                                   <li>
         *                           gpudb::visualize_isochrone_set1
         *                                   <li>
         *                           gpudb::visualize_isochrone_set2
         *                                   <li>
         *                           gpudb::visualize_isochrone_set3
         *                                   <li>
         *                           gpudb::visualize_isochrone_spectral
         *                                   <li>
         *                           gpudb::visualize_isochrone_spring
         *                                   <li>
         *                           gpudb::visualize_isochrone_summer
         *                                   <li>
         *                           gpudb::visualize_isochrone_terrain
         *                                   <li>
         *                           gpudb::visualize_isochrone_viridis
         *                                   <li>
         *                           gpudb::visualize_isochrone_winter
         *                                   <li>
         *                           gpudb::visualize_isochrone_wistia
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylgnbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylorbr
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylorrd
         *                           </ul>
         *                           The default value is
         *                           gpudb::visualize_isochrone_jet.
         *                           </ul>
         * @param[in] solveOptions_  Solver specific parameters
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_remove_previous_restrictions:
         *                           Ignore the restrictions applied to the
         *                           graph during the creation stage and only
         *                           use the restrictions specified in this
         *                           request if set to @a true.
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_true
         *                                   <li>
         *                           gpudb::visualize_isochrone_false
         *                           </ul>
         *                           The default value is
         *                           gpudb::visualize_isochrone_false.
         *                                   <li>
         *                           gpudb::visualize_isochrone_restriction_threshold_value:
         *                           Value-based restriction comparison. Any
         *                           node or edge with a
         *                           'RESTRICTIONS_VALUECOMPARED' value greater
         *                           than the @a restriction_threshold_value
         *                           will not be included in the solution.
         *                                   <li>
         *                           gpudb::visualize_isochrone_uniform_weights:
         *                           When specified, assigns the given value to
         *                           all the edges in the graph. Note that
         *                           weights provided in @a weightsOnEdges will
         *                           override this value.
         *                           </ul>
         * @param[in] contourOptions_  Solver specific parameters
         *                             <ul>
         *                                     <li>
         *                             gpudb::visualize_isochrone_projection:
         *                             Spatial Reference System (i.e. EPSG
         *                             Code).
         *                             <ul>
         *                                     <li>
         *                             gpudb::visualize_isochrone_3857
         *                                     <li>
         *                             gpudb::visualize_isochrone_102100
         *                                     <li>
         *                             gpudb::visualize_isochrone_900913
         *                                     <li>
         *                             gpudb::visualize_isochrone_EPSG_4326
         *                                     <li>
         *                             gpudb::visualize_isochrone_PLATE_CARREE
         *                                     <li>
         *                             gpudb::visualize_isochrone_EPSG_900913
         *                                     <li>
         *                             gpudb::visualize_isochrone_EPSG_102100
         *                                     <li>
         *                             gpudb::visualize_isochrone_EPSG_3857
         *                                     <li>
         *                             gpudb::visualize_isochrone_WEB_MERCATOR
         *                             </ul>
         *                             The default value is
         *                             gpudb::visualize_isochrone_PLATE_CARREE.
         *                                     <li>
         *                             gpudb::visualize_isochrone_width: When
         *                             @a generateImage is set to @a true,
         *                             width of the generated image.  The
         *                             default value is '512'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_height: When
         *                             @a generateImage is set to @a true,
         *                             height of the generated image. If the
         *                             default value is used, the @a height is
         *                             set to the value resulting from
         *                             multiplying the aspect ratio by the @a
         *                             width.  The default value is '-1'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_search_radius:
         *                             When interpolating the graph solution to
         *                             generate the isochrone, neighborhood of
         *                             influence of sample data (in percent of
         *                             the image/grid).  The default value is
         *                             '20'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_grid_size:
         *                             When interpolating the graph solution to
         *                             generate the isochrone, number of
         *                             subdivisions along the x axis when
         *                             building the grid (the y is computed
         *                             using the aspect ratio of the output
         *                             image).  The default value is '100'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_color_isolines:
         *                             Color each isoline according to the
         *                             colormap; otherwise, use the foreground
         *                             color.
         *                             <ul>
         *                                     <li>
         *                             gpudb::visualize_isochrone_true
         *                                     <li>
         *                             gpudb::visualize_isochrone_false
         *                             </ul>
         *                             The default value is
         *                             gpudb::visualize_isochrone_true.
         *                                     <li>
         *                             gpudb::visualize_isochrone_add_labels:
         *                             If set to @a true, add labels to the
         *                             isolines.
         *                             <ul>
         *                                     <li>
         *                             gpudb::visualize_isochrone_true
         *                                     <li>
         *                             gpudb::visualize_isochrone_false
         *                             </ul>
         *                             The default value is
         *                             gpudb::visualize_isochrone_false.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_font_size:
         *                             When @a add_labels is set to @a true,
         *                             size of the font (in pixels) to use for
         *                             labels.  The default value is '12'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_font_family:
         *                             When @a add_labels is set to @a true,
         *                             font name to be used when adding labels.
         *                             The default value is 'arial'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_search_window:
         *                             When @a add_labels is set to @a true, a
         *                             search window is used to rate the local
         *                             quality of each isoline. Smooth,
         *                             continuous, long stretches with
         *                             relatively flat angles are favored. The
         *                             provided value is multiplied by the @a
         *                             labels_font_size to calculate the final
         *                             window size.  The default value is '4'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_intralevel_separation:
         *                             When @a add_labels is set to @a true,
         *                             this value determines the  distance (in
         *                             multiples of the @a labels_font_size) to
         *                             use when separating labels of different
         *                             values.  The default value is '4'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_interlevel_separation:
         *                             When @a add_labels is set to @a true,
         *                             this value determines the distance (in
         *                             percent of the total window size) to use
         *                             when separating labels of the same
         *                             value.  The default value is '20'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_max_angle:
         *                             When @a add_labels is set to @a true,
         *                             maximum angle (in degrees) from the
         *                             vertical to use when adding labels.  The
         *                             default value is '60'.
         *                             </ul>
         * @param[in] options_  Additional parameters
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_isochrone_solve_table: Name of
         *                      the table to host intermediate solve results,
         *                      in [schema_name.]table_name format, using
         *                      standard <a
         *                      href="../../../concepts/tables/#table-name-resolution"
         *                      target="_top">name resolution rules</a> and
         *                      meeting <a
         *                      href="../../../concepts/tables/#table-naming-criteria"
         *                      target="_top">table naming criteria</a>.  This
         *                      table will contain the position and cost for
         *                      each vertex in the graph. If the default value
         *                      is used, a temporary table is created and
         *                      deleted once the solution is calculated.  The
         *                      default value is ''.
         *                              <li>
         *                      gpudb::visualize_isochrone_is_replicated: If
         *                      set to @a true, replicate the @a solve_table.
         *                      <ul>
         *                              <li> gpudb::visualize_isochrone_true
         *                              <li> gpudb::visualize_isochrone_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_isochrone_true.
         *                              <li>
         *                      gpudb::visualize_isochrone_data_min_x: Lower
         *                      bound for the x values. If not provided, it
         *                      will be computed from the bounds of the input
         *                      data.
         *                              <li>
         *                      gpudb::visualize_isochrone_data_max_x: Upper
         *                      bound for the x values. If not provided, it
         *                      will be computed from the bounds of the input
         *                      data.
         *                              <li>
         *                      gpudb::visualize_isochrone_data_min_y: Lower
         *                      bound for the y values. If not provided, it
         *                      will be computed from the bounds of the input
         *                      data.
         *                              <li>
         *                      gpudb::visualize_isochrone_data_max_y: Upper
         *                      bound for the y values. If not provided, it
         *                      will be computed from the bounds of the input
         *                      data.
         *                              <li>
         *                      gpudb::visualize_isochrone_concavity_level:
         *                      Factor to qualify the concavity of the
         *                      isochrone curves. The lower the value, the more
         *                      convex (with '0' being completely convex and
         *                      '1' being the most concave).  The default value
         *                      is '0.5'.
         *                              <li>
         *                      gpudb::visualize_isochrone_use_priority_queue_solvers:
         *                      sets the solver methods explicitly if true
         *                      <ul>
         *                              <li> gpudb::visualize_isochrone_true:
         *                      uses the solvers scheduled for 'shortest_path'
         *                      and 'inverse_shortest_path' based on
         *                      solve_direction
         *                              <li> gpudb::visualize_isochrone_false:
         *                      uses the solvers 'priority_queue' and
         *                      'inverse_priority_queue' based on
         *                      solve_direction
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_isochrone_false.
         *                              <li>
         *                      gpudb::visualize_isochrone_solve_direction:
         *                      Specify whether we are going to the source
         *                      node, or starting from it.
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_isochrone_from_source:
         *                      Shortest path to get to the source (inverse
         *                      Dijkstra)
         *                              <li>
         *                      gpudb::visualize_isochrone_to_source: Shortest
         *                      path to source (Dijkstra)
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_isochrone_from_source.
         *                      </ul>
         * 
         */
        VisualizeIsochroneRequest(const std::string& graphName_, const std::string& sourceNode_, const double maxSolutionRadius_, const std::vector<std::string>& weightsOnEdges_, const std::vector<std::string>& restrictions_, const int32_t numLevels_, const bool generateImage_, const std::string& levelsTable_, const std::map<std::string, std::string>& styleOptions_, const std::map<std::string, std::string>& solveOptions_, const std::map<std::string, std::string>& contourOptions_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            sourceNode( sourceNode_ ),
            maxSolutionRadius( maxSolutionRadius_ ),
            weightsOnEdges( weightsOnEdges_ ),
            restrictions( restrictions_ ),
            numLevels( numLevels_ ),
            generateImage( generateImage_ ),
            levelsTable( levelsTable_ ),
            styleOptions( styleOptions_ ),
            solveOptions( solveOptions_ ),
            contourOptions( contourOptions_ ),
            options( options_ )
        {
        }

        std::string graphName;
        std::string sourceNode;
        double maxSolutionRadius;
        std::vector<std::string> weightsOnEdges;
        std::vector<std::string> restrictions;
        int32_t numLevels;
        bool generateImage;
        std::string levelsTable;
        std::map<std::string, std::string> styleOptions;
        std::map<std::string, std::string> solveOptions;
        std::map<std::string, std::string> contourOptions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.sourceNode);
            ::avro::encode(e, v.maxSolutionRadius);
            ::avro::encode(e, v.weightsOnEdges);
            ::avro::encode(e, v.restrictions);
            ::avro::encode(e, v.numLevels);
            ::avro::encode(e, v.generateImage);
            ::avro::encode(e, v.levelsTable);
            ::avro::encode(e, v.styleOptions);
            ::avro::encode(e, v.solveOptions);
            ::avro::encode(e, v.contourOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceNode);
                            break;

                        case 2:
                            ::avro::decode(d, v.maxSolutionRadius);
                            break;

                        case 3:
                            ::avro::decode(d, v.weightsOnEdges);
                            break;

                        case 4:
                            ::avro::decode(d, v.restrictions);
                            break;

                        case 5:
                            ::avro::decode(d, v.numLevels);
                            break;

                        case 6:
                            ::avro::decode(d, v.generateImage);
                            break;

                        case 7:
                            ::avro::decode(d, v.levelsTable);
                            break;

                        case 8:
                            ::avro::decode(d, v.styleOptions);
                            break;

                        case 9:
                            ::avro::decode(d, v.solveOptions);
                            break;

                        case 10:
                            ::avro::decode(d, v.contourOptions);
                            break;

                        case 11:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.sourceNode);
                ::avro::decode(d, v.maxSolutionRadius);
                ::avro::decode(d, v.weightsOnEdges);
                ::avro::decode(d, v.restrictions);
                ::avro::decode(d, v.numLevels);
                ::avro::decode(d, v.generateImage);
                ::avro::decode(d, v.levelsTable);
                ::avro::decode(d, v.styleOptions);
                ::avro::decode(d, v.solveOptions);
                ::avro::decode(d, v.contourOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #visualizeIsochrone(const VisualizeIsochroneRequest&) const}.
     * <p>
     * Generate an image containing isolines for travel results using an
     * existing graph. Isolines represent curves of equal cost, with cost
     * typically
     * referring to the time or distance assigned as the weights of the
     * underlying
     * graph. See
     * <a href="../../../graph_solver/network_graph_solver/"
     * target="_top">Network Graphs & Solvers</a>
     * for more information on graphs.
     */
    struct VisualizeIsochroneResponse
    {

        /**
         * Constructs a VisualizeIsochroneResponse object with default
         * parameter values.
         */
        VisualizeIsochroneResponse() :
            width(int32_t()),
            height(int32_t()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>()),
            info(std::map<std::string, std::string>()),
            solveInfo(std::map<std::string, std::string>()),
            contourInfo(std::map<std::string, std::string>())
        {
        }

        int32_t width;
        int32_t height;
        int64_t bgColor;
        std::vector<uint8_t> imageData;
        std::map<std::string, std::string> info;
        std::map<std::string, std::string> solveInfo;
        std::map<std::string, std::string> contourInfo;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
            ::avro::encode(e, v.info);
            ::avro::encode(e, v.solveInfo);
            ::avro::encode(e, v.contourInfo);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        case 5:
                            ::avro::decode(d, v.solveInfo);
                            break;

                        case 6:
                            ::avro::decode(d, v.contourInfo);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
                ::avro::decode(d, v.info);
                ::avro::decode(d, v.solveInfo);
                ::avro::decode(d, v.contourInfo);
            }
        }
    };
}

#endif
