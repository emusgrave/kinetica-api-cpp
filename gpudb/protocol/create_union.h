/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_UNION_H__
#define __CREATE_UNION_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createUnion(const CreateUnionRequest&) const}.
     * <p>
     * Merges data from one or more tables with comparable data types into a
     * new table.
     * <p>
     * The following merges are supported:
     * <p>
     * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
     * href="../../../concepts/unions/" target="_top">Union</a>.  For
     * limitations, see <a
     * href="../../../concepts/unions/#limitations-and-cautions"
     * target="_top">Union Limitations and Cautions</a>.
     * <p>
     * INTERSECT (DISTINCT/ALL) - For data set intersection details and
     * examples, see <a href="../../../concepts/intersect/"
     * target="_top">Intersect</a>.  For limitations, see <a
     * href="../../../concepts/intersect/#limitations" target="_top">Intersect
     * Limitations</a>.
     * <p>
     * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples,
     * see <a href="../../../concepts/except/" target="_top">Except</a>.  For
     * limitations, see <a href="../../../concepts/except/#limitations"
     * target="_top">Except Limitations</a>.
     * <p>
     * MERGE VIEWS - For a given set of <a
     * href="../../../concepts/filtered_views/" target="_top">filtered
     * views</a> on a single table, creates a single filtered view containing
     * all of the unique records across all of the given filtered data sets.
     * <p>
     * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
     * columns marked as <a href="../../../concepts/types/#data-handling"
     * target="_top">store-only</a>.
     */
    struct CreateUnionRequest
    {

        /**
         * Constructs a CreateUnionRequest object with default parameter
         * values.
         */
        CreateUnionRequest() :
            tableName(std::string()),
            tableNames(std::vector<std::string>()),
            inputColumnNames(std::vector<std::vector<std::string> >()),
            outputColumnNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateUnionRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table to be created, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a> and
         *                        meeting <a
         *                        href="../../../concepts/tables/#table-naming-criteria"
         *                        target="_top">table naming criteria</a>.
         * @param[in] tableNames_  The list of table names to merge, in
         *                         [schema_name.]table_name format, using
         *                         standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         *                         Must contain the names of one or more
         *                         existing tables.
         * @param[in] inputColumnNames_  The list of columns from each of the
         *                               corresponding input tables.
         * @param[in] outputColumnNames_  The list of names of the columns to
         *                                be stored in the output table.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_union_create_temp_table: If @a
         *                      true, a unique temporary table name will be
         *                      generated in the sys_temp schema and used in
         *                      place of @a tableName. If @a persist is @a
         *                      false (or unspecified), then this is always
         *                      allowed even if the caller does not have
         *                      permission to create tables. The generated name
         *                      is returned in @a qualified_table_name.
         *                      <ul>
         *                              <li> gpudb::create_union_true
         *                              <li> gpudb::create_union_false
         *                      </ul>
         *                      The default value is gpudb::create_union_false.
         *                              <li>
         *                      gpudb::create_union_collection_name:
         *                      [DEPRECATED--please specify the containing
         *                      schema for the projection as part of @a
         *                      tableName and use /create/schema to create the
         *                      schema if non-existent]  Name of the schema for
         *                      the output table. If the schema provided is
         *                      non-existent, it will be automatically created.
         *                      The default value is ''.
         *                              <li> gpudb::create_union_mode: If @a
         *                      merge_views, then this operation will merge the
         *                      provided views. All @a tableNames must be views
         *                      from the same underlying base table.
         *                      <ul>
         *                              <li> gpudb::create_union_union_all:
         *                      Retains all rows from the specified tables.
         *                              <li> gpudb::create_union_union: Retains
         *                      all unique rows from the specified tables
         *                      (synonym for @a union_distinct).
         *                              <li>
         *                      gpudb::create_union_union_distinct: Retains all
         *                      unique rows from the specified tables.
         *                              <li> gpudb::create_union_except:
         *                      Retains all unique rows from the first table
         *                      that do not appear in the second table (only
         *                      works on 2 tables).
         *                              <li> gpudb::create_union_except_all:
         *                      Retains all rows(including duplicates) from the
         *                      first table that do not appear in the second
         *                      table (only works on 2 tables).
         *                              <li> gpudb::create_union_intersect:
         *                      Retains all unique rows that appear in both of
         *                      the specified tables (only works on 2 tables).
         *                              <li> gpudb::create_union_intersect_all:
         *                      Retains all rows(including duplicates) that
         *                      appear in both of the specified tables (only
         *                      works on 2 tables).
         *                              <li> gpudb::create_union_merge_views:
         *                      Merge two or more views (or views of views) of
         *                      the same base data set into a new view. If this
         *                      mode is selected @a inputColumnNames AND @a
         *                      outputColumnNames must be empty. The resulting
         *                      view would match the results of a SQL OR
         *                      operation, e.g., if filter 1 creates a view
         *                      using the expression 'x = 20' and filter 2
         *                      creates a view using the expression 'x <= 10',
         *                      then the merge views operation creates a new
         *                      view using the expression 'x = 20 OR x <= 10'.
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_union_union_all.
         *                              <li> gpudb::create_union_chunk_size:
         *                      Indicates the number of records per chunk to be
         *                      used for this output table.
         *                              <li>
         *                      gpudb::create_union_create_indexes:
         *                      Comma-separated list of columns on which to
         *                      create indexes on the output table.  The
         *                      columns specified must be present in @a
         *                      outputColumnNames.
         *                              <li> gpudb::create_union_ttl: Sets the
         *                      <a href="../../../concepts/ttl/"
         *                      target="_top">TTL</a> of the output table
         *                      specified in @a tableName.
         *                              <li> gpudb::create_union_persist: If @a
         *                      true, then the output table specified in @a
         *                      tableName will be persisted and will not expire
         *                      unless a @a ttl is specified.   If @a false,
         *                      then the output table will be an in-memory
         *                      table and will expire unless a @a ttl is
         *                      specified otherwise.
         *                      <ul>
         *                              <li> gpudb::create_union_true
         *                              <li> gpudb::create_union_false
         *                      </ul>
         *                      The default value is gpudb::create_union_false.
         *                              <li> gpudb::create_union_view_id: ID of
         *                      view of which this output table is a member.
         *                      The default value is ''.
         *                              <li>
         *                      gpudb::create_union_force_replicated: If @a
         *                      true, then the output table specified in @a
         *                      tableName will be replicated even if the source
         *                      tables are not.
         *                      <ul>
         *                              <li> gpudb::create_union_true
         *                              <li> gpudb::create_union_false
         *                      </ul>
         *                      The default value is gpudb::create_union_false.
         *                              <li>
         *                      gpudb::create_union_strategy_definition: The <a
         *                      href="../../../rm/concepts/#tier-strategies"
         *                      target="_top">tier strategy</a> for the table
         *                      and its columns.
         *                      </ul>
         * 
         */
        CreateUnionRequest(const std::string& tableName_, const std::vector<std::string>& tableNames_, const std::vector<std::vector<std::string> >& inputColumnNames_, const std::vector<std::string>& outputColumnNames_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            tableNames( tableNames_ ),
            inputColumnNames( inputColumnNames_ ),
            outputColumnNames( outputColumnNames_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> tableNames;
        std::vector<std::vector<std::string> > inputColumnNames;
        std::vector<std::string> outputColumnNames;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateUnionRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateUnionRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.inputColumnNames);
            ::avro::encode(e, v.outputColumnNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateUnionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.inputColumnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.outputColumnNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.inputColumnNames);
                ::avro::decode(d, v.outputColumnNames);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createUnion(const CreateUnionRequest&) const}.
     * <p>
     * Merges data from one or more tables with comparable data types into a
     * new table.
     * <p>
     * The following merges are supported:
     * <p>
     * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
     * href="../../../concepts/unions/" target="_top">Union</a>.  For
     * limitations, see <a
     * href="../../../concepts/unions/#limitations-and-cautions"
     * target="_top">Union Limitations and Cautions</a>.
     * <p>
     * INTERSECT (DISTINCT/ALL) - For data set intersection details and
     * examples, see <a href="../../../concepts/intersect/"
     * target="_top">Intersect</a>.  For limitations, see <a
     * href="../../../concepts/intersect/#limitations" target="_top">Intersect
     * Limitations</a>.
     * <p>
     * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples,
     * see <a href="../../../concepts/except/" target="_top">Except</a>.  For
     * limitations, see <a href="../../../concepts/except/#limitations"
     * target="_top">Except Limitations</a>.
     * <p>
     * MERGE VIEWS - For a given set of <a
     * href="../../../concepts/filtered_views/" target="_top">filtered
     * views</a> on a single table, creates a single filtered view containing
     * all of the unique records across all of the given filtered data sets.
     * <p>
     * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
     * columns marked as <a href="../../../concepts/types/#data-handling"
     * target="_top">store-only</a>.
     */
    struct CreateUnionResponse
    {

        /**
         * Constructs a CreateUnionResponse object with default parameter
         * values.
         */
        CreateUnionResponse() :
            tableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateUnionResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateUnionResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateUnionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
