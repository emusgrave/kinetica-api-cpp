/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __KILL_PROC_H__
#define __KILL_PROC_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::killProc(const KillProcRequest&) const "GPUdb::killProc".
     *
     * Kills a running proc instance.
     */
    struct KillProcRequest
    {
        /**
         * Constructs a KillProcRequest object with default parameters.
         */
        KillProcRequest() :
            runId(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a KillProcRequest object with the specified parameters.
         *
         * @param[in] runId_  The run ID of a running proc instance. If a proc
         *                    with a matching run ID is not found or the proc
         *                    instance has already completed, no procs will be
         *                    killed. If not specified, all running proc
         *                    instances will be killed. The default value is
         *                    ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::kill_proc_run_tag
         *                              "kill_proc_run_tag": If @a runId_ is
         *                              specified, kill the proc instance that
         *                              has a matching run ID and a matching
         *                              run tag that was provided to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc". If @a runId_ is
         *                              not specified, kill the proc
         *                              instance(s) where a matching run tag
         *                              was provided to @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc". The default value
         *                              is ''.
         *                          <li>@ref
         *                              gpudb::kill_proc_clear_execute_at_startup
         *                              "kill_proc_clear_execute_at_startup":
         *                              If @ref gpudb::kill_proc_true "true",
         *                              kill and remove the instance of the
         *                              proc matching the auto-start run ID
         *                              that was created to run when the
         *                              database is started. The auto-start run
         *                              ID was returned from @ref
         *                              GPUdb::executeProc(const ExecuteProcRequest&) const
         *                              "GPUdb::executeProc" and can be
         *                              retrieved using @ref
         *                              GPUdb::showProc(const ShowProcRequest&) const
         *                              "GPUdb::showProc".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::kill_proc_true
         *                                      "kill_proc_true"
         *                                  <li>@ref gpudb::kill_proc_false
         *                                      "kill_proc_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::kill_proc_false
         *                              "kill_proc_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        KillProcRequest(const std::string& runId_, const std::map<std::string, std::string>& options_):
            runId( runId_ ),
            options( options_ )
        {
        }

        /**
         * The run ID of a running proc instance. If a proc with a matching run
         * ID is not found or the proc instance has already completed, no procs
         * will be killed. If not specified, all running proc instances will be
         * killed. The default value is ''.
         */
        std::string runId;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::kill_proc_run_tag "kill_proc_run_tag": If @ref
         *         runId is specified, kill the proc instance that has a
         *         matching run ID and a matching run tag that was provided to
         *         @ref GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc". If @ref runId is not specified, kill
         *         the proc instance(s) where a matching run tag was provided
         *         to @ref GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc". The default value is ''.
         *     <li>@ref gpudb::kill_proc_clear_execute_at_startup
         *         "kill_proc_clear_execute_at_startup": If @ref
         *         gpudb::kill_proc_true "true", kill and remove the instance
         *         of the proc matching the auto-start run ID that was created
         *         to run when the database is started. The auto-start run ID
         *         was returned from @ref
         *         GPUdb::executeProc(const ExecuteProcRequest&) const
         *         "GPUdb::executeProc" and can be retrieved using @ref
         *         GPUdb::showProc(const ShowProcRequest&) const
         *         "GPUdb::showProc".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::kill_proc_true "kill_proc_true"
         *             <li>@ref gpudb::kill_proc_false "kill_proc_false"
         *         </ul>
         *         The default value is @ref gpudb::kill_proc_false
         *         "kill_proc_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::KillProcRequest>
    {
        static void encode(Encoder& e, const gpudb::KillProcRequest& v)
        {
            ::avro::encode(e, v.runId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::KillProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runId);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::killProc(const KillProcRequest&) const "GPUdb::killProc".
     */
    struct KillProcResponse
    {
        /**
         * Constructs a KillProcResponse object with default parameters.
         */
        KillProcResponse() :
            runIds(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * List of run IDs of proc instances that were killed.
         */
        std::vector<std::string> runIds;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::KillProcResponse>
    {
        static void encode(Encoder& e, const gpudb::KillProcResponse& v)
        {
            ::avro::encode(e, v.runIds);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::KillProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runIds);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __KILL_PROC_H__
