/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_SHOW_ALERTS_H__
#define __ADMIN_SHOW_ALERTS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::adminShowAlerts(const AdminShowAlertsRequest&) const
     * "GPUdb::adminShowAlerts".
     *
     * Requests a list of the most recent alerts.
     * Returns lists of alert data, including timestamp and type.
     */
    struct AdminShowAlertsRequest
    {
        /**
         * Constructs an AdminShowAlertsRequest object with default parameters.
         */
        AdminShowAlertsRequest() :
            numAlerts(int32_t()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminShowAlertsRequest object with the specified
         * parameters.
         *
         * @param[in] numAlerts_  Number of most recent alerts to request. The
         *                        response will include up to @a numAlerts_
         *                        depending on how many alerts there are in the
         *                        system. A value of 0 returns all stored
         *                        alerts.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        AdminShowAlertsRequest(const int32_t numAlerts_, const std::map<std::string, std::string>& options_):
            numAlerts( numAlerts_ ),
            options( options_ )
        {
        }

        /**
         * Number of most recent alerts to request. The response will include
         * up to @ref numAlerts depending on how many alerts there are in the
         * system. A value of 0 returns all stored alerts.
         */
        int32_t numAlerts;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminShowAlertsRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminShowAlertsRequest& v)
        {
            ::avro::encode(e, v.numAlerts);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminShowAlertsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.numAlerts);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.numAlerts);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::adminShowAlerts(const AdminShowAlertsRequest&) const
     * "GPUdb::adminShowAlerts".
     */
    struct AdminShowAlertsResponse
    {
        /**
         * Constructs an AdminShowAlertsResponse object with default
         * parameters.
         */
        AdminShowAlertsResponse() :
            timestamps(std::vector<std::string>()),
            types(std::vector<std::string>()),
            params(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Timestamp for when the alert occurred, sorted from most recent to
         * least recent. Each array entry corresponds with the entries at the
         * same index in @ref types and @ref params.
         */
        std::vector<std::string> timestamps;

        /**
         * Type of system alert, sorted from most recent to least recent. Each
         * array entry corresponds with the entries at the same index in @ref
         * timestamps and @ref params.
         */
        std::vector<std::string> types;

        /**
         * Parameters for each alert, sorted from most recent to least recent.
         * Each array entry corresponds with the entries at the same index in
         * @ref timestamps and @ref types.
         */
        std::vector<std::map<std::string, std::string> > params;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AdminShowAlertsResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminShowAlertsResponse& v)
        {
            ::avro::encode(e, v.timestamps);
            ::avro::encode(e, v.types);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminShowAlertsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.timestamps);
                            break;

                        case 1:
                            ::avro::decode(d, v.types);
                            break;

                        case 2:
                            ::avro::decode(d, v.params);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.timestamps);
                ::avro::decode(d, v.types);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ADMIN_SHOW_ALERTS_H__
