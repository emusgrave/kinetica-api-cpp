/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_DIRECTORY_H__
#define __ALTER_DIRECTORY_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterDirectory(const AlterDirectoryRequest&) const}.
     * <p>
     * Alters an existing directory in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct AlterDirectoryRequest
    {

        /**
         * Constructs an AlterDirectoryRequest object with default parameter
         * values.
         */
        AlterDirectoryRequest() :
            directoryName(std::string()),
            directoryUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterDirectoryRequest object with the specified
         * parameters.
         * 
         * @param[in] directoryName_  Name of the directory in KiFS to be
         *                            altered.
         * @param[in] directoryUpdatesMap_  Map containing the properties of
         *                                  the directory to be altered. Error
         *                                  if empty.
         *                                  <ul>
         *                                          <li>
         *                                  gpudb::alter_directory_data_limit:
         *                                  The maximum capacity, in bytes, to
         *                                  apply to the directory. Set to -1
         *                                  to indicate no upper limit.
         *                                  </ul>
         * @param[in] options_  Optional parameters.
         * 
         */
        AlterDirectoryRequest(const std::string& directoryName_, const std::map<std::string, std::string>& directoryUpdatesMap_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            directoryUpdatesMap( directoryUpdatesMap_ ),
            options( options_ )
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> directoryUpdatesMap;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterDirectoryRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterDirectoryRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.directoryUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterDirectoryRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.directoryUpdatesMap);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.directoryUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterDirectory(const AlterDirectoryRequest&) const}.
     * <p>
     * Alters an existing directory in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct AlterDirectoryResponse
    {

        /**
         * Constructs an AlterDirectoryResponse object with default parameter
         * values.
         */
        AlterDirectoryResponse() :
            directoryName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterDirectoryResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterDirectoryResponse& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterDirectoryResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
