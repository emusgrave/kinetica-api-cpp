/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_DIRECTORIES_H__
#define __SHOW_DIRECTORIES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showDirectories(const ShowDirectoriesRequest&) const}.
     * <p>
     * Shows information about directories in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. Can be used to show a single directory, or all
     * directories.
     */
    struct ShowDirectoriesRequest
    {

        /**
         * Constructs a ShowDirectoriesRequest object with default parameter
         * values.
         */
        ShowDirectoriesRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowDirectoriesRequest object with the specified
         * parameters.
         * 
         * @param[in] directoryName_  The KiFS directory name to show. If
         *                            empty, shows all directories.
         * @param[in] options_  Optional parameters.
         * 
         */
        ShowDirectoriesRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        std::string directoryName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDirectoriesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowDirectoriesRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowDirectoriesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showDirectories(const ShowDirectoriesRequest&) const}.
     * <p>
     * Shows information about directories in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. Can be used to show a single directory, or all
     * directories.
     */
    struct ShowDirectoriesResponse
    {

        /**
         * Constructs a ShowDirectoriesResponse object with default parameter
         * values.
         */
        ShowDirectoriesResponse() :
            directories(std::vector<std::string>()),
            users(std::vector<std::string>()),
            creationTimes(std::vector<int64_t>()),
            permissions(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> directories;
        std::vector<std::string> users;
        std::vector<int64_t> creationTimes;
        std::vector<std::string> permissions;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDirectoriesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowDirectoriesResponse& v)
        {
            ::avro::encode(e, v.directories);
            ::avro::encode(e, v.users);
            ::avro::encode(e, v.creationTimes);
            ::avro::encode(e, v.permissions);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowDirectoriesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directories);
                            break;

                        case 1:
                            ::avro::decode(d, v.users);
                            break;

                        case 2:
                            ::avro::decode(d, v.creationTimes);
                            break;

                        case 3:
                            ::avro::decode(d, v.permissions);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directories);
                ::avro::decode(d, v.users);
                ::avro::decode(d, v.creationTimes);
                ::avro::decode(d, v.permissions);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
