/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_DIRECTORIES_H__
#define __SHOW_DIRECTORIES_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::showDirectories(const ShowDirectoriesRequest&) const
     * "GPUdb::showDirectories".
     *
     * Shows information about directories in <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>. Can be used to show a single directory, or all
     * directories.
     */
    struct ShowDirectoriesRequest
    {
        /**
         * Constructs a ShowDirectoriesRequest object with default parameters.
         */
        ShowDirectoriesRequest() :
            directoryName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowDirectoriesRequest object with the specified
         * parameters.
         *
         * @param[in] directoryName_  The KiFS directory name to show. If
         *                            empty, shows all directories. The default
         *                            value is ''.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        ShowDirectoriesRequest(const std::string& directoryName_, const std::map<std::string, std::string>& options_):
            directoryName( directoryName_ ),
            options( options_ )
        {
        }

        /**
         * The KiFS directory name to show. If empty, shows all directories.
         * The default value is ''.
         */
        std::string directoryName;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDirectoriesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowDirectoriesRequest& v)
        {
            ::avro::encode(e, v.directoryName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowDirectoriesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directoryName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directoryName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::showDirectories(const ShowDirectoriesRequest&) const
     * "GPUdb::showDirectories".
     */
    struct ShowDirectoriesResponse
    {
        /**
         * Constructs a ShowDirectoriesResponse object with default parameters.
         */
        ShowDirectoriesResponse() :
            directories(std::vector<std::string>()),
            users(std::vector<std::string>()),
            creationTimes(std::vector<int64_t>()),
            dataUsages(std::vector<int64_t>()),
            dataLimits(std::vector<int64_t>()),
            permissions(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * KiFS directory names
         */
        std::vector<std::string> directories;

        /**
         * User that created each directory for the respective directories in
         * @ref directories
         */
        std::vector<std::string> users;

        /**
         * The creation time for each directory in milliseconds since epoch,
         * for the respective directories in @ref directories
         */
        std::vector<int64_t> creationTimes;

        /**
         * The data usage each directory in bytes, for the respective
         * directories in @ref directories
         */
        std::vector<int64_t> dataUsages;

        /**
         * The data limit for each directory in bytes, for the respective
         * directories in @ref directories
         */
        std::vector<int64_t> dataLimits;

        /**
         * Highest level of permission the calling user has for the respective
         * directories in @ref directories. Will be empty if no permissions. If
         * a user has been granted both read and write permissions,
         * 'directory_write' will be listed.
         */
        std::vector<std::string> permissions;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDirectoriesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowDirectoriesResponse& v)
        {
            ::avro::encode(e, v.directories);
            ::avro::encode(e, v.users);
            ::avro::encode(e, v.creationTimes);
            ::avro::encode(e, v.dataUsages);
            ::avro::encode(e, v.dataLimits);
            ::avro::encode(e, v.permissions);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowDirectoriesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.directories);
                            break;

                        case 1:
                            ::avro::decode(d, v.users);
                            break;

                        case 2:
                            ::avro::decode(d, v.creationTimes);
                            break;

                        case 3:
                            ::avro::decode(d, v.dataUsages);
                            break;

                        case 4:
                            ::avro::decode(d, v.dataLimits);
                            break;

                        case 5:
                            ::avro::decode(d, v.permissions);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.directories);
                ::avro::decode(d, v.users);
                ::avro::decode(d, v.creationTimes);
                ::avro::decode(d, v.dataUsages);
                ::avro::decode(d, v.dataLimits);
                ::avro::decode(d, v.permissions);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __SHOW_DIRECTORIES_H__
