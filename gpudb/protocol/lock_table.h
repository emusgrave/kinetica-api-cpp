/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __LOCK_TABLE_H__
#define __LOCK_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::lockTable(const LockTableRequest&) const "GPUdb::lockTable".
     *
     * Manages global access to a table's data.  By default a table has a @ref
     * lockType of @ref gpudb::lock_table_read_write "read_write", indicating
     * all operations are permitted.  A user may request a @ref
     * gpudb::lock_table_read_only "read_only" or a @ref
     * gpudb::lock_table_write_only "write_only" lock, after which only read or
     * write operations, respectively, are permitted on the table until the
     * lock is removed.  When @ref lockType is @ref gpudb::lock_table_no_access
     * "no_access" then no operations are permitted on the table.  The lock
     * status can be queried by setting @ref lockType to @ref
     * gpudb::lock_table_status "status".
     */
    struct LockTableRequest
    {
        /**
         * Constructs a LockTableRequest object with default parameters.
         */
        LockTableRequest() :
            tableName(std::string()),
            lockType(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a LockTableRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table to be locked, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.  It
         *                        must be a currently existing table or view.
         * @param[in] lockType_  The type of lock being applied to the table.
         *                       Setting it to @ref gpudb::lock_table_status
         *                       "status" will return the current lock status
         *                       of the table without changing it.
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::lock_table_status
         *                               "lock_table_status": Show locked
         *                               status
         *                           <li>@ref gpudb::lock_table_no_access
         *                               "lock_table_no_access": Allow no
         *                               read/write operations
         *                           <li>@ref gpudb::lock_table_read_only
         *                               "lock_table_read_only": Allow only
         *                               read operations
         *                           <li>@ref gpudb::lock_table_write_only
         *                               "lock_table_write_only": Allow only
         *                               write operations
         *                           <li>@ref gpudb::lock_table_read_write
         *                               "lock_table_read_write": Allow all
         *                               read/write operations
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::lock_table_status "lock_table_status".
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        LockTableRequest(const std::string& tableName_, const std::string& lockType_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            lockType( lockType_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to be locked, in [ schema_name.\ ]table_name
         * format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  It must be a currently
         * existing table or view.
         */
        std::string tableName;

        /**
         * The type of lock being applied to the table. Setting it to @ref
         * gpudb::lock_table_status "status" will return the current lock
         * status of the table without changing it.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::lock_table_status "lock_table_status": Show
         *         locked status
         *     <li>@ref gpudb::lock_table_no_access "lock_table_no_access":
         *         Allow no read/write operations
         *     <li>@ref gpudb::lock_table_read_only "lock_table_read_only":
         *         Allow only read operations
         *     <li>@ref gpudb::lock_table_write_only "lock_table_write_only":
         *         Allow only write operations
         *     <li>@ref gpudb::lock_table_read_write "lock_table_read_write":
         *         Allow all read/write operations
         * </ul>
         * The default value is @ref gpudb::lock_table_status
         * "lock_table_status".
         */
        std::string lockType;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::LockTableRequest>
    {
        static void encode(Encoder& e, const gpudb::LockTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.lockType);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::LockTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.lockType);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.lockType);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::lockTable(const LockTableRequest&) const "GPUdb::lockTable".
     */
    struct LockTableResponse
    {
        /**
         * Constructs a LockTableResponse object with default parameters.
         */
        LockTableResponse() :
            lockType(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Returns the lock state of the table.
         */
        std::string lockType;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::LockTableResponse>
    {
        static void encode(Encoder& e, const gpudb::LockTableResponse& v)
        {
            ::avro::encode(e, v.lockType);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::LockTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.lockType);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.lockType);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __LOCK_TABLE_H__
