/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_BACKUP_END_H__
#define __ADMIN_BACKUP_END_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminBackupEnd(const AdminBackupEndRequest&) const}.
     * <p>
     * Restores the system to normal operating mode after a backup has
     * completed, allowing any queries that were blocked to complete.
     */
    struct AdminBackupEndRequest
    {

        /**
         * Constructs an AdminBackupEndRequest object with default parameter
         * values.
         */
        AdminBackupEndRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminBackupEndRequest object with the specified
         * parameters.
         * 
         * @param[in] options_  Optional parameters.
         * 
         */
        AdminBackupEndRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminBackupEndRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminBackupEndRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminBackupEndRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminBackupEnd(const AdminBackupEndRequest&) const}.
     * <p>
     * Restores the system to normal operating mode after a backup has
     * completed, allowing any queries that were blocked to complete.
     */
    struct AdminBackupEndResponse
    {

        /**
         * Constructs an AdminBackupEndResponse object with default parameter
         * values.
         */
        AdminBackupEndResponse() :
            info(std::map<std::string, std::string>())
        {
        }

        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminBackupEndResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminBackupEndResponse& v)
        {
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminBackupEndResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
