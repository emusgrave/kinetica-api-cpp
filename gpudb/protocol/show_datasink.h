/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_DATASINK_H__
#define __SHOW_DATASINK_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showDatasink(const ShowDatasinkRequest&) const}.
     * <p>
     * Shows information about a specified <a
     * href="../../../concepts/data_sinks/" target="_top">data sink</a> or all
     * data sinks.
     */
    struct ShowDatasinkRequest
    {

        /**
         * Constructs a ShowDatasinkRequest object with default parameter
         * values.
         */
        ShowDatasinkRequest() :
            name(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowDatasinkRequest object with the specified
         * parameters.
         * 
         * @param[in] name_  Name of the data sink for which to retrieve
         *                   information. The name must refer to a currently
         *                   existing data sink. If '*' is specified,
         *                   information about all data sinks will be returned.
         * @param[in] options_  Optional parameters.
         * 
         */
        ShowDatasinkRequest(const std::string& name_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            options( options_ )
        {
        }

        std::string name;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDatasinkRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowDatasinkRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowDatasinkRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showDatasink(const ShowDatasinkRequest&) const}.
     * <p>
     * Shows information about a specified <a
     * href="../../../concepts/data_sinks/" target="_top">data sink</a> or all
     * data sinks.
     */
    struct ShowDatasinkResponse
    {

        /**
         * Constructs a ShowDatasinkResponse object with default parameter
         * values.
         */
        ShowDatasinkResponse() :
            datasinkNames(std::vector<std::string>()),
            destinationTypes(std::vector<std::string>()),
            additionalInfo(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> datasinkNames;
        std::vector<std::string> destinationTypes;
        std::vector<std::map<std::string, std::string> > additionalInfo;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowDatasinkResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowDatasinkResponse& v)
        {
            ::avro::encode(e, v.datasinkNames);
            ::avro::encode(e, v.destinationTypes);
            ::avro::encode(e, v.additionalInfo);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowDatasinkResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.datasinkNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.destinationTypes);
                            break;

                        case 2:
                            ::avro::decode(d, v.additionalInfo);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.datasinkNames);
                ::avro::decode(d, v.destinationTypes);
                ::avro::decode(d, v.additionalInfo);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
