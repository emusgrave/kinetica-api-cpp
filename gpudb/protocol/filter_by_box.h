/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __FILTER_BY_BOX_H__
#define __FILTER_BY_BOX_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::filterByBox(const FilterByBoxRequest&) const
     * "GPUdb::filterByBox".
     *
     * Calculates how many objects within the given table lie in a rectangular
     * box. The operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available. The response payload
     * provides the count of the resulting set. A new resultant set which
     * satisfies the input NAI restriction specification is also created when a
     * @ref viewName is passed in as part of the input payload.
     */
    struct FilterByBoxRequest
    {
        /**
         * Constructs a FilterByBoxRequest object with default parameters.
         */
        FilterByBoxRequest() :
            tableName(std::string()),
            viewName(std::string()),
            xColumnName(std::string()),
            minX(double()),
            maxX(double()),
            yColumnName(std::string()),
            minY(double()),
            maxY(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a FilterByBoxRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table on which the bounding box
         *                        operation will be performed, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] viewName_  If provided, then this will be the name of the
         *                       view containing the results, in
         *                       [schema_name.]view_name format, using standard
         *                       <a
         *                       href="../../../concepts/tables/#table-name-resolution"
         *                       target="_top">name resolution rules</a> and
         *                       meeting <a
         *                       href="../../../concepts/tables/#table-naming-criteria"
         *                       target="_top">table naming criteria</a>.  Must
         *                       not be an already existing table or view. The
         *                       default value is ''.
         * @param[in] xColumnName_  Name of the column on which to perform the
         *                          bounding box query. Must be a valid numeric
         *                          column.
         * @param[in] minX_  Lower bound for the column chosen by @a
         *                   xColumnName_.  Must be less than or equal to @a
         *                   maxX_.
         * @param[in] maxX_  Upper bound for @a xColumnName_.  Must be greater
         *                   than or equal to @a minX_.
         * @param[in] yColumnName_  Name of a column on which to perform the
         *                          bounding box query. Must be a valid numeric
         *                          column.
         * @param[in] minY_  Lower bound for @a yColumnName_. Must be less than
         *                   or equal to @a maxY_.
         * @param[in] maxY_  Upper bound for @a yColumnName_. Must be greater
         *                   than or equal to @a minY_.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::filter_by_box_create_temp_table
         *                              "filter_by_box_create_temp_table": If
         *                              @ref gpudb::filter_by_box_true "true",
         *                              a unique temporary table name will be
         *                              generated in the sys_temp schema and
         *                              used in place of @a viewName_. This is
         *                              always allowed even if the caller does
         *                              not have permission to create tables.
         *                              The generated name is returned in @ref
         *                              gpudb::filter_by_box_qualified_view_name
         *                              "qualified_view_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::filter_by_box_true
         *                                      "filter_by_box_true"
         *                                  <li>@ref gpudb::filter_by_box_false
         *                                      "filter_by_box_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::filter_by_box_false
         *                              "filter_by_box_false".
         *                          <li>@ref
         *                              gpudb::filter_by_box_collection_name
         *                              "filter_by_box_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the view as part
         *                              of @a viewName_ and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema for the newly created view. If
         *                              the schema is non-existent, it will be
         *                              automatically created.
         *                      </ul>
         *                      The default value is an empty map.
         */
        FilterByBoxRequest(const std::string& tableName_, const std::string& viewName_, const std::string& xColumnName_, const double minX_, const double maxX_, const std::string& yColumnName_, const double minY_, const double maxY_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            viewName( viewName_ ),
            xColumnName( xColumnName_ ),
            minX( minX_ ),
            maxX( maxX_ ),
            yColumnName( yColumnName_ ),
            minY( minY_ ),
            maxY( maxY_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table on which the bounding box operation will be
         * performed, in [ schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be an existing table.
         */
        std::string tableName;

        /**
         * If provided, then this will be the name of the view containing the
         * results, in [ schema_name.\ ]view_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  Must not be an already
         * existing table or view. The default value is ''.
         */
        std::string viewName;

        /**
         * Name of the column on which to perform the bounding box query. Must
         * be a valid numeric column.
         */
        std::string xColumnName;

        /**
         * Lower bound for the column chosen by @ref xColumnName.  Must be less
         * than or equal to @ref maxX.
         */
        double minX;

        /**
         * Upper bound for @ref xColumnName.  Must be greater than or equal to
         * @ref minX.
         */
        double maxX;

        /**
         * Name of a column on which to perform the bounding box query. Must be
         * a valid numeric column.
         */
        std::string yColumnName;

        /**
         * Lower bound for @ref yColumnName. Must be less than or equal to @ref
         * maxY.
         */
        double minY;

        /**
         * Upper bound for @ref yColumnName. Must be greater than or equal to
         * @ref minY.
         */
        double maxY;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::filter_by_box_create_temp_table
         *         "filter_by_box_create_temp_table": If @ref
         *         gpudb::filter_by_box_true "true", a unique temporary table
         *         name will be generated in the sys_temp schema and used in
         *         place of @ref viewName. This is always allowed even if the
         *         caller does not have permission to create tables. The
         *         generated name is returned in @ref
         *         gpudb::filter_by_box_qualified_view_name
         *         "qualified_view_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::filter_by_box_true "filter_by_box_true"
         *             <li>@ref gpudb::filter_by_box_false
         *                 "filter_by_box_false"
         *         </ul>
         *         The default value is @ref gpudb::filter_by_box_false
         *         "filter_by_box_false".
         *     <li>@ref gpudb::filter_by_box_collection_name
         *         "filter_by_box_collection_name": [DEPRECATED--please specify
         *         the containing schema for the view as part of @ref viewName
         *         and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema for the newly created view. If the schema
         *         is non-existent, it will be automatically created.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByBoxRequest>
    {
        static void encode(Encoder& e, const gpudb::FilterByBoxRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.xColumnName);
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.yColumnName);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::FilterByBoxRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 2:
                            ::avro::decode(d, v.xColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.minX);
                            break;

                        case 4:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 5:
                            ::avro::decode(d, v.yColumnName);
                            break;

                        case 6:
                            ::avro::decode(d, v.minY);
                            break;

                        case 7:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 8:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.xColumnName);
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.yColumnName);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::filterByBox(const FilterByBoxRequest&) const
     * "GPUdb::filterByBox".
     */
    struct FilterByBoxResponse
    {
        /**
         * Constructs a FilterByBoxResponse object with default parameters.
         */
        FilterByBoxResponse() :
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The number of records passing the box filter.
         */
        int64_t count;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::filter_by_box_qualified_view_name
         *         "filter_by_box_qualified_view_name": The fully qualified
         *         name of the view (i.e. including the schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByBoxResponse>
    {
        static void encode(Encoder& e, const gpudb::FilterByBoxResponse& v)
        {
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::FilterByBoxResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __FILTER_BY_BOX_H__
