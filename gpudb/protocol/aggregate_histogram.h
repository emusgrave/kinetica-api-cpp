/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_HISTOGRAM_H__
#define __AGGREGATE_HISTOGRAM_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::aggregateHistogram(const AggregateHistogramRequest&) const
     * "GPUdb::aggregateHistogram".
     *
     * Performs a histogram calculation given a table, a column, and an
     * interval function. The @ref interval is used to produce bins of that
     * size and the result, computed over the records falling within each bin,
     * is returned. For each bin, the start value is inclusive, but the end
     * value is exclusive--except for the very last bin for which the end value
     * is also inclusive.  The value returned for each bin is the number of
     * records in it, except when a column name is provided as a @ref
     * gpudb::aggregate_histogram_value_column "value_column".  In this latter
     * case the sum of the values corresponding to the @ref
     * gpudb::aggregate_histogram_value_column "value_column" is used as the
     * result instead.  The total number of bins requested cannot exceed
     * 10,000.
     *
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service a request that specifies a @ref
     * gpudb::aggregate_histogram_value_column "value_column".
     */
    struct AggregateHistogramRequest
    {
        /**
         * Constructs an AggregateHistogramRequest object with default
         * parameters.
         */
        AggregateHistogramRequest() :
            tableName(std::string()),
            columnName(std::string()),
            start(double()),
            end(double()),
            interval(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateHistogramRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing table, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnName_  Name of a column or an expression of one or
         *                         more column names over which the histogram
         *                         will be calculated.
         * @param[in] start_  Lower end value of the histogram interval,
         *                    inclusive.
         * @param[in] end_  Upper end value of the histogram interval,
         *                  inclusive.
         * @param[in] interval_  The size of each bin within the start and end
         *                       parameters.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_histogram_value_column
         *                              "aggregate_histogram_value_column": The
         *                              name of the column to use when
         *                              calculating the bin values (values are
         *                              summed).  The column must be a
         *                              numerical type (int, double, long,
         *                              float).
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateHistogramRequest(const std::string& tableName_, const std::string& columnName_, const double start_, const double end_, const double interval_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            start( start_ ),
            end( end_ ),
            interval( interval_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table on which the operation will be performed. Must be
         * an existing table, in [ schema_name.\ ]table_name format, using
         * standard <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * Name of a column or an expression of one or more column names over
         * which the histogram will be calculated.
         */
        std::string columnName;

        /**
         * Lower end value of the histogram interval, inclusive.
         */
        double start;

        /**
         * Upper end value of the histogram interval, inclusive.
         */
        double end;

        /**
         * The size of each bin within the start and end parameters.
         */
        double interval;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::aggregate_histogram_value_column
         *         "aggregate_histogram_value_column": The name of the column
         *         to use when calculating the bin values (values are summed).
         *         The column must be a numerical type (int, double, long,
         *         float).
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateHistogramRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateHistogramRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.start);
            ::avro::encode(e, v.end);
            ::avro::encode(e, v.interval);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateHistogramRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.start);
                            break;

                        case 3:
                            ::avro::decode(d, v.end);
                            break;

                        case 4:
                            ::avro::decode(d, v.interval);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.start);
                ::avro::decode(d, v.end);
                ::avro::decode(d, v.interval);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateHistogram(const AggregateHistogramRequest&) const
     * "GPUdb::aggregateHistogram".
     */
    struct AggregateHistogramResponse
    {
        /**
         * Constructs an AggregateHistogramResponse object with default
         * parameters.
         */
        AggregateHistogramResponse() :
            counts(std::vector<double>()),
            start(double()),
            end(double()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The array of calculated values that represents the histogram data
         * points.
         */
        std::vector<double> counts;

        /**
         * Value of @ref gpudb::AggregateHistogramRequest::start "start".
         */
        double start;

        /**
         * Value of @ref gpudb::AggregateHistogramRequest::end "end".
         */
        double end;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateHistogramResponse>
    {
        static void encode(Encoder& e, const gpudb::AggregateHistogramResponse& v)
        {
            ::avro::encode(e, v.counts);
            ::avro::encode(e, v.start);
            ::avro::encode(e, v.end);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AggregateHistogramResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.counts);
                            break;

                        case 1:
                            ::avro::decode(d, v.start);
                            break;

                        case 2:
                            ::avro::decode(d, v.end);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.counts);
                ::avro::decode(d, v.start);
                ::avro::decode(d, v.end);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __AGGREGATE_HISTOGRAM_H__
