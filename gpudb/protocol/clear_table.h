/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CLEAR_TABLE_H__
#define __CLEAR_TABLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::clearTable(const ClearTableRequest&) const "GPUdb::clearTable".
     *
     * Clears (drops) one or all tables in the database cluster. The operation
     * is synchronous meaning that the table will be cleared before the
     * function returns. The response payload returns the status of the
     * operation along with the name of the table that was cleared.
     */
    struct ClearTableRequest
    {
        /**
         * Constructs a ClearTableRequest object with default parameters.
         */
        ClearTableRequest() :
            tableName(std::string()),
            authorization(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ClearTableRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table to be cleared, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>. Must
         *                        be an existing table. Empty string clears all
         *                        available tables, though this behavior is be
         *                        prevented by default via gpudb.conf parameter
         *                        'disable_clear_all'. The default value is ''.
         * @param[in] authorization_  No longer used. User can pass an empty
         *                            string. The default value is ''.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::clear_table_no_error_if_not_exists
         *                              "clear_table_no_error_if_not_exists":
         *                              If @ref gpudb::clear_table_true "true"
         *                              and if the table specified in @a
         *                              tableName_ does not exist no error is
         *                              returned. If @ref
         *                              gpudb::clear_table_false "false" and if
         *                              the table specified in @a tableName_
         *                              does not exist then an error is
         *                              returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::clear_table_true
         *                                      "clear_table_true"
         *                                  <li>@ref gpudb::clear_table_false
         *                                      "clear_table_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::clear_table_false
         *                              "clear_table_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        ClearTableRequest(const std::string& tableName_, const std::string& authorization_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            authorization( authorization_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to be cleared, in [ schema_name.\ ]table_name
         * format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>. Must be an existing table.
         * Empty string clears all available tables, though this behavior is be
         * prevented by default via gpudb.conf parameter 'disable_clear_all'.
         * The default value is ''.
         */
        std::string tableName;

        /**
         * No longer used. User can pass an empty string. The default value is
         * ''.
         */
        std::string authorization;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::clear_table_no_error_if_not_exists
         *         "clear_table_no_error_if_not_exists": If @ref
         *         gpudb::clear_table_true "true" and if the table specified in
         *         @ref tableName does not exist no error is returned. If @ref
         *         gpudb::clear_table_false "false" and if the table specified
         *         in @ref tableName does not exist then an error is returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::clear_table_true "clear_table_true"
         *             <li>@ref gpudb::clear_table_false "clear_table_false"
         *         </ul>
         *         The default value is @ref gpudb::clear_table_false
         *         "clear_table_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ClearTableRequest>
    {
        static void encode(Encoder& e, const gpudb::ClearTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.authorization);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ClearTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.authorization);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.authorization);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::clearTable(const ClearTableRequest&) const "GPUdb::clearTable".
     */
    struct ClearTableResponse
    {
        /**
         * Constructs a ClearTableResponse object with default parameters.
         */
        ClearTableResponse() :
            tableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::ClearTableRequest::tableName "tableName" for a
         * given table, or 'ALL CLEARED' in case of clearing all tables.
         */
        std::string tableName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::ClearTableResponse>
    {
        static void encode(Encoder& e, const gpudb::ClearTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ClearTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CLEAR_TABLE_H__
