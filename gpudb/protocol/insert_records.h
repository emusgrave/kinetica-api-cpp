/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __INSERT_RECORDS_H__
#define __INSERT_RECORDS_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::insertRecordsRaw(const RawInsertRecordsRequest&) const
     * "GPUdb::insertRecordsRaw".
     *
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     *
     * The @ref options parameter can be used to customize this function's
     * behavior.
     *
     * The @ref gpudb::insert_records_update_on_existing_pk
     * "update_on_existing_pk" option specifies the record collision policy for
     * inserting into a table with a <a
     * href="../../../concepts/tables/#primary-keys" target="_top">primary
     * key</a>, but is ignored if no primary key exists.
     *
     * The @ref gpudb::insert_records_return_record_ids "return_record_ids"
     * option indicates that the database should return the unique identifiers
     * of inserted records.
     */
    struct RawInsertRecordsRequest
    {
        /**
         * Constructs a RawInsertRecordsRequest object with default parameters.
         */
        RawInsertRecordsRequest() :
            tableName(std::string()),
            list(std::vector<std::vector<uint8_t> >()),
            listStr(std::vector<std::string>()),
            listEncoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RawInsertRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to which the records are to be
         *                        added, in [schema_name.]table_name format,
         *                        using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] list_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding_
         *                   is @ref gpudb::insert_records_json "json".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "insert_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref gpudb::insert_records_true
         *                              "true", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will be
         *                              replaced by that new record (the new
         *                              data will be "upserted"). If set to
         *                              @ref gpudb::insert_records_false
         *                              "false", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will remain
         *                              unchanged, while the new record will be
         *                              rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "ignore_existing_pk", @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch", & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key, then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Upsert
         *                                      new records when primary keys
         *                                      match existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Reject
         *                                      new records when primary keys
         *                                      match existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "insert_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when not in upsert mode (upsert
         *                              mode is disabled when @ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_false "false").
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", any
         *                              record being inserted that is rejected
         *                              for having primary key values that
         *                              match those of an existing table record
         *                              will be ignored with no error
         *                              generated.  If @ref
         *                              gpudb::insert_records_false "false",
         *                              the rejection of any record for having
         *                              primary key values matching an existing
         *                              record will result in an error being
         *                              reported, as determined by @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch" & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key or if upsert mode is in effect
         *                              (@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_true "true"),
         *                              then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Ignore
         *                                      new records whose primary key
         *                                      values collide with those of
         *                                      existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Treat
         *                                      as errors any new records whose
         *                                      primary key values collide with
         *                                      those of existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_record_ids
         *                              "insert_records_return_record_ids": If
         *                              @ref gpudb::insert_records_true "true"
         *                              then return the internal record id
         *                              along for each inserted record.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_truncate_strings
         *                              "insert_records_truncate_strings": If
         *                              set to @ref gpudb::insert_records_true
         *                              "true", any strings which are too long
         *                              for their target charN string columns
         *                              will be truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "insert_records_return_individual_errors":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true",
         *                              success will always be returned, and
         *                              any errors found will be included in
         *                              the info map.  The "bad_record_indices"
         *                              entry is a comma-separated list of bad
         *                              records (0-based).  And if so, there
         *                              will also be an "error_N" entry for
         *                              each record with an error, where N is
         *                              the index (0-based).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "insert_records_allow_partial_batch":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", all
         *                              correct records will be inserted and
         *                              incorrect records will be rejected and
         *                              reported.  Otherwise, the entire batch
         *                              will be rejected if any records are
         *                              incorrect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref gpudb::insert_records_dry_run
         *                              "insert_records_dry_run": If set to
         *                              @ref gpudb::insert_records_true "true",
         *                              no data will be saved and any errors
         *                              will be returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        RawInsertRecordsRequest(const std::string& tableName_, const std::vector<std::vector<uint8_t> >& list_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            list( list_ ),
            listStr( std::vector<std::string>() ),
            listEncoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs a RawInsertRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to which the records are to be
         *                        added, in [schema_name.]table_name format,
         *                        using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] list_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding_
         *                   is @ref gpudb::insert_records_json "json".
         * @param[in] listStr_  An array of JSON encoded data for the records
         *                      to be added. All records must be of the same
         *                      type as that of the table. Empty array if @a
         *                      listEncoding_ is @ref
         *                      gpudb::insert_records_binary "binary".
         * @param[in] listEncoding_  The encoding of the records to be
         *                           inserted.
         *                           Supported values:
         *                           <ul>
         *                               <li>@ref gpudb::insert_records_binary
         *                                   "insert_records_binary"
         *                               <li>@ref gpudb::insert_records_json
         *                                   "insert_records_json"
         *                           </ul>
         *                           The default value is @ref
         *                           gpudb::insert_records_binary
         *                           "insert_records_binary".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "insert_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref gpudb::insert_records_true
         *                              "true", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will be
         *                              replaced by that new record (the new
         *                              data will be "upserted"). If set to
         *                              @ref gpudb::insert_records_false
         *                              "false", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will remain
         *                              unchanged, while the new record will be
         *                              rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "ignore_existing_pk", @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch", & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key, then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Upsert
         *                                      new records when primary keys
         *                                      match existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Reject
         *                                      new records when primary keys
         *                                      match existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "insert_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when not in upsert mode (upsert
         *                              mode is disabled when @ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_false "false").
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", any
         *                              record being inserted that is rejected
         *                              for having primary key values that
         *                              match those of an existing table record
         *                              will be ignored with no error
         *                              generated.  If @ref
         *                              gpudb::insert_records_false "false",
         *                              the rejection of any record for having
         *                              primary key values matching an existing
         *                              record will result in an error being
         *                              reported, as determined by @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch" & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key or if upsert mode is in effect
         *                              (@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_true "true"),
         *                              then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Ignore
         *                                      new records whose primary key
         *                                      values collide with those of
         *                                      existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Treat
         *                                      as errors any new records whose
         *                                      primary key values collide with
         *                                      those of existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_record_ids
         *                              "insert_records_return_record_ids": If
         *                              @ref gpudb::insert_records_true "true"
         *                              then return the internal record id
         *                              along for each inserted record.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_truncate_strings
         *                              "insert_records_truncate_strings": If
         *                              set to @ref gpudb::insert_records_true
         *                              "true", any strings which are too long
         *                              for their target charN string columns
         *                              will be truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "insert_records_return_individual_errors":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true",
         *                              success will always be returned, and
         *                              any errors found will be included in
         *                              the info map.  The "bad_record_indices"
         *                              entry is a comma-separated list of bad
         *                              records (0-based).  And if so, there
         *                              will also be an "error_N" entry for
         *                              each record with an error, where N is
         *                              the index (0-based).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "insert_records_allow_partial_batch":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", all
         *                              correct records will be inserted and
         *                              incorrect records will be rejected and
         *                              reported.  Otherwise, the entire batch
         *                              will be rejected if any records are
         *                              incorrect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref gpudb::insert_records_dry_run
         *                              "insert_records_dry_run": If set to
         *                              @ref gpudb::insert_records_true "true",
         *                              no data will be saved and any errors
         *                              will be returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        RawInsertRecordsRequest(const std::string& tableName_, const std::vector<std::vector<uint8_t> >& list_, const std::vector<std::string>& listStr_, const std::string& listEncoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            list( list_ ),
            listStr( listStr_ ),
            listEncoding( listEncoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of table to which the records are to be added, in [
         * schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be an existing table.
         */
        std::string tableName;

        /**
         * An array of binary-encoded data for the records to be added. All
         * records must be of the same type as that of the table. Empty array
         * if @ref listEncoding is @ref gpudb::insert_records_json "json".
         */
        std::vector<std::vector<uint8_t> > list;

        /**
         * An array of JSON encoded data for the records to be added. All
         * records must be of the same type as that of the table. Empty array
         * if @ref listEncoding is @ref gpudb::insert_records_binary "binary".
         */
        std::vector<std::string> listStr;

        /**
         * The encoding of the records to be inserted.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::insert_records_binary "insert_records_binary"
         *     <li>@ref gpudb::insert_records_json "insert_records_json"
         * </ul>
         * The default value is @ref gpudb::insert_records_binary
         * "insert_records_binary".
         */
        std::string listEncoding;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::insert_records_update_on_existing_pk
         *         "insert_records_update_on_existing_pk": Specifies the record
         *         collision policy for inserting into a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>. If set to @ref
         *         gpudb::insert_records_true "true", any existing table record
         *         with primary key values that match those of a record being
         *         inserted will be replaced by that new record (the new data
         *         will be "upserted"). If set to @ref
         *         gpudb::insert_records_false "false", any existing table
         *         record with primary key values that match those of a record
         *         being inserted will remain unchanged, while the new record
         *         will be rejected and the error handled as determined by @ref
         *         gpudb::insert_records_ignore_existing_pk
         *         "ignore_existing_pk", @ref
         *         gpudb::insert_records_allow_partial_batch
         *         "allow_partial_batch", & @ref
         *         gpudb::insert_records_return_individual_errors
         *         "return_individual_errors".  If the specified table does not
         *         have a primary key, then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true": Upsert new records when
         *                 primary keys match existing records
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false": Reject new records when
         *                 primary keys match existing records
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_ignore_existing_pk
         *         "insert_records_ignore_existing_pk": Specifies the record
         *         collision error-suppression policy for inserting into a
         *         table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when not in upsert
         *         mode (upsert mode is disabled when @ref
         *         gpudb::insert_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::insert_records_false
         *         "false").  If set to @ref gpudb::insert_records_true "true",
         *         any record being inserted that is rejected for having
         *         primary key values that match those of an existing table
         *         record will be ignored with no error generated.  If @ref
         *         gpudb::insert_records_false "false", the rejection of any
         *         record for having primary key values matching an existing
         *         record will result in an error being reported, as determined
         *         by @ref gpudb::insert_records_allow_partial_batch
         *         "allow_partial_batch" & @ref
         *         gpudb::insert_records_return_individual_errors
         *         "return_individual_errors".  If the specified table does not
         *         have a primary key or if upsert mode is in effect (@ref
         *         gpudb::insert_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::insert_records_true
         *         "true"), then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true": Ignore new records whose
         *                 primary key values collide with those of existing
         *                 records
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false": Treat as errors any new
         *                 records whose primary key values collide with those
         *                 of existing records
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_return_record_ids
         *         "insert_records_return_record_ids": If @ref
         *         gpudb::insert_records_true "true" then return the internal
         *         record id along for each inserted record.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_truncate_strings
         *         "insert_records_truncate_strings": If set to @ref
         *         gpudb::insert_records_true "true", any strings which are too
         *         long for their target charN string columns will be truncated
         *         to fit.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_return_individual_errors
         *         "insert_records_return_individual_errors": If set to @ref
         *         gpudb::insert_records_true "true", success will always be
         *         returned, and any errors found will be included in the info
         *         map.  The "bad_record_indices" entry is a comma-separated
         *         list of bad records (0-based).  And if so, there will also
         *         be an "error_N" entry for each record with an error, where N
         *         is the index (0-based).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_allow_partial_batch
         *         "insert_records_allow_partial_batch": If set to @ref
         *         gpudb::insert_records_true "true", all correct records will
         *         be inserted and incorrect records will be rejected and
         *         reported.  Otherwise, the entire batch will be rejected if
         *         any records are incorrect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_dry_run "insert_records_dry_run":
         *         If set to @ref gpudb::insert_records_true "true", no data
         *         will be saved and any errors will be returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawInsertRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::RawInsertRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.list);
            ::avro::encode(e, v.listStr);
            ::avro::encode(e, v.listEncoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RawInsertRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.list);
                            break;

                        case 2:
                            ::avro::decode(d, v.listStr);
                            break;

                        case 3:
                            ::avro::decode(d, v.listEncoding);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.list);
                ::avro::decode(d, v.listStr);
                ::avro::decode(d, v.listEncoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::insertRecords(const InsertRecordsRequest<TRequest>&) const
     * "GPUdb::insertRecords".
     *
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     *
     * The @ref options parameter can be used to customize this function's
     * behavior.
     *
     * The @ref gpudb::insert_records_update_on_existing_pk
     * "update_on_existing_pk" option specifies the record collision policy for
     * inserting into a table with a <a
     * href="../../../concepts/tables/#primary-keys" target="_top">primary
     * key</a>, but is ignored if no primary key exists.
     *
     * The @ref gpudb::insert_records_return_record_ids "return_record_ids"
     * option indicates that the database should return the unique identifiers
     * of inserted records.
     *
     * @tparam T  The type of object being processed.
     *
     */
    template<typename T> struct InsertRecordsRequest
    {
        /**
         * Constructs an InsertRecordsRequest object with default parameters.
         */
        InsertRecordsRequest() :
            tableName(std::string()),
            data(std::vector<T>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an InsertRecordsRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of table to which the records are to be
         *                        added, in [schema_name.]table_name format,
         *                        using standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        Must be an existing table.
         * @param[in] data_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding
         *                   is @a json.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "insert_records_update_on_existing_pk":
         *                              Specifies the record collision policy
         *                              for inserting into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>. If set
         *                              to @ref gpudb::insert_records_true
         *                              "true", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will be
         *                              replaced by that new record (the new
         *                              data will be "upserted"). If set to
         *                              @ref gpudb::insert_records_false
         *                              "false", any existing table record with
         *                              primary key values that match those of
         *                              a record being inserted will remain
         *                              unchanged, while the new record will be
         *                              rejected and the error handled as
         *                              determined by @ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "ignore_existing_pk", @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch", & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key, then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Upsert
         *                                      new records when primary keys
         *                                      match existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Reject
         *                                      new records when primary keys
         *                                      match existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_ignore_existing_pk
         *                              "insert_records_ignore_existing_pk":
         *                              Specifies the record collision
         *                              error-suppression policy for inserting
         *                              into a table with a <a
         *                              href="../../../concepts/tables/#primary-keys"
         *                              target="_top">primary key</a>, only
         *                              used when not in upsert mode (upsert
         *                              mode is disabled when @ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_false "false").
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", any
         *                              record being inserted that is rejected
         *                              for having primary key values that
         *                              match those of an existing table record
         *                              will be ignored with no error
         *                              generated.  If @ref
         *                              gpudb::insert_records_false "false",
         *                              the rejection of any record for having
         *                              primary key values matching an existing
         *                              record will result in an error being
         *                              reported, as determined by @ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "allow_partial_batch" & @ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "return_individual_errors".  If the
         *                              specified table does not have a primary
         *                              key or if upsert mode is in effect
         *                              (@ref
         *                              gpudb::insert_records_update_on_existing_pk
         *                              "update_on_existing_pk" is @ref
         *                              gpudb::insert_records_true "true"),
         *                              then this option has no effect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true": Ignore
         *                                      new records whose primary key
         *                                      values collide with those of
         *                                      existing records
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false": Treat
         *                                      as errors any new records whose
         *                                      primary key values collide with
         *                                      those of existing records
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_record_ids
         *                              "insert_records_return_record_ids": If
         *                              @ref gpudb::insert_records_true "true"
         *                              then return the internal record id
         *                              along for each inserted record.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_truncate_strings
         *                              "insert_records_truncate_strings": If
         *                              set to @ref gpudb::insert_records_true
         *                              "true", any strings which are too long
         *                              for their target charN string columns
         *                              will be truncated to fit.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_return_individual_errors
         *                              "insert_records_return_individual_errors":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true",
         *                              success will always be returned, and
         *                              any errors found will be included in
         *                              the info map.  The "bad_record_indices"
         *                              entry is a comma-separated list of bad
         *                              records (0-based).  And if so, there
         *                              will also be an "error_N" entry for
         *                              each record with an error, where N is
         *                              the index (0-based).
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref
         *                              gpudb::insert_records_allow_partial_batch
         *                              "insert_records_allow_partial_batch":
         *                              If set to @ref
         *                              gpudb::insert_records_true "true", all
         *                              correct records will be inserted and
         *                              incorrect records will be rejected and
         *                              reported.  Otherwise, the entire batch
         *                              will be rejected if any records are
         *                              incorrect.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                          <li>@ref gpudb::insert_records_dry_run
         *                              "insert_records_dry_run": If set to
         *                              @ref gpudb::insert_records_true "true",
         *                              no data will be saved and any errors
         *                              will be returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::insert_records_true
         *                                      "insert_records_true"
         *                                  <li>@ref
         *                                      gpudb::insert_records_false
         *                                      "insert_records_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::insert_records_false
         *                              "insert_records_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        InsertRecordsRequest(const std::string& tableName_, const std::vector<T>& data_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            data( data_ ),
            options( options_ )
        {
        }

        /**
         * Name of table to which the records are to be added, in [
         * schema_name.\ ]table_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  Must be an existing table.
         */
        std::string tableName;

        /**
         * An array of binary-encoded data for the records to be added. All
         * records must be of the same type as that of the table. Empty array
         * if @a listEncoding is @a json.
         */
        std::vector<T> data;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::insert_records_update_on_existing_pk
         *         "insert_records_update_on_existing_pk": Specifies the record
         *         collision policy for inserting into a table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>. If set to @ref
         *         gpudb::insert_records_true "true", any existing table record
         *         with primary key values that match those of a record being
         *         inserted will be replaced by that new record (the new data
         *         will be "upserted"). If set to @ref
         *         gpudb::insert_records_false "false", any existing table
         *         record with primary key values that match those of a record
         *         being inserted will remain unchanged, while the new record
         *         will be rejected and the error handled as determined by @ref
         *         gpudb::insert_records_ignore_existing_pk
         *         "ignore_existing_pk", @ref
         *         gpudb::insert_records_allow_partial_batch
         *         "allow_partial_batch", & @ref
         *         gpudb::insert_records_return_individual_errors
         *         "return_individual_errors".  If the specified table does not
         *         have a primary key, then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true": Upsert new records when
         *                 primary keys match existing records
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false": Reject new records when
         *                 primary keys match existing records
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_ignore_existing_pk
         *         "insert_records_ignore_existing_pk": Specifies the record
         *         collision error-suppression policy for inserting into a
         *         table with a <a
         *         href="../../../concepts/tables/#primary-keys"
         *         target="_top">primary key</a>, only used when not in upsert
         *         mode (upsert mode is disabled when @ref
         *         gpudb::insert_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::insert_records_false
         *         "false").  If set to @ref gpudb::insert_records_true "true",
         *         any record being inserted that is rejected for having
         *         primary key values that match those of an existing table
         *         record will be ignored with no error generated.  If @ref
         *         gpudb::insert_records_false "false", the rejection of any
         *         record for having primary key values matching an existing
         *         record will result in an error being reported, as determined
         *         by @ref gpudb::insert_records_allow_partial_batch
         *         "allow_partial_batch" & @ref
         *         gpudb::insert_records_return_individual_errors
         *         "return_individual_errors".  If the specified table does not
         *         have a primary key or if upsert mode is in effect (@ref
         *         gpudb::insert_records_update_on_existing_pk
         *         "update_on_existing_pk" is @ref gpudb::insert_records_true
         *         "true"), then this option has no effect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true": Ignore new records whose
         *                 primary key values collide with those of existing
         *                 records
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false": Treat as errors any new
         *                 records whose primary key values collide with those
         *                 of existing records
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_return_record_ids
         *         "insert_records_return_record_ids": If @ref
         *         gpudb::insert_records_true "true" then return the internal
         *         record id along for each inserted record.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_truncate_strings
         *         "insert_records_truncate_strings": If set to @ref
         *         gpudb::insert_records_true "true", any strings which are too
         *         long for their target charN string columns will be truncated
         *         to fit.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_return_individual_errors
         *         "insert_records_return_individual_errors": If set to @ref
         *         gpudb::insert_records_true "true", success will always be
         *         returned, and any errors found will be included in the info
         *         map.  The "bad_record_indices" entry is a comma-separated
         *         list of bad records (0-based).  And if so, there will also
         *         be an "error_N" entry for each record with an error, where N
         *         is the index (0-based).
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_allow_partial_batch
         *         "insert_records_allow_partial_batch": If set to @ref
         *         gpudb::insert_records_true "true", all correct records will
         *         be inserted and incorrect records will be rejected and
         *         reported.  Otherwise, the entire batch will be rejected if
         *         any records are incorrect.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         *     <li>@ref gpudb::insert_records_dry_run "insert_records_dry_run":
         *         If set to @ref gpudb::insert_records_true "true", no data
         *         will be saved and any errors will be returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::insert_records_true
         *                 "insert_records_true"
         *             <li>@ref gpudb::insert_records_false
         *                 "insert_records_false"
         *         </ul>
         *         The default value is @ref gpudb::insert_records_false
         *         "insert_records_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::insertRecords(const InsertRecordsRequest<TRequest>&) const
     * "GPUdb::insertRecords".
     */
    struct InsertRecordsResponse
    {
        /**
         * Constructs an InsertRecordsResponse object with default parameters.
         */
        InsertRecordsResponse() :
            recordIds(std::vector<std::string>()),
            countInserted(int32_t()),
            countUpdated(int32_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * An array containing the IDs with which the added records are
         * identified internally.
         */
        std::vector<std::string> recordIds;

        /**
         * The number of records inserted.
         */
        int32_t countInserted;

        /**
         * The number of records updated.
         */
        int32_t countUpdated;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::insert_records_bad_record_indices
         *         "insert_records_bad_record_indices": If
         *         return_individual_errors option is specified or implied,
         *         returns a comma-separated list of invalid indices (0-based)
         *     <li>@ref gpudb::insert_records_error_N "insert_records_error_N":
         *         Error message for record at index N (0-based)
         * </ul>
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsResponse& v)
        {
            ::avro::encode(e, v.recordIds);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.recordIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 2:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.recordIds);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __INSERT_RECORDS_H__
