/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_UNPIVOT_H__
#define __AGGREGATE_UNPIVOT_H__

#include "../GenericRecord.hpp"

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::aggregateUnpivot(const AggregateUnpivotRequest&) const
     * "GPUdb::aggregateUnpivot".
     *
     * Rotate the column values into rows values.
     *
     * For unpivot details and examples, see <a
     * href="../../../concepts/unpivot/" target="_top">Unpivot</a>.  For
     * limitations, see <a href="../../../concepts/unpivot/#limitations"
     * target="_top">Unpivot Limitations</a>.
     *
     * Unpivot is used to normalize tables that are built for cross tabular
     * reporting purposes. The unpivot operator rotates the column values for
     * all the pivoted columns. A variable column, value column and all columns
     * from the source table except the unpivot columns are projected into the
     * result table. The variable column and value columns in the result table
     * indicate the pivoted column name and values respectively.
     *
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../api/concepts/#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     */
    struct AggregateUnpivotRequest
    {
        /**
         * Constructs an AggregateUnpivotRequest object with default
         * parameters.
         */
        AggregateUnpivotRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            variableColumnName(std::string()),
            valueColumnName(std::string()),
            pivotedColumns(std::vector<std::string>()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateUnpivotRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing table/view,
         *                        in [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnNames_  List of column names or expressions. A
         *                          wildcard '*' can be used to include all the
         *                          non-pivoted columns from the source table.
         * @param[in] variableColumnName_  Specifies the variable/parameter
         *                                 column name. The default value is
         *                                 ''.
         * @param[in] valueColumnName_  Specifies the value column name. The
         *                              default value is ''.
         * @param[in] pivotedColumns_  List of one or more values typically the
         *                             column names of the input table. All the
         *                             columns in the source table must have
         *                             the same data type.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_create_temp_table
         *                              "aggregate_unpivot_create_temp_table":
         *                              If @ref gpudb::aggregate_unpivot_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_unpivot_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_unpivot_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_unpivot_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_collection_name
         *                              "aggregate_unpivot_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". If the schema is
         *                              non-existent, it will be automatically
         *                              created.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "aggregate_unpivot_result_table": The
         *                              name of a table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>. If present, no results
         *                              are returned in the response.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table_persist
         *                              "aggregate_unpivot_result_table_persist":
         *                              If @ref gpudb::aggregate_unpivot_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_unpivot_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_unpivot_false "false",
         *                              then the result table will be an
         *                              in-memory table and will expire unless
         *                              a @ref gpudb::aggregate_unpivot_ttl
         *                              "ttl" is specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_expression
         *                              "aggregate_unpivot_expression": Filter
         *                              expression to apply to the table prior
         *                              to unpivot processing.
         *                          <li>@ref gpudb::aggregate_unpivot_order_by
         *                              "aggregate_unpivot_order_by":
         *                              Comma-separated list of the columns to
         *                              be sorted by; e.g. 'timestamp asc, x
         *                              desc'.  The columns specified must be
         *                              present in input table.  If any alias
         *                              is given for any column name, the alias
         *                              must be used, rather than the original
         *                              column name. The default value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_size
         *                              "aggregate_unpivot_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_column_max_memory
         *                              "aggregate_unpivot_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_max_memory
         *                              "aggregate_unpivot_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_unpivot_limit
         *                              "aggregate_unpivot_limit": The number
         *                              of records to keep. The default value
         *                              is ''.
         *                          <li>@ref gpudb::aggregate_unpivot_ttl
         *                              "aggregate_unpivot_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table".
         *                          <li>@ref gpudb::aggregate_unpivot_view_id
         *                              "aggregate_unpivot_view_id": view this
         *                              result table is part of. The default
         *                              value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_create_indexes
         *                              "aggregate_unpivot_create_indexes":
         *                              Comma-separated list of columns on
         *                              which to create indexes on the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". The columns specified
         *                              must be present in output column names.
         *                              If any alias is given for any column
         *                              name, the alias must be used, rather
         *                              than the original column name.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table_force_replicated
         *                              "aggregate_unpivot_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateUnpivotRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const std::string& variableColumnName_, const std::string& valueColumnName_, const std::vector<std::string>& pivotedColumns_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            variableColumnName( variableColumnName_ ),
            valueColumnName( valueColumnName_ ),
            pivotedColumns( pivotedColumns_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs an AggregateUnpivotRequest object with the specified
         * parameters.
         *
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing table/view,
         *                        in [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         * @param[in] columnNames_  List of column names or expressions. A
         *                          wildcard '*' can be used to include all the
         *                          non-pivoted columns from the source table.
         * @param[in] variableColumnName_  Specifies the variable/parameter
         *                                 column name. The default value is
         *                                 ''.
         * @param[in] valueColumnName_  Specifies the value column name. The
         *                              default value is ''.
         * @param[in] pivotedColumns_  List of one or more values typically the
         *                             column names of the input table. All the
         *                             columns in the source table must have
         *                             the same data type.
         * @param[in] encoding_  Specifies the encoding for returned records.
         *                       Supported values:
         *                       <ul>
         *                           <li>@ref gpudb::aggregate_unpivot_binary
         *                               "aggregate_unpivot_binary": Indicates
         *                               that the returned records should be
         *                               binary encoded.
         *                           <li>@ref gpudb::aggregate_unpivot_json
         *                               "aggregate_unpivot_json": Indicates
         *                               that the returned records should be
         *                               json encoded.
         *                       </ul>
         *                       The default value is @ref
         *                       gpudb::aggregate_unpivot_binary
         *                       "aggregate_unpivot_binary".
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_create_temp_table
         *                              "aggregate_unpivot_create_temp_table":
         *                              If @ref gpudb::aggregate_unpivot_true
         *                              "true", a unique temporary table name
         *                              will be generated in the sys_temp
         *                              schema and used in place of @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". If @ref
         *                              gpudb::aggregate_unpivot_result_table_persist
         *                              "result_table_persist" is @ref
         *                              gpudb::aggregate_unpivot_false "false"
         *                              (or unspecified), then this is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::aggregate_unpivot_qualified_result_table_name
         *                              "qualified_result_table_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_collection_name
         *                              "aggregate_unpivot_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema as part of @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema which is to contain the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". If the schema is
         *                              non-existent, it will be automatically
         *                              created.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "aggregate_unpivot_result_table": The
         *                              name of a table used to store the
         *                              results, in [schema_name.]table_name
         *                              format, using standard <a
         *                              href="../../../concepts/tables/#table-name-resolution"
         *                              target="_top">name resolution rules</a>
         *                              and meeting <a
         *                              href="../../../concepts/tables/#table-naming-criteria"
         *                              target="_top">table naming
         *                              criteria</a>. If present, no results
         *                              are returned in the response.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table_persist
         *                              "aggregate_unpivot_result_table_persist":
         *                              If @ref gpudb::aggregate_unpivot_true
         *                              "true", then the result table specified
         *                              in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" will be persisted and
         *                              will not expire unless a @ref
         *                              gpudb::aggregate_unpivot_ttl "ttl" is
         *                              specified.   If @ref
         *                              gpudb::aggregate_unpivot_false "false",
         *                              then the result table will be an
         *                              in-memory table and will expire unless
         *                              a @ref gpudb::aggregate_unpivot_ttl
         *                              "ttl" is specified otherwise.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_expression
         *                              "aggregate_unpivot_expression": Filter
         *                              expression to apply to the table prior
         *                              to unpivot processing.
         *                          <li>@ref gpudb::aggregate_unpivot_order_by
         *                              "aggregate_unpivot_order_by":
         *                              Comma-separated list of the columns to
         *                              be sorted by; e.g. 'timestamp asc, x
         *                              desc'.  The columns specified must be
         *                              present in input table.  If any alias
         *                              is given for any column name, the alias
         *                              must be used, rather than the original
         *                              column name. The default value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_size
         *                              "aggregate_unpivot_chunk_size":
         *                              Indicates the number of records per
         *                              chunk to be used for the result table.
         *                              Must be used in combination with the
         *                              @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_column_max_memory
         *                              "aggregate_unpivot_chunk_column_max_memory":
         *                              Indicates the target maximum data size
         *                              for each column in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_chunk_max_memory
         *                              "aggregate_unpivot_chunk_max_memory":
         *                              Indicates the target maximum data size
         *                              for all columns in a chunk to be used
         *                              for the result table. Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                          <li>@ref gpudb::aggregate_unpivot_limit
         *                              "aggregate_unpivot_limit": The number
         *                              of records to keep. The default value
         *                              is ''.
         *                          <li>@ref gpudb::aggregate_unpivot_ttl
         *                              "aggregate_unpivot_ttl": Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table".
         *                          <li>@ref gpudb::aggregate_unpivot_view_id
         *                              "aggregate_unpivot_view_id": view this
         *                              result table is part of. The default
         *                              value is ''.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_create_indexes
         *                              "aggregate_unpivot_create_indexes":
         *                              Comma-separated list of columns on
         *                              which to create indexes on the table
         *                              specified in @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table". The columns specified
         *                              must be present in output column names.
         *                              If any alias is given for any column
         *                              name, the alias must be used, rather
         *                              than the original column name.
         *                          <li>@ref
         *                              gpudb::aggregate_unpivot_result_table_force_replicated
         *                              "aggregate_unpivot_result_table_force_replicated":
         *                              Force the result table to be replicated
         *                              (ignores any sharding). Must be used in
         *                              combination with the @ref
         *                              gpudb::aggregate_unpivot_result_table
         *                              "result_table" option.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_true
         *                                      "aggregate_unpivot_true"
         *                                  <li>@ref
         *                                      gpudb::aggregate_unpivot_false
         *                                      "aggregate_unpivot_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::aggregate_unpivot_false
         *                              "aggregate_unpivot_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        AggregateUnpivotRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const std::string& variableColumnName_, const std::string& valueColumnName_, const std::vector<std::string>& pivotedColumns_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            variableColumnName( variableColumnName_ ),
            valueColumnName( valueColumnName_ ),
            pivotedColumns( pivotedColumns_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table on which the operation will be performed. Must be
         * an existing table/view, in [ schema_name.\ ]table_name format, using
         * standard <a href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.
         */
        std::string tableName;

        /**
         * List of column names or expressions. A wildcard '*' can be used to
         * include all the non-pivoted columns from the source table.
         */
        std::vector<std::string> columnNames;

        /**
         * Specifies the variable/parameter column name. The default value is
         * ''.
         */
        std::string variableColumnName;

        /**
         * Specifies the value column name. The default value is ''.
         */
        std::string valueColumnName;

        /**
         * List of one or more values typically the column names of the input
         * table. All the columns in the source table must have the same data
         * type.
         */
        std::vector<std::string> pivotedColumns;

        /**
         * Specifies the encoding for returned records.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::aggregate_unpivot_binary
         *         "aggregate_unpivot_binary": Indicates that the returned
         *         records should be binary encoded.
         *     <li>@ref gpudb::aggregate_unpivot_json "aggregate_unpivot_json":
         *         Indicates that the returned records should be json encoded.
         * </ul>
         * The default value is @ref gpudb::aggregate_unpivot_binary
         * "aggregate_unpivot_binary".
         */
        std::string encoding;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::aggregate_unpivot_create_temp_table
         *         "aggregate_unpivot_create_temp_table": If @ref
         *         gpudb::aggregate_unpivot_true "true", a unique temporary
         *         table name will be generated in the sys_temp schema and used
         *         in place of @ref gpudb::aggregate_unpivot_result_table
         *         "result_table". If @ref
         *         gpudb::aggregate_unpivot_result_table_persist
         *         "result_table_persist" is @ref
         *         gpudb::aggregate_unpivot_false "false" (or unspecified),
         *         then this is always allowed even if the caller does not have
         *         permission to create tables. The generated name is returned
         *         in @ref gpudb::aggregate_unpivot_qualified_result_table_name
         *         "qualified_result_table_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unpivot_true
         *                 "aggregate_unpivot_true"
         *             <li>@ref gpudb::aggregate_unpivot_false
         *                 "aggregate_unpivot_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unpivot_false
         *         "aggregate_unpivot_false".
         *     <li>@ref gpudb::aggregate_unpivot_collection_name
         *         "aggregate_unpivot_collection_name": [DEPRECATED--please
         *         specify the containing schema as part of @ref
         *         gpudb::aggregate_unpivot_result_table "result_table" and use
         *         @ref GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema which is to contain the table specified in
         *         @ref gpudb::aggregate_unpivot_result_table "result_table".
         *         If the schema is non-existent, it will be automatically
         *         created.
         *     <li>@ref gpudb::aggregate_unpivot_result_table
         *         "aggregate_unpivot_result_table": The name of a table used
         *         to store the results, in [schema_name.]table_name format,
         *         using standard <a
         *         href="../../../concepts/tables/#table-name-resolution"
         *         target="_top">name resolution rules</a> and meeting <a
         *         href="../../../concepts/tables/#table-naming-criteria"
         *         target="_top">table naming criteria</a>. If present, no
         *         results are returned in the response.
         *     <li>@ref gpudb::aggregate_unpivot_result_table_persist
         *         "aggregate_unpivot_result_table_persist": If @ref
         *         gpudb::aggregate_unpivot_true "true", then the result table
         *         specified in @ref gpudb::aggregate_unpivot_result_table
         *         "result_table" will be persisted and will not expire unless
         *         a @ref gpudb::aggregate_unpivot_ttl "ttl" is specified.   If
         *         @ref gpudb::aggregate_unpivot_false "false", then the result
         *         table will be an in-memory table and will expire unless a
         *         @ref gpudb::aggregate_unpivot_ttl "ttl" is specified
         *         otherwise.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unpivot_true
         *                 "aggregate_unpivot_true"
         *             <li>@ref gpudb::aggregate_unpivot_false
         *                 "aggregate_unpivot_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unpivot_false
         *         "aggregate_unpivot_false".
         *     <li>@ref gpudb::aggregate_unpivot_expression
         *         "aggregate_unpivot_expression": Filter expression to apply
         *         to the table prior to unpivot processing.
         *     <li>@ref gpudb::aggregate_unpivot_order_by
         *         "aggregate_unpivot_order_by": Comma-separated list of the
         *         columns to be sorted by; e.g. 'timestamp asc, x desc'.  The
         *         columns specified must be present in input table.  If any
         *         alias is given for any column name, the alias must be used,
         *         rather than the original column name. The default value is
         *         ''.
         *     <li>@ref gpudb::aggregate_unpivot_chunk_size
         *         "aggregate_unpivot_chunk_size": Indicates the number of
         *         records per chunk to be used for the result table. Must be
         *         used in combination with the @ref
         *         gpudb::aggregate_unpivot_result_table "result_table" option.
         *     <li>@ref gpudb::aggregate_unpivot_chunk_column_max_memory
         *         "aggregate_unpivot_chunk_column_max_memory": Indicates the
         *         target maximum data size for each column in a chunk to be
         *         used for the result table. Must be used in combination with
         *         the @ref gpudb::aggregate_unpivot_result_table
         *         "result_table" option.
         *     <li>@ref gpudb::aggregate_unpivot_chunk_max_memory
         *         "aggregate_unpivot_chunk_max_memory": Indicates the target
         *         maximum data size for all columns in a chunk to be used for
         *         the result table. Must be used in combination with the @ref
         *         gpudb::aggregate_unpivot_result_table "result_table" option.
         *     <li>@ref gpudb::aggregate_unpivot_limit
         *         "aggregate_unpivot_limit": The number of records to keep.
         *         The default value is ''.
         *     <li>@ref gpudb::aggregate_unpivot_ttl "aggregate_unpivot_ttl":
         *         Sets the <a href="../../../concepts/ttl/"
         *         target="_top">TTL</a> of the table specified in @ref
         *         gpudb::aggregate_unpivot_result_table "result_table".
         *     <li>@ref gpudb::aggregate_unpivot_view_id
         *         "aggregate_unpivot_view_id": view this result table is part
         *         of. The default value is ''.
         *     <li>@ref gpudb::aggregate_unpivot_create_indexes
         *         "aggregate_unpivot_create_indexes": Comma-separated list of
         *         columns on which to create indexes on the table specified in
         *         @ref gpudb::aggregate_unpivot_result_table "result_table".
         *         The columns specified must be present in output column
         *         names.  If any alias is given for any column name, the alias
         *         must be used, rather than the original column name.
         *     <li>@ref gpudb::aggregate_unpivot_result_table_force_replicated
         *         "aggregate_unpivot_result_table_force_replicated": Force the
         *         result table to be replicated (ignores any sharding). Must
         *         be used in combination with the @ref
         *         gpudb::aggregate_unpivot_result_table "result_table" option.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::aggregate_unpivot_true
         *                 "aggregate_unpivot_true"
         *             <li>@ref gpudb::aggregate_unpivot_false
         *                 "aggregate_unpivot_false"
         *         </ul>
         *         The default value is @ref gpudb::aggregate_unpivot_false
         *         "aggregate_unpivot_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateUnpivotRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateUnpivotRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.variableColumnName);
            ::avro::encode(e, v.valueColumnName);
            ::avro::encode(e, v.pivotedColumns);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateUnpivotRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.variableColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.valueColumnName);
                            break;

                        case 4:
                            ::avro::decode(d, v.pivotedColumns);
                            break;

                        case 5:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.variableColumnName);
                ::avro::decode(d, v.valueColumnName);
                ::avro::decode(d, v.pivotedColumns);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateUnpivotRaw(const AggregateUnpivotRequest&) const
     * "GPUdb::aggregateUnpivotRaw".
     */
    struct RawAggregateUnpivotResponse
    {
        /**
         * Constructs a RawAggregateUnpivotResponse object with default
         * parameters.
         */
        RawAggregateUnpivotResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Typically shows the result-table name if provided in the request
         * (Ignore otherwise).
         */
        std::string tableName;

        /**
         * Avro schema of @ref binaryEncodedResponse or @ref
         * jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<uint8_t> binaryEncodedResponse;

        /**
         * Avro JSON encoded response.
         */
        std::string jsonEncodedResponse;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_unpivot_qualified_result_table_name
         *         "aggregate_unpivot_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateUnpivotResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateUnpivotResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RawAggregateUnpivotResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 2:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 4:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 5:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        case 6:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::aggregateUnpivot(const AggregateUnpivotRequest&) const
     * "GPUdb::aggregateUnpivot".
     */
    struct AggregateUnpivotResponse
    {
        /**
         * Constructs an AggregateUnpivotResponse object with default
         * parameters.
         */
        AggregateUnpivotResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool()),
            info(std::map<std::string, std::string>()),
            dataTypePtr((gpudb::Type*)NULL)
        {
        }

        /**
         * Typically shows the result-table name if provided in the request
         * (Ignore otherwise).
         */
        std::string tableName;

        /**
         * Avro schema of @ref data or @a jsonEncodedResponse.
         */
        std::string responseSchemaStr;

        /**
         * Avro binary encoded response.
         */
        std::vector<gpudb::GenericRecord> data;

        /**
         * Total/Filtered number of records.
         */
        int64_t totalNumberOfRecords;

        /**
         * Too many records. Returned a partial set.
         */
        bool hasMoreRecords;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::aggregate_unpivot_qualified_result_table_name
         *         "aggregate_unpivot_qualified_result_table_name": The fully
         *         qualified name of the table (i.e. including the schema) used
         *         to store the results.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;

        gpudb_type_ptr_t dataTypePtr;
    };
} // end namespace gpudb

#endif // __AGGREGATE_UNPIVOT_H__
