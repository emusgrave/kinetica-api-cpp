/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_ENVIRONMENT_H__
#define __SHOW_ENVIRONMENT_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showEnvironment(const ShowEnvironmentRequest&) const}.
     * <p>
     * Shows information about a specified <a href="../../../concepts/udf/"
     * target="_top">user-defined function</a> (UDF) environment or all
     * environments.
     * Returns detailed information about existing environments.
     */
    struct ShowEnvironmentRequest
    {

        /**
         * Constructs a ShowEnvironmentRequest object with default parameter
         * values.
         */
        ShowEnvironmentRequest() :
            environmentName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowEnvironmentRequest object with the specified
         * parameters.
         * 
         * @param[in] environmentName_  Name of the environment on which to
         *                              retrieve information. The name must
         *                              refer to a currently existing
         *                              environment. If '*' or an empty value
         *                              is specified, information about all
         *                              environments will be returned.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::show_environment_no_error_if_not_exists:
         *                      If @a true and if the environment specified in
         *                      @a environmentName does not exist, no error is
         *                      returned. If @a false and if the environment
         *                      specified in @a environmentName does not exist,
         *                      then an error is returned.
         *                      <ul>
         *                              <li> gpudb::show_environment_true
         *                              <li> gpudb::show_environment_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::show_environment_false.
         *                      </ul>
         * 
         */
        ShowEnvironmentRequest(const std::string& environmentName_, const std::map<std::string, std::string>& options_):
            environmentName( environmentName_ ),
            options( options_ )
        {
        }

        std::string environmentName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowEnvironmentRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowEnvironmentRequest& v)
        {
            ::avro::encode(e, v.environmentName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowEnvironmentRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showEnvironment(const ShowEnvironmentRequest&) const}.
     * <p>
     * Shows information about a specified <a href="../../../concepts/udf/"
     * target="_top">user-defined function</a> (UDF) environment or all
     * environments.
     * Returns detailed information about existing environments.
     */
    struct ShowEnvironmentResponse
    {

        /**
         * Constructs a ShowEnvironmentResponse object with default parameter
         * values.
         */
        ShowEnvironmentResponse() :
            environmentNames(std::vector<std::string>()),
            packages(std::vector<std::vector<std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> environmentNames;
        std::vector<std::vector<std::string> > packages;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowEnvironmentResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowEnvironmentResponse& v)
        {
            ::avro::encode(e, v.environmentNames);
            ::avro::encode(e, v.packages);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowEnvironmentResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.environmentNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.packages);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.environmentNames);
                ::avro::decode(d, v.packages);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
