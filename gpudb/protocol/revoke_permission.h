/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __REVOKE_PERMISSION_H__
#define __REVOKE_PERMISSION_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::revokePermission(const RevokePermissionRequest&) const
     * "GPUdb::revokePermission".
     *
     * Revoke user or role the specified permission on the specified object.
     */
    struct RevokePermissionRequest
    {
        /**
         * Constructs a RevokePermissionRequest object with default parameters.
         */
        RevokePermissionRequest() :
            principal(std::string()),
            object(std::string()),
            objectType(std::string()),
            permission(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RevokePermissionRequest object with the specified
         * parameters.
         *
         * @param[in] principal_  Name of the user or role for which the
         *                        permission is being revoked.  Must be an
         *                        existing user or role. The default value is
         *                        ''.
         * @param[in] object_  Name of object permission is being revoked from.
         *                     It is recommended to use a fully-qualified name
         *                     when possible.
         * @param[in] objectType_  The type of object being revoked.
         *                         Supported values:
         *                         <ul>
         *                             <li>@ref
         *                                 gpudb::revoke_permission_context
         *                                 "revoke_permission_context": Context
         *                             <li>@ref
         *                                 gpudb::revoke_permission_credential
         *                                 "revoke_permission_credential":
         *                                 Credential
         *                             <li>@ref
         *                                 gpudb::revoke_permission_datasink
         *                                 "revoke_permission_datasink": Data
         *                                 Sink
         *                             <li>@ref
         *                                 gpudb::revoke_permission_datasource
         *                                 "revoke_permission_datasource": Data
         *                                 Source
         *                             <li>@ref
         *                                 gpudb::revoke_permission_directory
         *                                 "revoke_permission_directory": KIFS
         *                                 File Directory
         *                             <li>@ref gpudb::revoke_permission_graph
         *                                 "revoke_permission_graph": A Graph
         *                                 object
         *                             <li>@ref gpudb::revoke_permission_proc
         *                                 "revoke_permission_proc": UDF
         *                                 Procedure
         *                             <li>@ref gpudb::revoke_permission_schema
         *                                 "revoke_permission_schema": Schema
         *                             <li>@ref
         *                                 gpudb::revoke_permission_sql_proc
         *                                 "revoke_permission_sql_proc": SQL
         *                                 Procedure
         *                             <li>@ref gpudb::revoke_permission_system
         *                                 "revoke_permission_system":
         *                                 System-level access
         *                             <li>@ref gpudb::revoke_permission_table
         *                                 "revoke_permission_table": Database
         *                                 Table
         *                             <li>@ref
         *                                 gpudb::revoke_permission_table_monitor
         *                                 "revoke_permission_table_monitor":
         *                                 Table monitor
         *                         </ul>
         * @param[in] permission_  Permission being revoked.
         *                         Supported values:
         *                         <ul>
         *                             <li>@ref gpudb::revoke_permission_admin
         *                                 "revoke_permission_admin": Full
         *                                 read/write and administrative access
         *                                 on the object.
         *                             <li>@ref
         *                                 gpudb::revoke_permission_connect
         *                                 "revoke_permission_connect": Connect
         *                                 access on the given data source or
         *                                 data sink.
         *                             <li>@ref gpudb::revoke_permission_create
         *                                 "revoke_permission_create": Ability
         *                                 to create new objects of this type.
         *                             <li>@ref gpudb::revoke_permission_delete
         *                                 "revoke_permission_delete": Delete
         *                                 rows from tables.
         *                             <li>@ref
         *                                 gpudb::revoke_permission_execute
         *                                 "revoke_permission_execute": Ability
         *                                 to Execute the Procedure object.
         *                             <li>@ref gpudb::revoke_permission_insert
         *                                 "revoke_permission_insert": Insert
         *                                 access to tables.
         *                             <li>@ref gpudb::revoke_permission_read
         *                                 "revoke_permission_read": Ability to
         *                                 read, list and use the object.
         *                             <li>@ref gpudb::revoke_permission_update
         *                                 "revoke_permission_update": Update
         *                                 access to the table.
         *                             <li>@ref
         *                                 gpudb::revoke_permission_user_admin
         *                                 "revoke_permission_user_admin":
         *                                 Access to administer users and roles
         *                                 that do not have system_admin
         *                                 permission.
         *                             <li>@ref gpudb::revoke_permission_write
         *                                 "revoke_permission_write": Access to
         *                                 write, change and delete objects.
         *                         </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::revoke_permission_columns
         *                              "revoke_permission_columns": Revoke
         *                              table security from these columns,
         *                              comma-separated. The default value is
         *                              ''.
         *                      </ul>
         *                      The default value is an empty map.
         */
        RevokePermissionRequest(const std::string& principal_, const std::string& object_, const std::string& objectType_, const std::string& permission_, const std::map<std::string, std::string>& options_):
            principal( principal_ ),
            object( object_ ),
            objectType( objectType_ ),
            permission( permission_ ),
            options( options_ )
        {
        }

        /**
         * Name of the user or role for which the permission is being revoked.
         * Must be an existing user or role. The default value is ''.
         */
        std::string principal;

        /**
         * Name of object permission is being revoked from.  It is recommended
         * to use a fully-qualified name when possible.
         */
        std::string object;

        /**
         * The type of object being revoked.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::revoke_permission_context
         *         "revoke_permission_context": Context
         *     <li>@ref gpudb::revoke_permission_credential
         *         "revoke_permission_credential": Credential
         *     <li>@ref gpudb::revoke_permission_datasink
         *         "revoke_permission_datasink": Data Sink
         *     <li>@ref gpudb::revoke_permission_datasource
         *         "revoke_permission_datasource": Data Source
         *     <li>@ref gpudb::revoke_permission_directory
         *         "revoke_permission_directory": KIFS File Directory
         *     <li>@ref gpudb::revoke_permission_graph
         *         "revoke_permission_graph": A Graph object
         *     <li>@ref gpudb::revoke_permission_proc "revoke_permission_proc":
         *         UDF Procedure
         *     <li>@ref gpudb::revoke_permission_schema
         *         "revoke_permission_schema": Schema
         *     <li>@ref gpudb::revoke_permission_sql_proc
         *         "revoke_permission_sql_proc": SQL Procedure
         *     <li>@ref gpudb::revoke_permission_system
         *         "revoke_permission_system": System-level access
         *     <li>@ref gpudb::revoke_permission_table
         *         "revoke_permission_table": Database Table
         *     <li>@ref gpudb::revoke_permission_table_monitor
         *         "revoke_permission_table_monitor": Table monitor
         * </ul>
         */
        std::string objectType;

        /**
         * Permission being revoked.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::revoke_permission_admin
         *         "revoke_permission_admin": Full read/write and
         *         administrative access on the object.
         *     <li>@ref gpudb::revoke_permission_connect
         *         "revoke_permission_connect": Connect access on the given
         *         data source or data sink.
         *     <li>@ref gpudb::revoke_permission_create
         *         "revoke_permission_create": Ability to create new objects of
         *         this type.
         *     <li>@ref gpudb::revoke_permission_delete
         *         "revoke_permission_delete": Delete rows from tables.
         *     <li>@ref gpudb::revoke_permission_execute
         *         "revoke_permission_execute": Ability to Execute the
         *         Procedure object.
         *     <li>@ref gpudb::revoke_permission_insert
         *         "revoke_permission_insert": Insert access to tables.
         *     <li>@ref gpudb::revoke_permission_read "revoke_permission_read":
         *         Ability to read, list and use the object.
         *     <li>@ref gpudb::revoke_permission_update
         *         "revoke_permission_update": Update access to the table.
         *     <li>@ref gpudb::revoke_permission_user_admin
         *         "revoke_permission_user_admin": Access to administer users
         *         and roles that do not have system_admin permission.
         *     <li>@ref gpudb::revoke_permission_write
         *         "revoke_permission_write": Access to write, change and
         *         delete objects.
         * </ul>
         */
        std::string permission;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::revoke_permission_columns
         *         "revoke_permission_columns": Revoke table security from
         *         these columns, comma-separated. The default value is ''.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionRequest>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionRequest& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.object);
            ::avro::encode(e, v.objectType);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.object);
                            break;

                        case 2:
                            ::avro::decode(d, v.objectType);
                            break;

                        case 3:
                            ::avro::decode(d, v.permission);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.object);
                ::avro::decode(d, v.objectType);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::revokePermission(const RevokePermissionRequest&) const
     * "GPUdb::revokePermission".
     */
    struct RevokePermissionResponse
    {
        /**
         * Constructs a RevokePermissionResponse object with default
         * parameters.
         */
        RevokePermissionResponse() :
            principal(std::string()),
            object(std::string()),
            objectType(std::string()),
            permission(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::RevokePermissionRequest::principal "principal".
         */
        std::string principal;

        /**
         * Value of @ref gpudb::RevokePermissionRequest::object "object".
         */
        std::string object;

        /**
         * Value of @ref gpudb::RevokePermissionRequest::objectType
         * "objectType".
         */
        std::string objectType;

        /**
         * Value of @ref gpudb::RevokePermissionRequest::permission
         * "permission".
         */
        std::string permission;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::RevokePermissionResponse>
    {
        static void encode(Encoder& e, const gpudb::RevokePermissionResponse& v)
        {
            ::avro::encode(e, v.principal);
            ::avro::encode(e, v.object);
            ::avro::encode(e, v.objectType);
            ::avro::encode(e, v.permission);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::RevokePermissionResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.principal);
                            break;

                        case 1:
                            ::avro::decode(d, v.object);
                            break;

                        case 2:
                            ::avro::decode(d, v.objectType);
                            break;

                        case 3:
                            ::avro::decode(d, v.permission);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.principal);
                ::avro::decode(d, v.object);
                ::avro::decode(d, v.objectType);
                ::avro::decode(d, v.permission);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __REVOKE_PERMISSION_H__
