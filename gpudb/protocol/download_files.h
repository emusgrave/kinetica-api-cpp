/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DOWNLOAD_FILES_H__
#define __DOWNLOAD_FILES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #downloadFiles(const DownloadFilesRequest&) const}.
     * <p>
     * Downloads one or more files from <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct DownloadFilesRequest
    {

        /**
         * Constructs a DownloadFilesRequest object with default parameter
         * values.
         */
        DownloadFilesRequest() :
            fileNames(std::vector<std::string>()),
            readOffsets(std::vector<int64_t>()),
            readLengths(std::vector<int64_t>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DownloadFilesRequest object with the specified
         * parameters.
         * 
         * @param[in] fileNames_  An array of the file names to download from
         *                        KiFS. The full path must be provided.
         * @param[in] readOffsets_  An array of starting byte offsets from
         *                          which to read each
         *                          respective file in @a fileNames. Must
         *                          either be empty or the same length
         *                          as @a fileNames. If empty, files are
         *                          downloaded in their entirety. If not
         *                          empty, @a readLengths must also not be
         *                          empty.
         * @param[in] readLengths_  Array of number of bytes to read from each
         *                          respective file
         *                          in @a fileNames. Must either be empty or
         *                          the same length as
         *                          @a fileNames. If empty, files are
         *                          downloaded in their entirety. If not
         *                          empty, @a readOffsets must also not be
         *                          empty.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::download_files_file_encoding: Encoding
         *                      to be applied to the output file data. When
         *                      using JSON serialization it is recommended to
         *                      specify this as @a base64.
         *                      <ul>
         *                              <li> gpudb::download_files_base64:
         *                      Apply base64 encoding to the output file data.
         *                              <li> gpudb::download_files_none: Do not
         *                      apply any encoding to the output file data.
         *                      </ul>
         *                      The default value is
         *                      gpudb::download_files_none.
         *                      </ul>
         * 
         */
        DownloadFilesRequest(const std::vector<std::string>& fileNames_, const std::vector<int64_t>& readOffsets_, const std::vector<int64_t>& readLengths_, const std::map<std::string, std::string>& options_):
            fileNames( fileNames_ ),
            readOffsets( readOffsets_ ),
            readLengths( readLengths_ ),
            options( options_ )
        {
        }

        std::vector<std::string> fileNames;
        std::vector<int64_t> readOffsets;
        std::vector<int64_t> readLengths;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DownloadFilesRequest>
    {
        static void encode(Encoder& e, const gpudb::DownloadFilesRequest& v)
        {
            ::avro::encode(e, v.fileNames);
            ::avro::encode(e, v.readOffsets);
            ::avro::encode(e, v.readLengths);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DownloadFilesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.fileNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.readOffsets);
                            break;

                        case 2:
                            ::avro::decode(d, v.readLengths);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.fileNames);
                ::avro::decode(d, v.readOffsets);
                ::avro::decode(d, v.readLengths);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #downloadFiles(const DownloadFilesRequest&) const}.
     * <p>
     * Downloads one or more files from <a href="../../../tools/kifs/"
     * target="_top">KiFS</a>.
     */
    struct DownloadFilesResponse
    {

        /**
         * Constructs a DownloadFilesResponse object with default parameter
         * values.
         */
        DownloadFilesResponse() :
            fileNames(std::vector<std::string>()),
            fileData(std::vector<std::vector<uint8_t> >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> fileNames;
        std::vector<std::vector<uint8_t> > fileData;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DownloadFilesResponse>
    {
        static void encode(Encoder& e, const gpudb::DownloadFilesResponse& v)
        {
            ::avro::encode(e, v.fileNames);
            ::avro::encode(e, v.fileData);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DownloadFilesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.fileNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.fileData);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.fileNames);
                ::avro::decode(d, v.fileData);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
