/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_MONITOR_TABLE_H__
#define __CREATE_MONITOR_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createMonitorTable(const CreateMonitorTableRequest&) const}.
     * <p>
     * @private
     */
    struct CreateMonitorTableRequest
    {

        /**
         * @private
         * Constructs a CreateMonitorTableRequest object with default parameter
         * values.
         */
        CreateMonitorTableRequest() :
            monitorTableName(std::string()),
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a CreateMonitorTableRequest object with the specified
         * parameters.
         * 
         * @param[in] monitorTableName_
         * @param[in] tableName_
         * @param[in] options_
         * 
         */
        CreateMonitorTableRequest(const std::string& monitorTableName_, const std::string& tableName_, const std::map<std::string, std::string>& options_):
            monitorTableName( monitorTableName_ ),
            tableName( tableName_ ),
            options( options_ )
        {
        }

        std::string monitorTableName;
        std::string tableName;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMonitorTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateMonitorTableRequest& v)
        {
            ::avro::encode(e, v.monitorTableName);
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateMonitorTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.monitorTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.monitorTableName);
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createMonitorTable(const CreateMonitorTableRequest&) const}.
     * <p>
     * @private
     */
    struct CreateMonitorTableResponse
    {

        /**
         * @private
         * Constructs a CreateMonitorTableResponse object with default
         * parameter values.
         */
        CreateMonitorTableResponse() :
            monitorTableName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string monitorTableName;
        std::map<std::string, std::string> info;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMonitorTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateMonitorTableResponse& v)
        {
            ::avro::encode(e, v.monitorTableName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateMonitorTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.monitorTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.monitorTableName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
