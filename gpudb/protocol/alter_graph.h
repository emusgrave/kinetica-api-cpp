/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_GRAPH_H__
#define __ALTER_GRAPH_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterGraph(const AlterGraphRequest&) const}.
     * <p>
     * For internal use only: Graph server admin command.
     * For internal use only: Graph server admin command.
     */
    struct AlterGraphRequest
    {

        /**
         * Constructs an AlterGraphRequest object with default parameter
         * values.
         */
        AlterGraphRequest() :
            graphName(std::string()),
            action(std::string()),
            actionArg(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterGraphRequest object with the specified
         * parameters.
         * 
         * @param[in] graphName_  Graph on which the operation should be
         *                        applied.
         *                        If empty then it will apply to all graphs.
         *                        This request can be sent from the graph
         *                        server to the graph client, or from the
         *                        client to the server depending on the type of
         *                        operation.
         * @param[in] action_  Operation to be applied
         *                     <ul>
         *                             <li>
         *                     gpudb::alter_graph_add_table_monitor: Add a
         *                     table monitor to a graph. The table name is
         *                     specified as the action argment.
         *                             <li> gpudb::alter_graph_reset_client:
         *                     Reset all current operations on the client side.
         *                     Used when the graph server is restarted to
         *                     recover from a failure.
         *                             <li> gpudb::alter_graph_reset_server:
         *                     Reset all current operations on the server side.
         *                     This is also sent on (re)start.
         *                             <li> gpudb::alter_graph_cancel_task:
         *                     Cancel a specific task on the graph server.
         *                             <li> gpudb::alter_graph_alter_logger:
         *                     Change the server side log level; e.g.,
         *                     'GraphServer.GraphSolver=DEBUG'
         *                             <li> gpudb::alter_graph_delete_all:
         *                     Delete all graphs, and remove any persistence
         *                     info.
         *                             <li> gpudb::alter_graph_status: Current
         *                     status of the graph client (db side).
         *                             <li> gpudb::alter_graph_collect_graphs:
         *                     Get the create command for all persisted graphs.
         *                             <li> gpudb::alter_graph_restore_graphs:
         *                     Re-creates all graphs from persist info on
         *                     rank0.
         *                     </ul>
         * @param[in] actionArg_  Action specific argument.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::alter_graph_server_id:
         *                      Indicates which graph server(s) to send the
         *                      request to. Default is to send to get
         *                      information about all the servers.
         *                      </ul>
         * 
         */
        AlterGraphRequest(const std::string& graphName_, const std::string& action_, const std::string& actionArg_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            action( action_ ),
            actionArg( actionArg_ ),
            options( options_ )
        {
        }

        std::string graphName;
        std::string action;
        std::string actionArg;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterGraphRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterGraphRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.actionArg);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterGraphRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.actionArg);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.actionArg);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterGraph(const AlterGraphRequest&) const}.
     * <p>
     * For internal use only: Graph server admin command.
     * For internal use only: Graph server admin command.
     */
    struct AlterGraphResponse
    {

        /**
         * Constructs an AlterGraphResponse object with default parameter
         * values.
         */
        AlterGraphResponse() :
            action(std::string()),
            actionArg(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string action;
        std::string actionArg;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterGraphResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterGraphResponse& v)
        {
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.actionArg);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterGraphResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.action);
                            break;

                        case 1:
                            ::avro::decode(d, v.actionArg);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.actionArg);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
