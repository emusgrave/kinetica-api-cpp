/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_ROLE_H__
#define __CREATE_ROLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::createRole(const CreateRoleRequest&) const "GPUdb::createRole".
     *
     * Creates a new role.
     */
    struct CreateRoleRequest
    {
        /**
         * Constructs a CreateRoleRequest object with default parameters.
         */
        CreateRoleRequest() :
            name(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateRoleRequest object with the specified parameters.
         *
         * @param[in] name_  Name of the role to be created. Must contain only
         *                   lowercase letters, digits, and underscores, and
         *                   cannot begin with a digit. Must not be the same
         *                   name as an existing user or role.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::create_role_resource_group
         *                              "create_role_resource_group": Name of
         *                              an existing resource group to associate
         *                              with this user
         *                      </ul>
         *                      The default value is an empty map.
         */
        CreateRoleRequest(const std::string& name_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            options( options_ )
        {
        }

        /**
         * Name of the role to be created. Must contain only lowercase letters,
         * digits, and underscores, and cannot begin with a digit. Must not be
         * the same name as an existing user or role.
         */
        std::string name;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::create_role_resource_group
         *         "create_role_resource_group": Name of an existing resource
         *         group to associate with this user
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateRoleRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateRoleRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateRoleRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::createRole(const CreateRoleRequest&) const "GPUdb::createRole".
     */
    struct CreateRoleResponse
    {
        /**
         * Constructs a CreateRoleResponse object with default parameters.
         */
        CreateRoleResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::CreateRoleRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::CreateRoleResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateRoleResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateRoleResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __CREATE_ROLE_H__
