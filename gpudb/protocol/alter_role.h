/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_ROLE_H__
#define __ALTER_ROLE_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::alterRole(const AlterRoleRequest&) const "GPUdb::alterRole".
     *
     * Alters a Role.
     */
    struct AlterRoleRequest
    {
        /**
         * Constructs an AlterRoleRequest object with default parameters.
         */
        AlterRoleRequest() :
            name(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterRoleRequest object with the specified parameters.
         *
         * @param[in] name_  Name of the role to be altered. Must be an
         *                   existing role.
         * @param[in] action_  Modification operation to be applied to the
         *                     role.
         *                     Supported values:
         *                     <ul>
         *                         <li>@ref gpudb::alter_role_set_comment
         *                             "alter_role_set_comment": Sets the
         *                             comment for an internal role.
         *                         <li>@ref
         *                             gpudb::alter_role_set_resource_group
         *                             "alter_role_set_resource_group": Sets
         *                             the resource group for an internal role.
         *                             The resource group must exist,
         *                             otherwise, an empty string assigns the
         *                             role to the default resource group.
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action_.
         * @param[in] options_  Optional parameters. The default value is an
         *                      empty map.
         */
        AlterRoleRequest(const std::string& name_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        /**
         * Name of the role to be altered. Must be an existing role.
         */
        std::string name;

        /**
         * Modification operation to be applied to the role.
         * Supported values:
         * <ul>
         *     <li>@ref gpudb::alter_role_set_comment "alter_role_set_comment":
         *         Sets the comment for an internal role.
         *     <li>@ref gpudb::alter_role_set_resource_group
         *         "alter_role_set_resource_group": Sets the resource group for
         *         an internal role. The resource group must exist, otherwise,
         *         an empty string assigns the role to the default resource
         *         group.
         * </ul>
         */
        std::string action;

        /**
         * The value of the modification, depending on @ref action.
         */
        std::string value;

        /**
         * Optional parameters. The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterRoleRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterRoleRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterRoleRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::alterRole(const AlterRoleRequest&) const "GPUdb::alterRole".
     */
    struct AlterRoleResponse
    {
        /**
         * Constructs an AlterRoleResponse object with default parameters.
         */
        AlterRoleResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::AlterRoleRequest::name "name".
         */
        std::string name;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::AlterRoleResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterRoleResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterRoleResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __ALTER_ROLE_H__
