/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __FILTER_H__
#define __FILTER_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref GPUdb::filter(const FilterRequest&) const
     * "GPUdb::filter".
     *
     * Filters data based on the specified expression.  The results are stored
     * in a <a href="../../../concepts/filtered_views/" target="_top">result
     * set</a> with the given @ref viewName.
     *
     * For details see <a href="../../../concepts/expressions/"
     * target="_top">Expressions</a>.
     *
     * The response message contains the number of points for which the
     * expression evaluated to be true, which is equivalent to the size of the
     * result view.
     */
    struct FilterRequest
    {
        /**
         * Constructs a FilterRequest object with default parameters.
         */
        FilterRequest() :
            tableName(std::string()),
            viewName(std::string()),
            expression(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a FilterRequest object with the specified parameters.
         *
         * @param[in] tableName_  Name of the table to filter, in
         *                        [schema_name.]table_name format, using
         *                        standard <a
         *                        href="../../../concepts/tables/#table-name-resolution"
         *                        target="_top">name resolution rules</a>.
         *                        This may be the name of a table or a view
         *                        (when chaining queries).
         * @param[in] viewName_  If provided, then this will be the name of the
         *                       view containing the results, in
         *                       [schema_name.]view_name format, using standard
         *                       <a
         *                       href="../../../concepts/tables/#table-name-resolution"
         *                       target="_top">name resolution rules</a> and
         *                       meeting <a
         *                       href="../../../concepts/tables/#table-naming-criteria"
         *                       target="_top">table naming criteria</a>.  Must
         *                       not be an already existing table or view. The
         *                       default value is ''.
         * @param[in] expression_  The select expression to filter the
         *                         specified table.  For details see <a
         *                         href="../../../concepts/expressions/"
         *                         target="_top">Expressions</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref gpudb::filter_create_temp_table
         *                              "filter_create_temp_table": If @ref
         *                              gpudb::filter_true "true", a unique
         *                              temporary table name will be generated
         *                              in the sys_temp schema and used in
         *                              place of @a viewName_. This is always
         *                              allowed even if the caller does not
         *                              have permission to create tables. The
         *                              generated name is returned in @ref
         *                              gpudb::filter_qualified_view_name
         *                              "qualified_view_name".
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::filter_true
         *                                      "filter_true"
         *                                  <li>@ref gpudb::filter_false
         *                                      "filter_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::filter_false "filter_false".
         *                          <li>@ref gpudb::filter_collection_name
         *                              "filter_collection_name":
         *                              [DEPRECATED--please specify the
         *                              containing schema for the view as part
         *                              of @a viewName_ and use @ref
         *                              GPUdb::createSchema(const CreateSchemaRequest&) const
         *                              "GPUdb::createSchema" to create the
         *                              schema if non-existent]  Name of a
         *                              schema for the newly created view. If
         *                              the schema is non-existent, it will be
         *                              automatically created.
         *                          <li>@ref gpudb::filter_view_id
         *                              "filter_view_id": view this
         *                              filtered-view is part of. The default
         *                              value is ''.
         *                          <li>@ref gpudb::filter_ttl "filter_ttl":
         *                              Sets the <a
         *                              href="../../../concepts/ttl/"
         *                              target="_top">TTL</a> of the view
         *                              specified in @a viewName_.
         *                      </ul>
         *                      The default value is an empty map.
         */
        FilterRequest(const std::string& tableName_, const std::string& viewName_, const std::string& expression_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            viewName( viewName_ ),
            expression( expression_ ),
            options( options_ )
        {
        }

        /**
         * Name of the table to filter, in [ schema_name.\ ]table_name format,
         * using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a>.  This may be the name of a
         * table or a view (when chaining queries).
         */
        std::string tableName;

        /**
         * If provided, then this will be the name of the view containing the
         * results, in [ schema_name.\ ]view_name format, using standard <a
         * href="../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  Must not be an already
         * existing table or view. The default value is ''.
         */
        std::string viewName;

        /**
         * The select expression to filter the specified table.  For details
         * see <a href="../../../concepts/expressions/"
         * target="_top">Expressions</a>.
         */
        std::string expression;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::filter_create_temp_table
         *         "filter_create_temp_table": If @ref gpudb::filter_true
         *         "true", a unique temporary table name will be generated in
         *         the sys_temp schema and used in place of @ref viewName. This
         *         is always allowed even if the caller does not have
         *         permission to create tables. The generated name is returned
         *         in @ref gpudb::filter_qualified_view_name
         *         "qualified_view_name".
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::filter_true "filter_true"
         *             <li>@ref gpudb::filter_false "filter_false"
         *         </ul>
         *         The default value is @ref gpudb::filter_false
         *         "filter_false".
         *     <li>@ref gpudb::filter_collection_name "filter_collection_name":
         *         [DEPRECATED--please specify the containing schema for the
         *         view as part of @ref viewName and use @ref
         *         GPUdb::createSchema(const CreateSchemaRequest&) const
         *         "GPUdb::createSchema" to create the schema if non-existent]
         *         Name of a schema for the newly created view. If the schema
         *         is non-existent, it will be automatically created.
         *     <li>@ref gpudb::filter_view_id "filter_view_id": view this
         *         filtered-view is part of. The default value is ''.
         *     <li>@ref gpudb::filter_ttl "filter_ttl": Sets the <a
         *         href="../../../concepts/ttl/" target="_top">TTL</a> of the
         *         view specified in @ref viewName.
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterRequest>
    {
        static void encode(Encoder& e, const gpudb::FilterRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.expression);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::FilterRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 2:
                            ::avro::decode(d, v.expression);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.expression);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::filter(const FilterRequest&) const "GPUdb::filter".
     */
    struct FilterResponse
    {
        /**
         * Constructs a FilterResponse object with default parameters.
         */
        FilterResponse() :
            count(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * The number of records that matched the given select expression.
         */
        int64_t count;

        /**
         * Additional information.
         * <ul>
         *     <li>@ref gpudb::filter_qualified_view_name
         *         "filter_qualified_view_name": The fully qualified name of
         *         the view (i.e. including the schema)
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::FilterResponse>
    {
        static void encode(Encoder& e, const gpudb::FilterResponse& v)
        {
            ::avro::encode(e, v.count);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::FilterResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __FILTER_H__
