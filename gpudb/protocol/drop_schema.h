/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DROP_SCHEMA_H__
#define __DROP_SCHEMA_H__

namespace gpudb
{
    /**
     * A set of parameters for @ref
     * GPUdb::dropSchema(const DropSchemaRequest&) const "GPUdb::dropSchema".
     *
     * Drops an existing SQL-style <a href="../../../concepts/schemas/"
     * target="_top">schema</a>, specified in @ref schemaName.
     */
    struct DropSchemaRequest
    {
        /**
         * Constructs a DropSchemaRequest object with default parameters.
         */
        DropSchemaRequest() :
            schemaName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DropSchemaRequest object with the specified parameters.
         *
         * @param[in] schemaName_  Name of the schema to be dropped. Must be an
         *                         existing schema.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                          <li>@ref
         *                              gpudb::drop_schema_no_error_if_not_exists
         *                              "drop_schema_no_error_if_not_exists":
         *                              If @ref gpudb::drop_schema_true "true"
         *                              and if the schema specified in @a
         *                              schemaName_ does not exist, no error is
         *                              returned. If @ref
         *                              gpudb::drop_schema_false "false" and if
         *                              the schema specified in @a schemaName_
         *                              does not exist, then an error is
         *                              returned.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::drop_schema_true
         *                                      "drop_schema_true"
         *                                  <li>@ref gpudb::drop_schema_false
         *                                      "drop_schema_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::drop_schema_false
         *                              "drop_schema_false".
         *                          <li>@ref gpudb::drop_schema_cascade
         *                              "drop_schema_cascade": If @ref
         *                              gpudb::drop_schema_true "true", all
         *                              tables within the schema will be
         *                              dropped. If @ref
         *                              gpudb::drop_schema_false "false", the
         *                              schema will be dropped only if empty.
         *                              Supported values:
         *                              <ul>
         *                                  <li>@ref gpudb::drop_schema_true
         *                                      "drop_schema_true"
         *                                  <li>@ref gpudb::drop_schema_false
         *                                      "drop_schema_false"
         *                              </ul>
         *                              The default value is @ref
         *                              gpudb::drop_schema_false
         *                              "drop_schema_false".
         *                      </ul>
         *                      The default value is an empty map.
         */
        DropSchemaRequest(const std::string& schemaName_, const std::map<std::string, std::string>& options_):
            schemaName( schemaName_ ),
            options( options_ )
        {
        }

        /**
         * Name of the schema to be dropped. Must be an existing schema.
         */
        std::string schemaName;

        /**
         * Optional parameters.
         * <ul>
         *     <li>@ref gpudb::drop_schema_no_error_if_not_exists
         *         "drop_schema_no_error_if_not_exists": If @ref
         *         gpudb::drop_schema_true "true" and if the schema specified
         *         in @ref schemaName does not exist, no error is returned. If
         *         @ref gpudb::drop_schema_false "false" and if the schema
         *         specified in @ref schemaName does not exist, then an error
         *         is returned.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::drop_schema_true "drop_schema_true"
         *             <li>@ref gpudb::drop_schema_false "drop_schema_false"
         *         </ul>
         *         The default value is @ref gpudb::drop_schema_false
         *         "drop_schema_false".
         *     <li>@ref gpudb::drop_schema_cascade "drop_schema_cascade": If
         *         @ref gpudb::drop_schema_true "true", all tables within the
         *         schema will be dropped. If @ref gpudb::drop_schema_false
         *         "false", the schema will be dropped only if empty.
         *         Supported values:
         *         <ul>
         *             <li>@ref gpudb::drop_schema_true "drop_schema_true"
         *             <li>@ref gpudb::drop_schema_false "drop_schema_false"
         *         </ul>
         *         The default value is @ref gpudb::drop_schema_false
         *         "drop_schema_false".
         * </ul>
         * The default value is an empty map.
         */
        std::map<std::string, std::string> options;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropSchemaRequest>
    {
        static void encode(Encoder& e, const gpudb::DropSchemaRequest& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DropSchemaRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.options);
            }
        }
    };
} // end namespace avro

namespace gpudb
{
    /**
     * A set of results returned by @ref
     * GPUdb::dropSchema(const DropSchemaRequest&) const "GPUdb::dropSchema".
     */
    struct DropSchemaResponse
    {
        /**
         * Constructs a DropSchemaResponse object with default parameters.
         */
        DropSchemaResponse() :
            schemaName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        /**
         * Value of @ref gpudb::DropSchemaRequest::schemaName "schemaName".
         */
        std::string schemaName;

        /**
         * Additional information.
         */
        std::map<std::string, std::string> info;
    };
} // end namespace gpudb

namespace avro
{
    template<> struct codec_traits<gpudb::DropSchemaResponse>
    {
        static void encode(Encoder& e, const gpudb::DropSchemaResponse& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DropSchemaResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.info);
            }
        }
    };
} // end namespace avro

#endif // __DROP_SCHEMA_H__
